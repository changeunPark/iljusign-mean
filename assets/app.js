angular.module("app",["ui.router","ui.bootstrap","menuControllers","userControllers","mainControllers","emailControllers","managementControllers","itemControllers","typeControllers","orderControllers","uiCropper","bannerController","galleryController"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptors")}]);var app=angular.module("app");app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,a){t.otherwise("/"),a.hashPrefix(""),a.html5Mode(!0),e.state("app",{url:"/",views:{"bodyContent@":{templateUrl:"/main/home.html"}}}).state("app.registerStep1",{url:"register/step1",views:{"bodyContent@":{templateUrl:"/users/register/registerStep1.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.registerStep2",{url:"register/step2",views:{"bodyContent@":{templateUrl:"/users/register/registerStep2.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.registerStep3",{url:"register/step3",views:{"bodyContent@app":{templateUrl:"/users/register/registerStep3.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.login",{url:"login",views:{"bodyContent@":{templateUrl:"/users/login/login.html"}}}).state("app.board",{url:"board",views:{"bodyContent@":{templateUrl:"/categoryes/board/form.html"}}}).state("app.gallery",{url:"gallery",views:{"bodyContent@":{templateUrl:"/categoryes/gallery/home.html"}}}).state("app.user",{url:"user",views:{"bodyContent@":{templateUrl:"/users/partial/user.html"}}}).state("app.commerceDetail",{url:"commerce-detail",views:{"bodyContent@":{templateUrl:"/users/partial/commerceDetail.html"}}}).state("app.basket",{url:"basket",views:{"bodyContent@":{templateUrl:"/users/partial/basket.html",controller:"basketCtrl",controllerAs:"basket"}}}).state("app.category",{url:"category=:category_id",views:{"subMenu@app":{templateUrl:"/menues/subMenu.html",controller:"subMenuCtrl",controllerAs:"subMenu"},"bodyContent@":{templateUrl:"/categoryes/items/form.html",controller:"getTypeItemsCtrl",controllerAs:"getTypeItems"}}}).state("app.category.item_type",{url:"/item_type=:type_code",views:{"bodyContent@":{templateUrl:"/categoryes/items/form.html",controller:"getTypeItemsCtrl",controllerAs:"getTypeItems"}}}).state("app.category.item_type.show",{url:"/item:item_id",views:{"bodyContent@":{templateUrl:"/categoryes/items/item.html",controller:"getTypeItemCtrl",controllerAs:"getTypeItem"}}}).state("app.category.show",{url:"/item:item_id",views:{"bodyContent@":{templateUrl:"/categoryes/items/item.html",controller:"getTypeItemCtrl",controllerAs:"getTypeItem"}}}).state("app.makeOrder",{url:"makeOrder",views:{"bodyContent@":{templateUrl:"/order/makeOrder.html",controller:"readOrderCtrl",controllerAs:"readOrder"}}}).state("app.confirmOrder",{url:"confirmOrder",views:{"bodyContent@":{templateUrl:"/order/confirmOrder.html",controller:"readOrderCtrl",controllerAs:"readOrderCtrl"}}}).state("app.management",{url:"management",views:{"bodyContent@app":{templateUrl:"/management/form.html"},"menu@app.management":{templateUrl:"/management/menu.html"}}}).state("app.management.category",{url:"category",views:{"contents@app.management":{templateUrl:"/management/partial/category.html",controller:"mainMenuCtrl",controllerAs:"mainMenu"}}}).state("app.management.typeAndItems",{url:"/typeAndItems",views:{"contents@app.management":{templateUrl:"/management/partial/typeAndItems.html"}}}).state("app.management.typeAndItems.update",{url:"/updateType:item_type",views:{"contents@app.management":{templateUrl:"/management/partial/update/type.html",controller:"updateTypeCtrl",controllerAs:"updateType"}}}).state("app.management.typeAndItems.updateItemType",{url:"/updateItem:item_id",views:{"contents@app.management":{templateUrl:"/management/partial/update/itemType.html",controller:"updateItemTypeCtrl",controllerAs:"updateItemType"}}}).state("app.management.typeAndItems.updateItem",{url:"/update/item:item_id",views:{"contents@app.management":{templateUrl:"/management/partial/update/item.html",controller:"updateItemCtrl",controllerAs:"updateItem"}}}).state("app.management.typeAndItems.readItem",{url:":item_id",views:{"contents@app.management":{templateUrl:"/management/partial/read/item.html",controller:"readItemCtrl",controllerAs:"readItem"}}}).state("app.management.banner",{url:"/banner",views:{"contents@app.management":{templateUrl:"/management/partial/banner.html",controller:"uploadBannerCtrl",controllerAs:"uploadBanner"}}}).state("app.management.gallery",{url:"/gallery",views:{"contents@app.management":{templateUrl:"/management/partial/gallery.html",controller:"uploadgalleryCtrl",controllerAs:"uploadGallery"}}}).state("app.management.orderStatus",{url:"/orderStatus",views:{"contents@app.management":{templateUrl:"/management/partial/orderStatus.html"}}}).state("app.management.members",{url:"/members",views:{"contents@app.management":{templateUrl:"/management/partial/members.html"}}}).state("resetusername",{url:"/resetusername",templateUrl:"/users/reset/username.html",controller:"usernameCtrl",controllerAs:"username"}).state("resetpassword",{url:"/resetpassword",templateUrl:"/users/reset/password.html",controller:"passwordCtrl",controllerAs:"password"}).state("reset",{url:"/reset/:token",templateUrl:"/users/reset/newpassword.html",controller:"resetCtrl",controllerAs:"reset"}).state("activate",{url:"/activate/:token",templateUrl:"/users/activation/activate.html",controller:"emailCtrl",controllerAs:"email"}).state("resend",{url:"/resend",templateUrl:"/users/activation/resend.html",controller:"resendCtrl",controllerAs:"resend"}).state("app.intro",{url:"intro",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/companyIntroduce.tpl.html",authenticated:!1}}}).state("app.terms",{url:"terms",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/terms.tpl.html",authenticated:!1}}}).state("app.privacy",{url:"privacy",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/privacy.tpl.html",authenticated:!1}}})}]),app.run(["$rootScope","User","$state",function(e,t,a){e.$on("$stateChangeStart",function(e,t,a,r,n,i){}),e.$on("$stateChangeError",function(e,t,r,n,i,s){a.go("app")})}]),angular.module("adminServices",[]).factory("Admin",["$http",function(e){return adminFactory={},adminFactory.deleteItem=function(t){return e.delete("/api/item/"+t)},adminFactory.readAristCrop=function(t){return e.post("/api/createCropImage",t)},adminFactory.createAristPhoto=function(t){return e.post("/api/artistProfiles",t)},adminFactory.createItem=function(t){return e.post("/api/item",t)},adminFactory.readItems=function(){return e.get("/api/item")},adminFactory.readItem=function(t){return e.get("/api/item/"+t)},adminFactory.updateItemType=function(t){return e.put("/api/itemType",t)},adminFactory.readUpdateItemType=function(t){return e.get("/api/itemType/"+t)},adminFactory.readItemType=function(){return e.get("/api/itemType")},adminFactory.deleteType=function(t){return e.delete("/api/type/"+t)},adminFactory.readUpdateType=function(t){return e.get("/api/type/"+t)},adminFactory.updateUpdateType=function(t){return e.put("/api/type",t)},adminFactory.createType=function(t){return e.post("/api/type",t)},adminFactory.readType=function(){return e.get("/api/type")},adminFactory}]),angular.module("authServices",[]).factory("Auth",["$http","AuthToken",function(e,t){var a={};return a.getUser=function(){if(t.getToken())return e.post("/api/me");$q.reject({message:"User has no token"})},a.login=function(a){return e.post("/api/authenticate",a).then(function(e){return t.setToken(e.data.token),e})},a.isLoggedIn=function(){return!!t.getToken()},a.logout=function(){t.setToken()},a}]).factory("AuthToken",["$window",function(e){var t={};return t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token",t)},t.getToken=function(){return e.localStorage.getItem("token")},t}]).factory("AuthInterceptors",["AuthToken",function(e){var t={};return t.request=function(t){var a=e.getToken();return a&&(t.headers["x-access-token"]=a),t},t}]),angular.module("menuServices",[]).factory("Menu",["$http",function(e){return menuFactory={},menuFactory.deleteMenu=function(t){return e.delete("/api/menu/"+t)},menuFactory.updateMenu=function(t){return e.put("/api/menu/",t)},menuFactory.createMenu=function(t){return e.post("/api/menu",t)},menuFactory.readMainMenu=function(){return e.get("/api/menu")},menuFactory.readSubMenu=function(t){return e.get("/api/menu/"+t)},menuFactory}]),angular.module("orderServices",[]).factory("Order",["$http",function(e){return orderFactory={},orderFactory.updateDelivery=function(t){return e.put("/api/delivery/"+t.user_id,t)},orderFactory.createDelivery=function(t){return e.post("/api/delivery",t)},orderFactory.deleteBasket=function(t){return e.delete("/api/basket/"+t)},orderFactory.readBasket=function(){return e.get("/api/basket")},orderFactory.createBasket=function(t){return e.post("/api/basket",t)},orderFactory.deleteOrder=function(t){return e.delete("/api/makeOrder/"+t)},orderFactory.readOrder=function(t){return e.get("/api/makeOrder/"+t)},orderFactory.readOrderAndDeli=function(){return e.get("/api/makeOrder")},orderFactory.createOrder=function(t){return e.post("/api/makeOrder",t)},orderFactory}]),angular.module("userServices",[]).factory("User",["$http",function(e){return userFactory={},userFactory.getPermission=function(){return e.get("/api/permission")},userFactory.create=function(t){return e.post("/api/users",t)},userFactory.activeAccount=function(t){return e.put("/api/activate/"+t)},userFactory.checkCredentials=function(t){return e.post("/api/resend",t)},userFactory.resendLink=function(t){return e.put("/api/resend",t)},userFactory.sendUsername=function(t){return e.get("/api/resetusername/"+t)},userFactory.sendPassword=function(t){return e.put("/api/resetpassword",t)},userFactory.resetPassword=function(t){return e.get("/api/resetpassword/"+t)},userFactory.savePassword=function(t){return e.put("/api/savepassword",t)},userFactory.renewSession=function(t){return e.get("/api/renewToken/"+t)},userFactory}]),angular.module("app").directive("adminUsers",[function(){return{restrict:"E",controller:[function(){}],controllerAs:"NameCtrl",templateUrl:"/directives/adminUsers.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("banner",["$http",function(e){return{restrict:"E",controller:[function(){}],controllerAs:"bannerCtrl",templateUrl:"/directives/banner.tpl.html",link:function(t,a,r,n){var i=n;e.get("/api/banner").then(function(e){e.data.success?i.bannerData=e.data.bannerData:console.log("불러오지 못하였습니다.")})}}}]).controller("CarouselCtrl",["$scope",function(e){function t(e){for(var t=0,a=n.length;t<a;t++)n[t].id=e.pop()}function a(){for(var e=[],t=0;t<i;++t)e[t]=t;return r(e)}function r(e){var t,a,r=e.length;if(r)for(;--r;)a=Math.floor(Math.random()*(r+1)),t=e[a],e[a]=e[r],e[r]=t;return e}e.myInterval=2500,e.noWrapSlides=!1,e.active=0;var n=e.slides=[],i=0;e.addSlide=function(){n.length;n.push({image:["/images/items/banner/1.jpg","/images/items/banner/2.jpg","/images/items/banner/3.jpg"][n.length%3],id:i++})},e.randomize=function(){t(a())};for(var s=0;s<3;s++)e.addSlide()}]),angular.module("app").directive("menuItem",["Menu",function(e){return{restrict:"E",controller:[function(){}],controllerAs:"menuItemCtrl",templateUrl:"/directives/menuItem.tpl.html",link:function(t,a,r,n){var i=n;e.readMainMenu().then(function(e){e.data.success?i.mainMenues=e.data.result:i.errorMsg=e.data.message})}}}]),angular.module("bannerController",[]).controller("uploadBannerCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadBanner=function(){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var t=new FormData;t.append("myfile",i.file.upload),a.post("/api/banner/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(e.$emit("UNLOAD"),r.alert(t.data.message),n.reload(),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})}}]).controller("getBannerCtrl",["$http",function(e){var t=this;e.get("/api/banner").then(function(e){e.data.success?t.bannerData=e.data.bannerData:console.log("불러오지 못하였습니다.")})}]),angular.module("galleryController",[]).controller("uploadgalleryCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadImage=function(t){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var n=new FormData;n.title=t,n.append("myfile",i.file.upload),a.patch("/api/gallery/",n,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(i.imagePath=t.data.image_path,e.$emit("UNLOAD"),r.alert(t.data.message),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})},this.uploadGallery=function(e){galleryData={title:e,imagePath:i.imagePath},a.post("/api/gallery",galleryData).then(function(e){})}}]).controller("getGalleryCtrl",["$http",function(e){var t=this;e.get("/api/gallery").then(function(e){e.data.success?(t.galleryData=e.data.galleryData,console.log(t.galleryData)):console.log("불러오지 못하였습니다.")})}]),angular.module("itemControllers",["orderServices"]).filter("sumByKey",function(){return function(e,t){var a=e instanceof Array?e.length:0;if(void 0===t||0===a)return a;for(var r=0;a--;)r+=e[a][t[0]]*e[a][t[1]];return r}}).controller("getTypeItemsCtrl",["$stateParams","$http",function(e,t){var a=this,r=e.category_id;if(e.type_code){var n=e.type_code;t.get("/api/item_type/"+r,{params:{type_code:n}}).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}else t.get("/api/item_type/"+r).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}]).controller("getTypeItemCtrl",["Admin","$stateParams","$window","$state","Order",function(e,t,a,r,n){var s=this,o=t.item_id;s.optionItem=!1,s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,s.optionList=[],this.addItem=function(e){0===e.id?a.alert("옵션을 선택해주세요."):(s.optionItem=!0,s.optionList.push({kind:e.name,price:e.id,amount:1}))},this.createBasket=function(e){var t={item_id:e.item_id};n.createBasket(t).then(function(e){e.data.success,a.alert(e.data.message)})},this.createOrder=function(e){var t={item_id:e.item_id,amount:e.amount,kind_of:e.kind_of,price:e.price};n.createOrder(t).then(function(e){e.data.success?(s.successMsg=e.data.message,r.go("app.makeOrder")):s.errorMsg=e.data})},e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]),angular.module("managementControllers",["adminServices","menuServices","orderServices"]).controller("readItemsCtrl",["Admin","$state",function(e,t){var a=this;e.readItems().then(function(e){a.errorMsg=!1,e.data.success?a.itemsData=e.data.result:a.errorMsg=e.data.message}),this.deleteItem=function(r){a.errorMsg=!1;var n=r.item_id;e.deleteItem(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("readItemCtrl",["Admin","$stateParams","$scope","Order","$window",function(e,t,a,r,n){var s=this,o=t.item_id;s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,s.data.selectedOption={id:r[0]},i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]).controller("updateItemCtrl",["Admin","$stateParams","$scope","$http","$timeout","$state","$window","Menu",function(e,t,a,r,n,s,o,l){function d(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var c=this,u=t.item_id;c.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},l.readMainMenu().then(function(e){if(c.errorMsg=!1,e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)c.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else c.errorMsg=e.data.message}),this.readMenu=function(e){if(c.errorMsg=!1,c.readMenuStatus=!1,0===e.id)o.alert("카테고리를 선택해주세요.");else{var t=e.id;r.get("/api/menu/"+t).then(function(e){if(e.data.success)if(0===e.data.result.length)c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},o.alert("등록된 상품이 없습니다.");else{c.readMenuStatus=!0,c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)c.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}else c.errorMsg=e.data.message})}},e.readItem(u).then(function(e){console.log(e),e.data.success?(c.itemData=e.data.result,c.data.selectedOption={id:c.itemData.category_id}):c.errorMsg=e.data.message}),this.updateItem=function(e){if(c.errorMsg=!1,c.readMenuStatus)if(0===e.item_type||"0"===e.item_type)o.alert("상품 분류를 선택해주세요.!");else{var t={type:e.item_type,item_name:e.item_name};r.put("/api/item/"+u,t).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})}else updateData2={type:c.itemData.item_type_id,item_name:e.item_name},r.put("/api/item/"+u,updateData2).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.mainThumbnail={},c.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),c.mainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoImage/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.mainPhoto=!0,c.disabled=!1;var t={image:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.explainThumbnail={},c.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),c.explainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoExplain/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.explainPhoto=!0,c.disabled=!1;var t={explain:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},c.myImage="",c.myCroppedImage="";var m=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),c.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",m),this.readCropImage=function(t){if(a.$emit("LOAD"),c.thumbnail=!1,c.disabled=!0,""===t.base64Url||null===t.base64Url||void 0===t.base64Url)c.disabled=!1;else{a.$emit("UNLOAD");var n=d(a.myCroppedImage);e.readAristCrop(n).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.thumbnail=!0,c.disabled=!1;var t={thumbnail:e.data.filePath};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)})}else a.$emit("UNLOAD"),c.disabled=!1})}}}]).controller("createItemCtrl",["$http","$timeout","$scope","Admin","$state","$window","Menu",function(e,t,a,r,n,s,o){function l(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var d=this;d.kindList=[],d.type_tiny=[],d.type_price=[],this.addLine=function(e){e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?s.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?s.alert("옵션 가격을 입력해주세요."):(d.kindList.push({kind:e.kindValue,price:e.kindPrice}),d.type_tiny.push(e.kindValue),d.type_price.push(e.kindPrice)):s.alert("정확한 값을 입력해주세요.")},d.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},d.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},o.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)d.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else d.errorMsg=e.data.message}),this.readMenu=function(t){if(0===t.id)s.alert("카테고리를 선택해주세요.");else{var a=t.id;e.get("/api/menu/"+a).then(function(e){if(e.data.success)if(0===e.data.result.length)d.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},s.alert("등록된 상품이 없습니다.");else{d.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)d.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}})}},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),d.mainThumbnail={},d.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),d.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),d.mainPhoto=!1,d.disabled=!0;var t=new FormData;t.append("myfile",d.file.upload),e.post("/api/createPhotoImage/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),d.mainPhoto=!0,d.disabled=!1,d.mainImagePath=e.data.item_path,d.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),d.disabled=!1,d.file={})})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),d.explainThumbnail={},d.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),d.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),d.explainPhoto=!1,d.disabled=!0;var t=new FormData;t.append("myfile",d.file.upload),e.post("/api/createPhotoExplain/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),d.explainPhoto=!0,d.disabled=!1,d.explainImagePath=e.data.item_path,d.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),d.disabled=!1,d.file={})})},d.myImage="",d.myCroppedImage="";var c=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),d.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",c),this.readCropImage=function(e){if(a.$emit("LOAD"),d.thumbnail=!1,d.disabled=!0,""===e.base64Url||null===e.base64Url||void 0===e.base64Url)d.disabled=!1;else{a.$emit("UNLOAD");var t=l(a.myCroppedImage);r.readAristCrop(t).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),d.thumbnail=!0,d.disabled=!1,d.thumbnailPath=e.data.filePath):(a.$emit("UNLOAD"),d.disabled=!1)})}},this.createPhoto=function(e){a.$emit("LOAD"),void 0===e||null===e||""===e?(s.alert("빈칸을 모두 입력해주세요."),d.disabled=!1,a.$emit("UNLOAD")):"0"===d.data2.selectedOption.id?(a.$emit("UNLOAD"),d.disabled=!1,s.alert("상품 분류을 선택해주세요.")):void 0===e.title||null===e.title||""===e.title?(a.$emit("UNLOAD"),d.disabled=!1,s.alert("상품 제목를 입력해주세요.")):(d.uploadData={title:e.title,type:d.data2.selectedOption.id,kind:d.type_tiny.toString(),price:d.type_price.toString()},r.createItem(d.uploadData).then(function(e){e.data.success?(a.$emit("UNLOAD"),d.disabled=!0,s.alert(e.data.message),n.reload()):(a.$emit("UNLOAD"),d.disabled=!1,s.alert(e.data.message))}))}}]),angular.module("menuControllers",["menuServices"]).controller("mainMenuCtrl",["Menu","$state",function(e,t){var a=this;this.createMenu=function(r){if(a.errorMsg=!1,void 0===r)a.errorMsg="올바른 정보를 입력해주세요.";else{var n={name:r.name};e.createMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}},this.update=function(r){a.errorMsg=!1;var n={category_id:r.category_id,name:r.name};e.updateMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})},this.delete=function(r){a.errorMsg=!1;var n=r.category_id;e.deleteMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("subMenuCtrl",["Menu","$state","$stateParams","$http",function(e,t,a,r){var n=this,i=a.category_id;r.get("/api/category/"+i).then(function(e){e.data.success&&(n.subMenuDatas=e.data.result)})}]),angular.module("typeControllers",["adminServices","menuServices","orderServices"]).controller("updateItemTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_id;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateItemType(s).then(function(e){if(n.errorMsg=!1,e.data.success){t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id};var a={kind:n.updataData.kind.split(","),price:n.updataData.price.split(",")};for(n.optionDatas=[],i=0;i<a.kind.length;i++)n.optionDatas[i]={kind:a.kind[i],price:a.price[i]}}else n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})},this.updateitemType=function(e){var t=[],s=[];for(i=0;i<n.optionDatas.length;i++)t.push(n.optionDatas[i].kind),s.push(n.optionDatas[i].price);var o={item_id:e.item_id,item_name:e.item_name,price:s.toString(),kind:t.toString()};a.updateItemType(o).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readItemTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyItemType=function(a){var r={type:a.item_type_id,title:a.item_name,kind:a.kind.toString(),price:a.price.toString()};e.createItem(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_id;e.deleteItem(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readItemType().then(function(e){if(e.data.success){r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(a=0;a<t.length;a++)n.data.availableOptions[a+1]={name:t[a].name,id:t[a].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result;for(var t=[],a=0;a<e.data.result.length;a++)t[a]={kind:n.typeDatas[a].kind.split(","),price:n.typeDatas[a].price.split(",")},n.typeDatas[a].kind=t[a].kind,n.typeDatas[a].price=t[a].price}else n.errorMsg=e.data.message})}]).controller("updateTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_type;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateType(s).then(function(e){n.errorMsg=!1,e.data.success?(t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id}):n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyType=function(a){var r={category:a.category_id,type_description:a.type_description,type_code:a.type_code};e.createType(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_type;e.deleteType(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readType().then(function(e){e.data.success?(r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result):n.errorMsg=e.data.message})}]).controller("createTypeCtrl",["Admin","$state","Menu","$window",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),this.createType=function(a){n.errorMsg=!1,n.typeData={category:n.data.selectedOption.id,type_description:a.type_description,type_code:a.type_code},e.createType(n.typeData).then(function(e){e.data.success?(n.success=e.data.message,t.reload()):n.errorMsg=e.data.message})},n.kindList=[],n.type_tiny=[],n.type_price=[],this.addLine=function(e){e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?r.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?r.alert("옵션 가격을 입력해주세요."):(n.kindList.push({kind:e.kindValue,price:e.kindPrice}),n.type_tiny.push(e.kindValue),n.type_price.push(e.kindPrice)):r.alert("정확한 값을 입력해주세요.")}}]),
angular.module("mainControllers",["authServices","userServices"]).controller("mainCtrl",["Auth","$timeout","$location","$state","$rootScope","$scope","$window","$interval","User","AuthToken",function(e,t,a,r,n,i,s,o,l,d){var c=this;c.loadme=!1,i.$on("LOAD",function(){i.loading=!0}),i.$on("UNLOAD",function(){i.loading=!1}),n.$on("$stateChangeStart",function(){u?e.isLoggedIn()?(c.isLoggedIn=!0,c.loadme=!0,e.getUser().then(function(e){c.user=e.data,c.loadme=!0,l.getPermission().then(function(e){e.data.success?"admin"===e.data.permission?(c.authorized=!0,c.loadme=!0):"artist"===e.data.permission?(c.permission=!0,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0)})})):(c.user=!1,c.isLoggedIn=!1,c.loadme=!0):u()});var u=function(){if(e.isLoggedIn()){c.checkSession=!0;var t=o(function(){var e=s.localStorage.getItem("token");if(null===e)o.cancel(t);else{self.parseJwt=function(e){var t=e.split(".")[1],a=t.replace("-","+").replace("_","/");return JSON.parse(s.atob(a))};var a=self.parseJwt(e),r=Math.floor(Date.now()/1e3);a.exp-r<=5&&(m("expired"),o.cancel(t))}},2e3)}};u(),c.renewSession=function(){c.choiceMade=!0,l.renewSession(c.user.username).then(function(e){e.data.success?(d.setToken(e.data.token),u(),p("expired")):(c.ModalBody=e.data.message,p("expired"))})},c.endSession=function(){c.choiceMade=!0,p("expired"),t(function(){m("logout")},500)};var m=function(a){c.choiceMade=!1,c.modalHeader=void 0,c.modalBody=void 0,c.hideButton=!1,"expired"===a?(c.modalHeader="Timeout Warning",c.modalBody="Your session will expired in 5 minutes. Would you like to renew your session?",$("#myModal").modal({backdrop:"static"})):"logout"===a?(c.hideButton=!0,c.modalHeader="로그아웃",$("#myModal").modal({backdrop:"static"}),t(function(){e.logout(),c.isLoggedIn=!1,c.authorized=!1,c.permission=!1,c.disabled=!1,c.successMsg=!1,p("logout"),r.reload()},1e3)):"login"===a&&$("#login").modal({backdrop:"static"}),t(function(){c.choiceMade||p("logout")},2e3)},p=function(e){"expired"===e?$("#myModal").modal("hide"):"logout"===e?$("#myModal").modal("hide"):"login"===e&&$("#login").modal("hide")};this.doLogin=function(a,n){c.errorMsg=!1,c.expired=!1,c.disabled=!0,n?e.login(c.loginData).then(function(e){e.data.success?(c.successMsg=e.data.message,t(function(){c.loginData=null,c.isLoggedIn=!0,u(),r.go("app")},1e3)):e.data.expired?(c.expired=!0,c.disabled=!0,c.errorMsg=e.data.message):(c.disabled=!1,c.errorMsg=e.data.message)}):(c.disabled=!1,c.loading=!1,c.errorMsg="올바른 정보를 입력해주세요.")},c.logout=function(){m("logout")},c.resend=function(){p("login"),t(function(){r.go("resend"),c.expired=!1},500)},c.resetusername=function(){p("login"),t(function(){r.go("resetusername")},500)},c.resetpassword=function(){p("login"),t(function(){r.go("resetpassword")},500)}}]),angular.module("orderControllers",["orderServices"]).controller("readOrderCtrl",["$stateParams","$state","$window","Order","$scope",function(e,t,a,r,n){var s=this,o=n.main.user.user_id;s.getItemFail=!1,s.cashReceipt=!0,s.cashReceipt?s.getCashReceipt=!0:s.getCashReceipt=!1,this.readAddress=function(){daum.postcode.load(function(){s.addressDetail="",new daum.Postcode({oncomplete:function(e){s.deliData={sigungu_code:e.sigunguCode,jibun_address:e.jibunAddress,road_address:e.roadAddress}}}).open()})},r.readOrderAndDeli().then(function(e){if(s.errorMsg=!1,e.data.success)if(0===e.data.result.length)s.delivery=!1,r.readOrder(o).then(function(e){var t=[];for(s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]});else{var t=[];for(s.delivery=!0,s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]}else s.errorMsg=e.data.message}),this.confirmOrder=function(e){var t="";s.delivery?void 0===e.daliData?console.log("변경사항 없음"):(t=e.daliData,r.updateDelivery(t).then(function(e){})):(t=e.daliData,e.receiptData,r.createDelivery(t).then(function(e){}))},this.delete=function(e){s.errorMsg=!1;var a=e.item_id;r.deleteOrder(a).then(function(e){e.data.success?(s.successMsg=e.data.message,t.reload()):s.errorMsg=e.data.message})}}]).controller("basketCtrl",["Order","$window","$state",function(e,t,a){var r=this;r.amount=1,r.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},this.delete=function(t){r.errorMsg=!1;var n=t.basket_id;e.deleteBasket(n).then(function(e){e.data.success?(r.successMsg=e.data.message,a.reload()):r.errorMsg=e.data.message})},this.makeBasket=function(){},e.readBasket().then(function(e){if(r.errorMsg=!1,e.data.success){r.basketData=e.data.result;var t,a=[],n=[];for(t=0;t<r.basketData.length;t++)a[t]=r.basketData[t].kind.split(","),n[t]=r.basketData[t].price.split(",");for(t=0;t<a.length;t++)for(r.data[t]={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},j=0;j<a[t].length;j++)r.data[t].availableOptions[j+1]={name:a[t][j],id:Number(n[t][j])}}else r.errorMsg=e.data.message})}]),angular.module("emailControllers",["userServices"]).controller("emailCtrl",["$stateParams","User","$timeout","$state",function(e,t,a,r){var n=this;t.activeAccount(e.token).then(function(e){n.successMsg=!1,n.errorMsg=!1,e.data.success?(n.disabled=!0,n.successMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3)):(n.errorMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3))})}]).controller("resendCtrl",["User","$timeout","$state",function(e,t,a){app=this,this.checkCredentials=function(r){app.successMsg=!1,app.errorMsg=!1,app.disabled=!0,e.checkCredentials(this.loginData).then(function(r){r.data.success?e.resendLink(app.loginData).then(function(e){e.data.success&&(app.disabled=!0,app.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3))}):(app.disabled=!1,app.errorMsg=r.data.message)})}}]).controller("usernameCtrl",["User","$timeout","$state",function(e,t,a){var r=this;this.sendUsername=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendUsername(r.userData.email).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 이메일 주소가 아닙니다.")}}]).controller("passwordCtrl",["User","$timeout","$state",function(e,t,a){var r=this;r.sendPassword=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendPassword(r.resetData).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 아이디가 아닙니다.")}}]).controller("resetCtrl",["$stateParams","$scope","User","$timeout","$state",function(e,t,a,r,n){var i=this;i.hide=!0,a.resetPassword(e.token).then(function(e){e.data.success?(i.hide=!1,t.alert="alert alert-success",i.successMsg="새로운 비밀번호를 입력해주세요.",t.username=e.data.user[0].username):(t.alert="alert alert-danger",i.errorMsg=e.data.message)}),i.savePassword=function(e,s,o){i.errorMsg=!1,i.successMsg=!1,i.disabled=!0,i.loading=!0,s&&o?(i.regData.username=t.username,a.savePassword(i.regData).then(function(e){i.loading=!1,e.data.success?(t.alert="alert alert-success",i.successMsg=e.data.message+"...메인 화면으로 이동합니다.",r(function(){n.go("app")},2e3)):(t.alert="alert alert-danger",i.disabled=!1,i.errorMsg=e.data.message)})):(t.alert="alert alert-danger",i.loading=!1,i.disabled=!1,i.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("userControllers",["userServices"]).controller("regCtrl",["$http","$location","$timeout","User","Auth","$state",function(e,t,a,r,n,i){var s=this;this.regStep1=function(e){s.errorMsg=!1,e?e.terms&&e.privacy?(s.successMsg="약관에 성공적으로 동의하셨습니다.",s.disabled=!0,i.go("app.registerStep2")):(s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다.",s.disabled=!1):s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다."},this.regStep2=function(e,t,a){s.errorMsg=!1,s.disabled=!0,i.go("app.registerStep3")},this.regStep3=function(e,t,o){s.errorMsg=!1,s.disabled=!0,t&&o?r.create(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,n.login(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,a(function(){i.go("app")},1e3)):e.data.expired?(s.expired=!0,s.disabled=!0,s.errorMsg=e.data.message):(s.disabled=!1,s.errorMsg=e.data.message)})):(s.disabled=!1,s.errorMsg=e.data.message)}):(s.disabled=!1,s.loading=!1,s.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("app").directive("companyIntroduce",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/companyIntroduce.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("companyPrivacyInformation",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/companyInformation/companyPrivacyInformation.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("privacy",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/privacy.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("terms",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/terms.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("userQuickMenu",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/companyInformation/userQuickMenu.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("content",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/main/content.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("footer",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/footer.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("header",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/header.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,a,r){var n=e(r.fileModel),i=n.assign;a.bind("change",function(){t.$apply(function(){i(t,a[0].files[0])})})}}}]),angular.module("app").directive("match",function(){return{restrict:"A",controller:["$scope",function(e){e.doConfirm=function(t){e.confirmed=!1,t.forEach(function(t){e.confirm==t?e.confirmed=!0:e.confirmed=!1})}}],link:function(e,t,a){a.$observe("match",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)}),e.$watch("confirm",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)})}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlLmpzIiwic2VydmljZXMvYWRtaW5TZXJ2aWNlcy5qcyIsInNlcnZpY2VzL2F1dGhTZXJ2aWNlcy5qcyIsInNlcnZpY2VzL21lbnVTZXJ2aWNlcy5qcyIsInNlcnZpY2VzL29yZGVyU2VydmljZXMuanMiLCJzZXJ2aWNlcy91c2VyU2VydmljZXMuanMiLCJkaXJlY3RpdmVzL2FkbWluVXNlcnMuanMiLCJkaXJlY3RpdmVzL2Jhbm5lci5qcyIsImRpcmVjdGl2ZXMvbWVudUl0ZW0uanMiLCJjb250cm9sbGVycy9hZG1pbi9iYW5uZXJDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvYWRtaW4vZ2FsbGVyeUNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9hZG1pbi9pdGVtQ29udHJvbGxlcnMuanMiLCJjb250cm9sbGVycy9hZG1pbi9tYW5hZ2VtZW50Q29udHJvbGxlcnMuanMiLCJjb250cm9sbGVycy9hZG1pbi9tZW51Q29udHJvbGxlcnMuanMiLCJjb250cm9sbGVycy9hZG1pbi90eXBlQ29udHJvbGxlcnMuanMiLCJjb250cm9sbGVycy9tYWluL21haW5Db250cm9sbGVycy5qcyIsImNvbnRyb2xsZXJzL21haW4vb3JkZXJDb250cm9sbGVycy5qcyIsImNvbnRyb2xsZXJzL3VzZXIvZW1haWxDdHJsLmpzIiwiY29udHJvbGxlcnMvdXNlci91c2VyQ3RybC5qcyIsImRpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL2NvbXBhbnlJbnRyb2R1Y2UuanMiLCJkaXJlY3RpdmVzL2NvbXBhbnlJbmZvcm1hdGlvbi9jb21wYW55UHJpdmFjeUluZm9ybWF0aW9uLmpzIiwiZGlyZWN0aXZlcy9jb21wYW55SW5mb3JtYXRpb24vcHJpdmFjeS5qcyIsImRpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL3Rlcm1zLmpzIiwiZGlyZWN0aXZlcy9jb21wYW55SW5mb3JtYXRpb24vdXNlclF1aWNrTWVudS5qcyIsImRpcmVjdGl2ZXMvbWFpbi9jb250ZW50LmpzIiwiZGlyZWN0aXZlcy9tYWluL2Zvb3Rlci5qcyIsImRpcmVjdGl2ZXMvbWFpbi9oZWFkZXIuanMiLCJkaXJlY3RpdmVzL2F0dHJpYnV0ZS9maWxlTW9kZWwuanMiLCJkaXJlY3RpdmVzL2F0dHJpYnV0ZS9tYXRjaFBhc3N3b3JkLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkaHR0cFByb3ZpZGVyIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsImFwcCIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJoYXNoUHJlZml4IiwiaHRtbDVNb2RlIiwic3RhdGUiLCJ1cmwiLCJ2aWV3cyIsImJvZHlDb250ZW50QCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJvZHlDb250ZW50QGFwcCIsInN1Yk1lbnVAYXBwIiwibWVudUBhcHAubWFuYWdlbWVudCIsImNvbnRlbnRzQGFwcC5tYW5hZ2VtZW50IiwiYXV0aGVudGljYXRlZCIsInJ1biIsIiRyb290U2NvcGUiLCJVc2VyIiwiJHN0YXRlIiwiJG9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwib3B0aW9ucyIsImVycm9yIiwiZ28iLCJmYWN0b3J5IiwiJGh0dHAiLCJhZG1pbkZhY3RvcnkiLCJkZWxldGVJdGVtIiwiaXRlbV9pZCIsImRlbGV0ZSIsInJlYWRBcmlzdENyb3AiLCJibG9iIiwicG9zdCIsImNyZWF0ZUFyaXN0UGhvdG8iLCJwaG90b0RhdGEiLCJjcmVhdGVJdGVtIiwiaXRlbURhdGEiLCJyZWFkSXRlbXMiLCJnZXQiLCJyZWFkSXRlbSIsInVwZGF0ZUl0ZW1UeXBlIiwidXBkYXRlRGF0YSIsInB1dCIsInJlYWRVcGRhdGVJdGVtVHlwZSIsInJlYWRJdGVtVHlwZSIsImRlbGV0ZVR5cGUiLCJpdGVtX3R5cGVfaWQiLCJyZWFkVXBkYXRlVHlwZSIsIml0ZW1fdHlwZSIsInVwZGF0ZVVwZGF0ZVR5cGUiLCJjcmVhdGVUeXBlIiwidHlwZURhdGEiLCJyZWFkVHlwZSIsIkF1dGhUb2tlbiIsImF1dGhGYWN0b3J5IiwiZ2V0VXNlciIsImdldFRva2VuIiwiJHEiLCJyZWplY3QiLCJtZXNzYWdlIiwibG9naW4iLCJsb2dpbkRhdGEiLCJ0aGVuIiwiZGF0YSIsInNldFRva2VuIiwidG9rZW4iLCJpc0xvZ2dlZEluIiwibG9nb3V0IiwiJHdpbmRvdyIsImF1dGhUb2tlbkZhY3RvcnkiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImdldEl0ZW0iLCJhdXRoSW50ZXJjZXB0b3JzRmFjdG9yeSIsInJlcXVlc3QiLCJoZWFkZXJzIiwibWVudUZhY3RvcnkiLCJkZWxldGVNZW51IiwiY2F0ZWdvcnlfaWQiLCJ1cGRhdGVNZW51IiwiY3JlYXRlTWVudSIsIm1lbnVEYXRhIiwicmVhZE1haW5NZW51IiwicmVhZFN1Yk1lbnUiLCJtYWluTWVudVR5cGUiLCJvcmRlckZhY3RvcnkiLCJ1cGRhdGVEZWxpdmVyeSIsImRlbGlEYXRhIiwidXNlcl9pZCIsImNyZWF0ZURlbGl2ZXJ5IiwiZGVsZXRlQmFza2V0IiwiYmFza2V0X2lkIiwicmVhZEJhc2tldCIsImNyZWF0ZUJhc2tldCIsImJhc2tldERhdGEiLCJkZWxldGVPcmRlciIsInJlYWRPcmRlciIsInJlYWRPcmRlckFuZERlbGkiLCJjcmVhdGVPcmRlciIsIm9yZGVyRGF0YSIsInVzZXJGYWN0b3J5IiwiZ2V0UGVybWlzc2lvbiIsImNyZWF0ZSIsInJlZ0RhdGEiLCJhY3RpdmVBY2NvdW50IiwiY2hlY2tDcmVkZW50aWFscyIsInJlc2VuZExpbmsiLCJ1c2VybmFtZSIsInNlbmRVc2VybmFtZSIsInVzZXJEYXRhIiwic2VuZFBhc3N3b3JkIiwicmVzZXREYXRhIiwicmVzZXRQYXNzd29yZCIsInNhdmVQYXNzd29yZCIsInJlbmV3U2Vzc2lvbiIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwiY3RybHMiLCJhcHBDdHJsIiwicmVzdWx0Iiwic3VjY2VzcyIsImJhbm5lckRhdGEiLCJjb25zb2xlIiwibG9nIiwiJHNjb3BlIiwiYXNzaWduTmV3SW5kZXhlc1RvU2xpZGVzIiwiaW5kZXhlcyIsImkiLCJsIiwic2xpZGVzIiwibGVuZ3RoIiwiaWQiLCJwb3AiLCJnZW5lcmF0ZUluZGV4ZXNBcnJheSIsImN1cnJJbmRleCIsInNodWZmbGUiLCJhcnJheSIsInRtcCIsImN1cnJlbnQiLCJ0b3AiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJteUludGVydmFsIiwibm9XcmFwU2xpZGVzIiwiYWN0aXZlIiwiYWRkU2xpZGUiLCJpbWFnZSIsInJhbmRvbWl6ZSIsIk1lbnUiLCJtZW51SXRlbUN0cmwiLCJtYWluTWVudWVzIiwiZXJyb3JNc2ciLCIkdGltZW91dCIsInRoaXMiLCJmaWxlIiwicmVhZEltYWdlIiwiZmlsZXMiLCIkZW1pdCIsIm5hbWUiLCJtYXRjaCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzRGF0YVVSTCIsIm9ubG9hZCIsImUiLCJleHBsYWluVGh1bWJuYWlsIiwiZGF0YVVybCIsInRhcmdldCIsInVwbG9hZEJhbm5lciIsImV4cGxhaW5QaG90byIsImRpc2FibGVkIiwiZmQiLCJGb3JtRGF0YSIsImFwcGVuZCIsInVwbG9hZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJpZGVudGl0eSIsIkNvbnRlbnQtVHlwZSIsInVuZGVmaW5lZCIsImFsZXJ0IiwicmVsb2FkIiwidXBsb2FkSW1hZ2UiLCJpdGVtVGl0bGUiLCJ0aXRsZSIsInBhdGNoIiwiaW1hZ2VQYXRoIiwiaW1hZ2VfcGF0aCIsInVwbG9hZEdhbGxlcnkiLCJnYWxsZXJ5RGF0YSIsImZpbHRlciIsImlucHV0IiwicHJvcGVydHkiLCJBcnJheSIsInRvdGFsIiwiJHN0YXRlUGFyYW1zIiwidHlwZV9jb2RlIiwicGFyYW1zIiwiaXRlbXNEYXRhIiwiQWRtaW4iLCJPcmRlciIsIm9wdGlvbkl0ZW0iLCJhdmFpbGFibGVPcHRpb25zIiwic2VsZWN0ZWRPcHRpb24iLCJhbW91bnQiLCJvcHRpb25MaXN0IiwiYWRkSXRlbSIsImtpbmQiLCJwcmljZSIsImtpbmRfb2YiLCJzdWNjZXNzTXNnIiwic3BsaXQiLCJ0ZW1wIiwiTnVtYmVyIiwiZGVjb2RlQmFzZTY0SW1hZ2UiLCJkYXRhU3RyaW5nIiwibWF0Y2hlcyIsIkVycm9yIiwidHlwZSIsImRhdGEyIiwicmVhZE1lbnUiLCJyZWFkTWVudVN0YXR1cyIsInR5cGVfZGVzY3JpcHRpb24iLCJ1cGRhdGVJdGVtIiwiaXRlbV9uYW1lIiwidXBkYXRlRGF0YTIiLCJtYWluUGhvdG9DaGFuZ2VkIiwibWFpblRodW1ibmFpbCIsInJlYWRQaG90byIsIm1haW5QaG90byIsIml0ZW1fcGF0aCIsImV4cGxhaW5QaG90b0NoYW5nZWQiLCJyZWFkUGhvdG9FeHBsYWluIiwiZXhwbGFpbiIsIm15SW1hZ2UiLCJteUNyb3BwZWRJbWFnZSIsImhhbmRsZUZpbGVTZWxlY3QiLCJldnQiLCJjdXJyZW50VGFyZ2V0IiwicmVhZGVyIiwiJGFwcGx5IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwib24iLCJyZWFkQ3JvcEltYWdlIiwidGh1bWJuYWlsIiwiYmFzZTY0VXJsIiwiZmlsZVBhdGgiLCJraW5kTGlzdCIsInR5cGVfdGlueSIsInR5cGVfcHJpY2UiLCJhZGRMaW5lIiwia2luZERhdGEiLCJraW5kVmFsdWUiLCJraW5kUHJpY2UiLCJtYWluSW1hZ2VQYXRoIiwiZXhwbGFpbkltYWdlUGF0aCIsInRodW1ibmFpbFBhdGgiLCJjcmVhdGVQaG90byIsInVwbG9hZERhdGEiLCJ0b1N0cmluZyIsInVwZGF0ZSIsImRlbGV0ZURhdGEiLCJzdWJNZW51RGF0YXMiLCJ1cGRhdGFEYXRhIiwic3BsaXRPcHRpb25EYXRhcyIsIm9wdGlvbkRhdGFzIiwidXBkYXRlVHlwZSIsInVwZGF0ZWl0ZW1UeXBlIiwia2luZEFycmF5IiwicHJpY2VBcnJheSIsImNvcHlJdGVtVHlwZSIsInR5cGVEYXRhcyIsImtpbmREYXRhcyIsImNvcHlUeXBlIiwiY2F0ZWdvcnkiLCJBdXRoIiwiJGxvY2F0aW9uIiwiJGludGVydmFsIiwibG9hZG1lIiwibG9hZGluZyIsImNoZWNrU2Vzc2lvbiIsInVzZXIiLCJwZXJtaXNzaW9uIiwiYXV0aG9yaXplZCIsImludGVydmFsIiwiY2FuY2VsIiwic2VsZiIsInBhcnNlSnd0IiwiYmFzZTY0IiwicmVwbGFjZSIsIkpTT04iLCJwYXJzZSIsImF0b2IiLCJleHBpcmVUaW1lIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImV4cCIsInNob3dNb2RhbCIsImNob2ljZU1hZGUiLCJoaWRlTW9kYWwiLCJNb2RhbEJvZHkiLCJlbmRTZXNzaW9uIiwib3B0aW9uIiwibW9kYWxIZWFkZXIiLCJtb2RhbEJvZHkiLCJoaWRlQnV0dG9uIiwiJCIsIm1vZGFsIiwiYmFja2Ryb3AiLCJkb0xvZ2luIiwidmFsaWQiLCJleHBpcmVkIiwicmVzZW5kIiwicmVzZXR1c2VybmFtZSIsInJlc2V0cGFzc3dvcmQiLCJtYWluIiwiZ2V0SXRlbUZhaWwiLCJjYXNoUmVjZWlwdCIsImdldENhc2hSZWNlaXB0IiwicmVhZEFkZHJlc3MiLCJkYXVtIiwicG9zdGNvZGUiLCJsb2FkIiwiYWRkcmVzc0RldGFpbCIsIlBvc3Rjb2RlIiwib25jb21wbGV0ZSIsInNpZ3VuZ3VfY29kZSIsInNpZ3VuZ3VDb2RlIiwiamlidW5fYWRkcmVzcyIsImppYnVuQWRkcmVzcyIsInJvYWRfYWRkcmVzcyIsInJvYWRBZGRyZXNzIiwib3BlbiIsImRlbGl2ZXJ5IiwiaXRlbVByaWNlIiwiYWxsSXRlbVByaWNlIiwiY29uZmlybU9yZGVyIiwiZGFsaURhdGEiLCJyZWNlaXB0RGF0YSIsIm1ha2VCYXNrZXQiLCJqIiwiZW1haWwiLCJoaWRlIiwiY29uZmlybWVkIiwicmVnU3RlcDEiLCJyZWdTdGVwMiIsInJlZ1N0ZXAzIiwiJHBhcnNlIiwicGFyc2VkRmlsZSIsImZpbGVNb2RlbCIsInBhcnNlZGZpbGVTZXR0ZXIiLCJhc3NpZ24iLCJiaW5kIiwiZG9Db25maXJtIiwidmFsdWVzIiwiZm9yRWFjaCIsImVsZSIsImNvbmZpcm0iLCIkb2JzZXJ2ZSIsIiR3YXRjaCJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQUNBLGVBQ0Esa0JBQ0Esa0JBQ0Esa0JBQ0EsbUJBQ0Esd0JBQ0Esa0JBQ0Esa0JBQ0EsbUJBQ0EsWUFDQSxtQkFDQSxzQkFDQUMsUUFBQSxnQkFBQSxTQUFBQyxHQUNBQSxFQUFBQyxhQUFBQyxLQUFBLHNCQ2ZBLElBQUFDLEtBQUFOLFFBQUFDLE9BQUEsTUFDQUssS0FBQUosUUFBQSxpQkFBQSxxQkFBQSxvQkFBQSxTQUFBSyxFQUFBQyxFQUFBQyxHQUNBRCxFQUFBRSxVQUFBLEtBQ0FELEVBQUFFLFdBQUEsSUFDQUYsRUFBQUcsV0FBQSxHQUVBTCxFQUFBTSxNQUFBLE9BQ0FDLElBQUEsSUFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEsc0JBSUFKLE1BQUEscUJBRUFDLElBQUEsaUJBQ0FDLE9BQ0FDLGdCQUNBQyxZQUFBLHFDQUNBQyxXQUFBLFVBQ0FDLGFBQUEsZUFLQU4sTUFBQSxxQkFFQUMsSUFBQSxpQkFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEscUNBQ0FDLFdBQUEsVUFDQUMsYUFBQSxlQUtBTixNQUFBLHFCQUVBQyxJQUFBLGlCQUNBQyxPQUNBSyxtQkFDQUgsWUFBQSxxQ0FDQUMsV0FBQSxVQUNBQyxhQUFBLGVBS0FOLE1BQUEsYUFDQUMsSUFBQSxRQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSw4QkFLQUosTUFBQSxhQUNBQyxJQUFBLFFBQ0FDLE9BQ0FDLGdCQUNBQyxZQUFBLGtDQUtBSixNQUFBLGVBQ0FDLElBQUEsVUFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEsb0NBS0FKLE1BQUEsWUFDQUMsSUFBQSxPQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSwrQkFJQUosTUFBQSxzQkFDQUMsSUFBQSxrQkFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEseUNBSUFKLE1BQUEsY0FDQUMsSUFBQSxTQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSw2QkFDQUMsV0FBQSxhQUNBQyxhQUFBLGFBS0FOLE1BQUEsZ0JBQ0FDLElBQUEsd0JBQ0FDLE9BQ0FNLGVBQ0FKLFlBQUEsdUJBQ0FDLFdBQUEsY0FDQUMsYUFBQSxXQUVBSCxnQkFDQUMsWUFBQSw4QkFDQUMsV0FBQSxtQkFDQUMsYUFBQSxtQkFJQU4sTUFBQSwwQkFDQUMsSUFBQSx3QkFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEsOEJBQ0FDLFdBQUEsbUJBQ0FDLGFBQUEsbUJBSUFOLE1BQUEsK0JBQ0FDLElBQUEsZ0JBQ0FDLE9BQ0FDLGdCQUNBQyxZQUFBLDhCQUNBQyxXQUFBLGtCQUNBQyxhQUFBLGtCQUtBTixNQUFBLHFCQUNBQyxJQUFBLGdCQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSw4QkFDQUMsV0FBQSxrQkFDQUMsYUFBQSxrQkFLQU4sTUFBQSxpQkFDQUMsSUFBQSxZQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSx3QkFDQUMsV0FBQSxnQkFDQUMsYUFBQSxnQkFLQU4sTUFBQSxvQkFDQUMsSUFBQSxlQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSwyQkFDQUMsV0FBQSxnQkFDQUMsYUFBQSxvQkFPQU4sTUFBQSxrQkFFQUMsSUFBQSxhQUNBQyxPQUNBSyxtQkFDQUgsWUFBQSx5QkFFQUssdUJBQ0FMLFlBQUEsNEJBS0FKLE1BQUEsMkJBRUFDLElBQUEsV0FDQUMsT0FDQVEsMkJBQ0FOLFlBQUEsb0NBQ0FDLFdBQUEsZUFDQUMsYUFBQSxlQUtBTixNQUFBLCtCQUVBQyxJQUFBLGdCQUNBQyxPQUNBUSwyQkFDQU4sWUFBQSw0Q0FNQUosTUFBQSxzQ0FFQUMsSUFBQSx3QkFDQUMsT0FDQVEsMkJBQ0FOLFlBQUEsdUNBQ0FDLFdBQUEsaUJBQ0FDLGFBQUEsaUJBS0FOLE1BQUEsOENBRUFDLElBQUEsc0JBQ0FDLE9BQ0FRLDJCQUNBTixZQUFBLDJDQUNBQyxXQUFBLHFCQUNBQyxhQUFBLHFCQUtBTixNQUFBLDBDQUVBQyxJQUFBLHVCQUNBQyxPQUNBUSwyQkFDQU4sWUFBQSx1Q0FDQUMsV0FBQSxpQkFDQUMsYUFBQSxpQkFLQU4sTUFBQSx3Q0FFQUMsSUFBQSxXQUNBQyxPQUNBUSwyQkFDQU4sWUFBQSxxQ0FDQUMsV0FBQSxlQUNBQyxhQUFBLGVBSUFOLE1BQUEseUJBRUFDLElBQUEsVUFDQUMsT0FDQVEsMkJBQ0FOLFlBQUEsa0NBQ0FDLFdBQUEsbUJBQ0FDLGFBQUEsbUJBSUFOLE1BQUEsMEJBRUFDLElBQUEsV0FDQUMsT0FDQVEsMkJBQ0FOLFlBQUEsbUNBQ0FDLFdBQUEsb0JBQ0FDLGFBQUEsb0JBSUFOLE1BQUEsOEJBRUFDLElBQUEsZUFDQUMsT0FDQVEsMkJBQ0FOLFlBQUEsMkNBSUFKLE1BQUEsMEJBRUFDLElBQUEsV0FDQUMsT0FDQVEsMkJBQ0FOLFlBQUEsdUNBT0FKLE1BQUEsaUJBRUFDLElBQUEsaUJBQ0FHLFlBQUEsNkJBQ0FDLFdBQUEsZUFDQUMsYUFBQSxhQUdBTixNQUFBLGlCQUVBQyxJQUFBLGlCQUNBRyxZQUFBLDZCQUNBQyxXQUFBLGVBQ0FDLGFBQUEsYUFHQU4sTUFBQSxTQUVBQyxJQUFBLGdCQUNBRyxZQUFBLGdDQUNBQyxXQUFBLFlBQ0FDLGFBQUEsVUFJQU4sTUFBQSxZQUVBQyxJQUFBLG1CQUNBRyxZQUFBLGtDQUNBQyxXQUFBLFlBQ0FDLGFBQUEsVUFHQU4sTUFBQSxVQUVBQyxJQUFBLFVBQ0FHLFlBQUEsZ0NBQ0FDLFdBQUEsYUFDQUMsYUFBQSxXQUlBTixNQUFBLGFBRUFDLElBQUEsUUFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEsMkRBQ0FPLGVBQUEsTUFLQVgsTUFBQSxhQUVBQyxJQUFBLFFBQ0FDLE9BQ0FDLGdCQUNBQyxZQUFBLGdEQUNBTyxlQUFBLE1BS0FYLE1BQUEsZUFFQUMsSUFBQSxVQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSxrREFDQU8sZUFBQSxTQU9BbEIsSUFBQW1CLEtBQUEsYUFBQSxPQUFBLFNBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUcsSUFBQSxvQkFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxNQUVBVCxFQUFBRyxJQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFFLEdBQ0FSLEVBQUFTLEdBQUEsWUM5WEFyQyxRQUFBQyxPQUFBLG9CQUNBcUMsUUFBQSxTQUFBLFFBQUEsU0FBQUMsR0ErREEsTUE5REFDLGlCQUVBQSxhQUFBQyxXQUFBLFNBQUFDLEdBQ0EsTUFBQUgsR0FBQUksT0FBQSxhQUFBRCxJQUdBRixhQUFBSSxjQUFBLFNBQUFDLEdBQ0EsTUFBQU4sR0FBQU8sS0FBQSx1QkFBQUQsSUFHQUwsYUFBQU8saUJBQUEsU0FBQUMsR0FDQSxNQUFBVCxHQUFBTyxLQUFBLHNCQUFBRSxJQUdBUixhQUFBUyxXQUFBLFNBQUFDLEdBQ0EsTUFBQVgsR0FBQU8sS0FBQSxZQUFBSSxJQUdBVixhQUFBVyxVQUFBLFdBQ0EsTUFBQVosR0FBQWEsSUFBQSxjQUdBWixhQUFBYSxTQUFBLFNBQUFYLEdBQ0EsTUFBQUgsR0FBQWEsSUFBQSxhQUFBVixJQU9BRixhQUFBYyxlQUFBLFNBQUFDLEdBQ0EsTUFBQWhCLEdBQUFpQixJQUFBLGdCQUFBRCxJQUdBZixhQUFBaUIsbUJBQUEsU0FBQWYsR0FDQSxNQUFBSCxHQUFBYSxJQUFBLGlCQUFBVixJQUdBRixhQUFBa0IsYUFBQSxXQUNBLE1BQUFuQixHQUFBYSxJQUFBLGtCQUdBWixhQUFBbUIsV0FBQSxTQUFBQyxHQUNBLE1BQUFyQixHQUFBSSxPQUFBLGFBQUFpQixJQUdBcEIsYUFBQXFCLGVBQUEsU0FBQUMsR0FDQSxNQUFBdkIsR0FBQWEsSUFBQSxhQUFBVSxJQUdBdEIsYUFBQXVCLGlCQUFBLFNBQUFSLEdBQ0EsTUFBQWhCLEdBQUFpQixJQUFBLFlBQUFELElBR0FmLGFBQUF3QixXQUFBLFNBQUFDLEdBQ0EsTUFBQTFCLEdBQUFPLEtBQUEsWUFBQW1CLElBR0F6QixhQUFBMEIsU0FBQSxXQUNBLE1BQUEzQixHQUFBYSxJQUFBLGNBR0FaLGdCQ2hFQXhDLFFBQUFDLE9BQUEsbUJBRUFxQyxRQUFBLFFBQUEsUUFBQSxZQUFBLFNBQUFDLEVBQUE0QixHQUNBLEdBQUFDLEtBK0JBLE9BN0JBQSxHQUFBQyxRQUFBLFdBQ0EsR0FBQUYsRUFBQUcsV0FDQSxNQUFBL0IsR0FBQU8sS0FBQSxVQUVBeUIsSUFBQUMsUUFBQUMsUUFBQSx1QkFLQUwsRUFBQU0sTUFBQSxTQUFBQyxHQUNBLE1BQUFwQyxHQUFBTyxLQUFBLG9CQUFBNkIsR0FBQUMsS0FBQSxTQUFBQyxHQUVBLE1BREFWLEdBQUFXLFNBQUFELEVBQUFBLEtBQUFFLE9BQ0FGLEtBS0FULEVBQUFZLFdBQUEsV0FDQSxRQUFBYixFQUFBRyxZQVFBRixFQUFBYSxPQUFBLFdBQ0FkLEVBQUFXLFlBRUFWLEtBR0E5QixRQUFBLGFBQUEsVUFBQSxTQUFBNEMsR0FDQSxHQUFBQyxLQWVBLE9BWkFBLEdBQUFMLFNBQUEsU0FBQUMsR0FDQUEsRUFDQUcsRUFBQUUsYUFBQUMsUUFBQSxRQUFBTixHQUVBRyxFQUFBRSxhQUFBRSxXQUFBLFFBQUFQLElBS0FJLEVBQUFiLFNBQUEsV0FDQSxNQUFBWSxHQUFBRSxhQUFBRyxRQUFBLFVBRUFKLEtBR0E3QyxRQUFBLG9CQUFBLFlBQUEsU0FBQTZCLEdBQ0EsR0FBQXFCLEtBU0EsT0FQQUEsR0FBQUMsUUFBQSxTQUFBdkYsR0FDQSxHQUFBNkUsR0FBQVosRUFBQUcsVUFJQSxPQUZBUyxLQUFBN0UsRUFBQXdGLFFBQUEsa0JBQUFYLEdBRUE3RSxHQUVBc0YsS0NsRUF4RixRQUFBQyxPQUFBLG1CQUNBcUMsUUFBQSxRQUFBLFFBQUEsU0FBQUMsR0FxQkEsTUFwQkFvRCxnQkFFQUEsWUFBQUMsV0FBQSxTQUFBQyxHQUNBLE1BQUF0RCxHQUFBSSxPQUFBLGFBQUFrRCxJQUdBRixZQUFBRyxXQUFBLFNBQUF2QyxHQUNBLE1BQUFoQixHQUFBaUIsSUFBQSxhQUFBRCxJQUdBb0MsWUFBQUksV0FBQSxTQUFBQyxHQUNBLE1BQUF6RCxHQUFBTyxLQUFBLFlBQUFrRCxJQUdBTCxZQUFBTSxhQUFBLFdBQ0EsTUFBQTFELEdBQUFhLElBQUEsY0FFQXVDLFlBQUFPLFlBQUEsU0FBQUMsR0FDQSxNQUFBNUQsR0FBQWEsSUFBQSxhQUFBK0MsSUFFQVIsZUN0QkEzRixRQUFBQyxPQUFBLG9CQUNBcUMsUUFBQSxTQUFBLFFBQUEsU0FBQUMsR0F1Q0EsTUF0Q0E2RCxpQkFFQUEsYUFBQUMsZUFBQSxTQUFBQyxHQUNBLE1BQUEvRCxHQUFBaUIsSUFBQSxpQkFBQThDLEVBQUFDLFFBQUFELElBR0FGLGFBQUFJLGVBQUEsU0FBQUYsR0FDQSxNQUFBL0QsR0FBQU8sS0FBQSxnQkFBQXdELElBR0FGLGFBQUFLLGFBQUEsU0FBQUMsR0FDQSxNQUFBbkUsR0FBQUksT0FBQSxlQUFBK0QsSUFHQU4sYUFBQU8sV0FBQSxXQUNBLE1BQUFwRSxHQUFBYSxJQUFBLGdCQUdBZ0QsYUFBQVEsYUFBQSxTQUFBQyxHQUNBLE1BQUF0RSxHQUFBTyxLQUFBLGNBQUErRCxJQUdBVCxhQUFBVSxZQUFBLFNBQUFwRSxHQUNBLE1BQUFILEdBQUFJLE9BQUEsa0JBQUFELElBR0EwRCxhQUFBVyxVQUFBLFNBQUFSLEdBQ0EsTUFBQWhFLEdBQUFhLElBQUEsa0JBQUFtRCxJQUdBSCxhQUFBWSxpQkFBQSxXQUNBLE1BQUF6RSxHQUFBYSxJQUFBLG1CQUdBZ0QsYUFBQWEsWUFBQSxTQUFBQyxHQUNBLE1BQUEzRSxHQUFBTyxLQUFBLGlCQUFBb0UsSUFHQWQsZ0JDeENBcEcsUUFBQUMsT0FBQSxtQkFDQXFDLFFBQUEsUUFBQSxRQUFBLFNBQUFDLEdBcURBLE1BcERBNEUsZ0JBRUFBLFlBQUFDLGNBQUEsV0FDQSxNQUFBN0UsR0FBQWEsSUFBQSxvQkFHQStELFlBQUFFLE9BQUEsU0FBQUMsR0FDQSxNQUFBL0UsR0FBQU8sS0FBQSxhQUFBd0UsSUFJQUgsWUFBQUksY0FBQSxTQUFBeEMsR0FDQSxNQUFBeEMsR0FBQWlCLElBQUEsaUJBQUF1QixJQUlBb0MsWUFBQUssaUJBQUEsU0FBQTdDLEdBQ0EsTUFBQXBDLEdBQUFPLEtBQUEsY0FBQTZCLElBSUF3QyxZQUFBTSxXQUFBLFNBQUFDLEdBQ0EsTUFBQW5GLEdBQUFpQixJQUFBLGNBQUFrRSxJQUlBUCxZQUFBUSxhQUFBLFNBQUFDLEdBQ0EsTUFBQXJGLEdBQUFhLElBQUEsc0JBQUF3RSxJQUlBVCxZQUFBVSxhQUFBLFNBQUFDLEdBQ0EsTUFBQXZGLEdBQUFpQixJQUFBLHFCQUFBc0UsSUFJQVgsWUFBQVksY0FBQSxTQUFBaEQsR0FDQSxNQUFBeEMsR0FBQWEsSUFBQSxzQkFBQTJCLElBS0FvQyxZQUFBYSxhQUFBLFNBQUFWLEdBQ0EsTUFBQS9FLEdBQUFpQixJQUFBLG9CQUFBOEQsSUFJQUgsWUFBQWMsYUFBQSxTQUFBUCxHQUNBLE1BQUFuRixHQUFBYSxJQUFBLG1CQUFBc0UsSUFJQVAsZUN0REFuSCxRQUFBQyxPQUFBLE9BQ0FpSSxVQUFBLGNBQUEsV0FDQSxPQUNBQyxTQUFBLElBRUFqSCxZQUFBLGNBR0FDLGFBQUEsV0FDQUYsWUFBQSxrQ0FDQW1ILEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsU0NWQXhJLFFBQUFDLE9BQUEsT0FDQWlJLFVBQUEsVUFBQSxRQUFBLFNBQUEzRixHQUNBLE9BQ0E0RixTQUFBLElBQ0FqSCxZQUFBLGNBR0FDLGFBQUEsYUFDQUYsWUFBQSw4QkFDQW1ILEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBRCxDQUdBakcsR0FBQWEsSUFBQSxlQUFBd0IsS0FBQSxTQUFBOEQsR0FDQUEsRUFBQTdELEtBQUE4RCxRQUNBRixFQUFBRyxXQUFBRixFQUFBN0QsS0FBQStELFdBRUFDLFFBQUFDLElBQUEsdUJBT0E1SCxXQUFBLGdCQUFBLFNBQUEsU0FBQTZILEdBMEJBLFFBQUFDLEdBQUFDLEdBQ0EsSUFBQSxHQUFBQyxHQUFBLEVBQUFDLEVBQUFDLEVBQUFDLE9BQUFILEVBQUFDLEVBQUFELElBQ0FFLEVBQUFGLEdBQUFJLEdBQUFMLEVBQUFNLE1BSUEsUUFBQUMsS0FFQSxJQUFBLEdBREFQLE1BQ0FDLEVBQUEsRUFBQUEsRUFBQU8sSUFBQVAsRUFDQUQsRUFBQUMsR0FBQUEsQ0FFQSxPQUFBUSxHQUFBVCxHQUlBLFFBQUFTLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsRUFBQUMsRUFBQUgsRUFBQU4sTUFFQSxJQUFBUyxFQUNBLE9BQUFBLEdBQ0FELEVBQUFFLEtBQUFDLE1BQUFELEtBQUFFLFVBQUFILEVBQUEsSUFDQUYsRUFBQUQsRUFBQUUsR0FDQUYsRUFBQUUsR0FBQUYsRUFBQUcsR0FDQUgsRUFBQUcsR0FBQUYsQ0FJQSxPQUFBRCxHQXBEQVosRUFBQW1CLFdBQUEsS0FDQW5CLEVBQUFvQixjQUFBLEVBQ0FwQixFQUFBcUIsT0FBQSxDQUNBLElBQUFoQixHQUFBTCxFQUFBSyxVQUNBSyxFQUFBLENBRUFWLEdBQUFzQixTQUFBLFdBQ0FqQixFQUFBQyxNQUNBRCxHQUFBL0ksTUFDQWlLLE9BQUEsNkJBQUEsNkJBQUEsOEJBQUFsQixFQUFBQyxPQUFBLEdBQ0FDLEdBQUFHLE9BSUFWLEVBQUF3QixVQUFBLFdBRUF2QixFQURBUSxLQUlBLEtBQUEsR0FBQU4sR0FBQSxFQUFBQSxFQUFBLEVBQUFBLElBQ0FILEVBQUFzQixjQzdDQXJLLFFBQUFDLE9BQUEsT0FDQWlJLFVBQUEsWUFBQSxPQUFBLFNBQUFzQyxHQUNBLE9BQ0FyQyxTQUFBLElBQ0FqSCxZQUFBLGNBR0FDLGFBQUEsZUFDQUYsWUFBQSxnQ0FDQW1ILEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBaUMsR0FBQWpDLENBQ0FnQyxHQUFBdkUsZUFBQXJCLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFFBQ0E4QixFQUFBQyxXQUFBN0YsRUFBQUEsS0FBQTZELE9BRUErQixFQUFBRSxTQUFBOUYsRUFBQUEsS0FBQUosZUNmQXpFLFFBQUFDLE9BQUEsdUJBQ0FpQixXQUFBLG9CQUFBLFNBQUEsV0FBQSxRQUFBLFVBQUEsU0FBQSxTQUFBNkgsRUFBQTZCLEVBQUFySSxFQUFBMkMsRUFBQXRELEdBQ0EsR0FBQXRCLEdBQUF1SyxJQUNBQSxNQUFBQyxRQUdBRCxLQUFBRSxVQUFBLFNBQUFDLEdBRUEsR0FEQWpDLEVBQUFrQyxNQUFBLFFBQ0FELEVBQUEzQixPQUFBLEdBQUEyQixFQUFBLEdBQUFFLEtBQUFDLE1BQUEscUJBQUEsQ0FDQSxHQUFBTCxHQUFBRSxFQUFBLEdBQ0FJLEVBQUEsR0FBQUMsV0FDQUQsR0FBQUUsY0FBQVIsR0FDQU0sRUFBQUcsT0FBQSxTQUFBQyxHQUNBWixFQUFBLFdBQ0E3QixFQUFBa0MsTUFBQSxVQUNBM0ssRUFBQW1MLG9CQUNBbkwsRUFBQW1MLGlCQUFBQyxRQUFBRixFQUFBRyxPQUFBakQsY0FJQUssR0FBQWtDLE1BQUEsVUFDQTNLLEVBQUFtTCxxQkFLQVosS0FBQWUsYUFBQSxXQUVBN0MsRUFBQWtDLE1BQUEsUUFDQTNLLEVBQUF1TCxjQUFBLEVBQ0F2TCxFQUFBd0wsVUFBQSxDQUNBLElBQUFDLEdBQUEsR0FBQUMsU0FDQUQsR0FBQUUsT0FBQSxTQUFBM0wsRUFBQXdLLEtBQUFvQixRQUNBM0osRUFBQU8sS0FBQSxlQUFBaUosR0FDQUksaUJBQUFuTSxRQUFBb00sU0FDQTFHLFNBQUEyRyxtQkFBQUMsTUFDQTFILEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FJLEVBQUFrQyxNQUFBLFVBQ0EvRixFQUFBcUgsTUFBQTFILEVBQUFBLEtBQUFKLFNBQ0E3QyxFQUFBNEssU0FDQWxNLEVBQUF1TCxjQUFBLEVBQ0F2TCxFQUFBd0wsVUFBQSxJQUVBL0MsRUFBQWtDLE1BQUEsVUFDQS9GLEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosU0FDQW5FLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBd0ssZUFPQTVKLFdBQUEsaUJBQUEsUUFBQSxTQUFBcUIsR0FDQSxHQUFBakMsR0FBQXVLLElBRUF0SSxHQUFBYSxJQUFBLGVBQUF3QixLQUFBLFNBQUE4RCxHQUNBQSxFQUFBN0QsS0FBQThELFFBQ0FySSxFQUFBc0ksV0FBQUYsRUFBQTdELEtBQUErRCxXQUVBQyxRQUFBQyxJQUFBLHFCQzdEQTlJLFFBQUFDLE9BQUEsd0JBQ0FpQixXQUFBLHFCQUFBLFNBQUEsV0FBQSxRQUFBLFVBQUEsU0FBQSxTQUFBNkgsRUFBQTZCLEVBQUFySSxFQUFBMkMsRUFBQXRELEdBQ0EsR0FBQXRCLEdBQUF1SyxJQUNBQSxNQUFBQyxRQUdBRCxLQUFBRSxVQUFBLFNBQUFDLEdBRUEsR0FEQWpDLEVBQUFrQyxNQUFBLFFBQ0FELEVBQUEzQixPQUFBLEdBQUEyQixFQUFBLEdBQUFFLEtBQUFDLE1BQUEscUJBQUEsQ0FDQSxHQUFBTCxHQUFBRSxFQUFBLEdBQ0FJLEVBQUEsR0FBQUMsV0FDQUQsR0FBQUUsY0FBQVIsR0FDQU0sRUFBQUcsT0FBQSxTQUFBQyxHQUNBWixFQUFBLFdBQ0E3QixFQUFBa0MsTUFBQSxVQUNBM0ssRUFBQW1MLG9CQUNBbkwsRUFBQW1MLGlCQUFBQyxRQUFBRixFQUFBRyxPQUFBakQsY0FJQUssR0FBQWtDLE1BQUEsVUFDQTNLLEVBQUFtTCxxQkFLQVosS0FBQTRCLFlBQUEsU0FBQUMsR0FFQTNELEVBQUFrQyxNQUFBLFFBQ0EzSyxFQUFBdUwsY0FBQSxFQUNBdkwsRUFBQXdMLFVBQUEsQ0FDQSxJQUFBQyxHQUFBLEdBQUFDLFNBQ0FELEdBQUFZLE1BQUFELEVBQ0FYLEVBQUFFLE9BQUEsU0FBQTNMLEVBQUF3SyxLQUFBb0IsUUFDQTNKLEVBQUFxSyxNQUFBLGdCQUFBYixHQUNBSSxpQkFBQW5NLFFBQUFvTSxTQUNBMUcsU0FBQTJHLG1CQUFBQyxNQUNBMUgsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQXJJLEVBQUF1TSxVQUFBaEksRUFBQUEsS0FBQWlJLFdBQ0EvRCxFQUFBa0MsTUFBQSxVQUNBL0YsRUFBQXFILE1BQUExSCxFQUFBQSxLQUFBSixTQUNBbkUsRUFBQXVMLGNBQUEsRUFDQXZMLEVBQUF3TCxVQUFBLElBRUEvQyxFQUFBa0MsTUFBQSxVQUNBL0YsRUFBQXFILE1BQUExSCxFQUFBQSxLQUFBSixTQUNBbkUsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUF3SyxZQUtBRCxLQUFBa0MsY0FBQSxTQUFBSixHQUNBSyxhQUNBTCxNQUFBQSxFQUNBRSxVQUFBdk0sRUFBQXVNLFdBRUF0SyxFQUFBTyxLQUFBLGVBQUFrSyxhQUFBcEksS0FBQSxTQUFBOEQsVUFLQXhILFdBQUEsa0JBQUEsUUFBQSxTQUFBcUIsR0FDQSxHQUFBakMsR0FBQXVLLElBRUF0SSxHQUFBYSxJQUFBLGdCQUFBd0IsS0FBQSxTQUFBOEQsR0FDQUEsRUFBQTdELEtBQUE4RCxTQUNBckksRUFBQTBNLFlBQUF0RSxFQUFBN0QsS0FBQW1JLFlBQ0FuRSxRQUFBQyxJQUFBeEksRUFBQTBNLGNBRUFuRSxRQUFBQyxJQUFBLHFCQ3ZFQTlJLFFBQUFDLE9BQUEsbUJBQUEsa0JBQ0FnTixPQUFBLFdBQUEsV0FDQSxNQUFBLFVBQUFDLEVBQUFDLEdBQ0EsR0FBQWpFLEdBQUFnRSxZQUFBRSxPQUFBRixFQUFBN0QsT0FBQSxDQUdBLFFBQUEsS0FBQThELEdBQUEsSUFBQWpFLEVBQ0EsTUFBQUEsRUFLQSxLQURBLEdBQUFtRSxHQUFBLEVBQ0FuRSxLQUNBbUUsR0FBQUgsRUFBQWhFLEdBQUFpRSxFQUFBLElBQUFELEVBQUFoRSxHQUFBaUUsRUFBQSxHQUNBLE9BQUFFLE1BSUFuTSxXQUFBLG9CQUFBLGVBQUEsUUFBQSxTQUFBb00sRUFBQS9LLEdBQ0EsR0FBQWpDLEdBQUF1SyxLQUVBaEYsRUFBQXlILEVBQUF6SCxXQUNBLElBQUF5SCxFQUFBQyxVQVlBLENBQ0EsR0FBQUEsR0FBQUQsRUFBQUMsU0FDQWhMLEdBQUFhLElBQUEsa0JBQUF5QyxHQUNBMkgsUUFBQUQsVUFBQUEsS0FDQTNJLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFFBQ0EsSUFBQTlELEVBQUFBLEtBQUE2RCxPQUFBVyxPQUNBL0ksRUFBQXFLLFNBQUEsZ0JBRUFySyxFQUFBbU4sVUFBQTVJLEVBQUFBLEtBQUE2RCxPQUdBcEksRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixjQXZCQWxDLEdBQUFhLElBQUEsa0JBQUF5QyxHQUFBakIsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsUUFDQSxJQUFBOUQsRUFBQUEsS0FBQTZELE9BQUFXLE9BQ0EvSSxFQUFBcUssU0FBQSxnQkFFQXJLLEVBQUFtTixVQUFBNUksRUFBQUEsS0FBQTZELE9BR0FwSSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLGFBc0JBdkQsV0FBQSxtQkFBQSxRQUFBLGVBQUEsVUFBQSxTQUFBLFFBQUEsU0FBQXdNLEVBQUFKLEVBQUFwSSxFQUFBdEQsRUFBQStMLEdBQ0EsR0FBQXJOLEdBQUF1SyxLQUNBbkksRUFBQTRLLEVBQUE1SyxPQUNBcEMsR0FBQXNOLFlBQUEsRUFFQXROLEVBQUF1RSxNQUNBZ0osbUJBQ0F2RSxHQUFBLEVBQUE0QixLQUFBLGtCQUVBNEMsZ0JBQUF4RSxHQUFBLEVBQUE0QixLQUFBLGtCQUdBNUssRUFBQXlOLE9BQUEsRUFFQXpOLEVBQUEwTixjQUNBbkQsS0FBQW9ELFFBQUEsU0FBQXBKLEdBQ0EsSUFBQUEsRUFBQXlFLEdBQ0FwRSxFQUFBcUgsTUFBQSxnQkFFQWpNLEVBQUFzTixZQUFBLEVBQ0F0TixFQUFBME4sV0FBQTNOLE1BRUE2TixLQUFBckosRUFBQXFHLEtBQ0FpRCxNQUFBdEosRUFBQXlFLEdBQ0F5RSxPQUFBLE1BT0FsRCxLQUFBakUsYUFBQSxTQUFBL0IsR0FDQSxHQUFBZ0MsSUFDQW5FLFFBQUFtQyxFQUFBbkMsUUFFQWlMLEdBQUEvRyxhQUFBQyxHQUFBakMsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsUUFDQXpELEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosWUFPQW9HLEtBQUE1RCxZQUFBLFNBQUFwQyxHQUVBLEdBQUFxQyxJQUNBeEUsUUFBQW1DLEVBQUFuQyxRQUNBcUwsT0FBQWxKLEVBQUFrSixPQUNBSyxRQUFBdkosRUFBQXVKLFFBQ0FELE1BQUF0SixFQUFBc0osTUFHQVIsR0FBQTFHLFlBQUFDLEdBQUF0QyxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQStOLFdBQUF4SixFQUFBQSxLQUFBSixRQUNBN0MsRUFBQVMsR0FBQSxrQkFFQS9CLEVBQUFxSyxTQUFBOUYsRUFBQUEsUUFNQTZJLEVBQUFySyxTQUFBWCxHQUFBa0MsS0FBQSxTQUFBQyxHQUNBLEdBQUFBLEVBQUFBLEtBQUE4RCxRQUFBLENBQ0EsR0FBQXVGLEdBQUFySixFQUFBQSxLQUFBNkQsT0FBQXdGLEtBQUFJLE1BQUEsS0FDQUMsRUFBQTFKLEVBQUFBLEtBQUE2RCxPQUFBeUYsTUFBQUcsTUFBQSxLQUNBSCxJQUNBLEtBQUFqRixFQUFBLEVBQUFBLEVBQUFxRixFQUFBbEYsT0FBQUgsSUFDQWlGLEVBQUFqRixHQUFBc0YsT0FBQUQsRUFBQXJGLEdBS0EsS0FGQTVJLEVBQUE0QyxTQUFBMkIsRUFBQUEsS0FBQTZELE9BRUFRLEVBQUEsRUFBQUEsRUFBQWlGLEVBQUE5RSxPQUFBSCxJQUNBNUksRUFBQXVFLEtBQUFnSixpQkFBQTNFLEVBQUEsSUFDQWdDLEtBQUFnRCxFQUFBaEYsR0FDQUksR0FBQTZFLEVBQUFqRixRQUlBNUksR0FBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixhQ3ZJQXpFLFFBQUFDLE9BQUEseUJBQUEsZ0JBQUEsZUFBQSxrQkFFQWlCLFdBQUEsaUJBQUEsUUFBQSxTQUFBLFNBQUF3TSxFQUFBOUwsR0FDQSxHQUFBdEIsR0FBQXVLLElBQ0E2QyxHQUFBdkssWUFBQXlCLEtBQUEsU0FBQUMsR0FDQXZFLEVBQUFxSyxVQUFBLEVBQ0E5RixFQUFBQSxLQUFBOEQsUUFDQXJJLEVBQUFtTixVQUFBNUksRUFBQUEsS0FBQTZELE9BRUFwSSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFVBSUFvRyxLQUFBcEksV0FBQSxTQUFBb0MsR0FDQXZFLEVBQUFxSyxVQUFBLENBQ0EsSUFBQWpJLEdBQUFtQyxFQUFBbkMsT0FDQWdMLEdBQUFqTCxXQUFBQyxHQUFBa0MsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQXJJLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFDQTdDLEVBQUE0SyxVQUVBbE0sRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixjQU1BdkQsV0FBQSxnQkFBQSxRQUFBLGVBQUEsU0FBQSxRQUFBLFVBQUEsU0FBQXdNLEVBQUFKLEVBQUF2RSxFQUFBNEUsRUFBQXpJLEdBRUEsR0FBQTVFLEdBQUF1SyxLQUNBbkksRUFBQTRLLEVBQUE1SyxPQUNBcEMsR0FBQXVFLE1BQ0FnSixtQkFDQXZFLEdBQUEsRUFBQTRCLEtBQUEsa0JBRUE0QyxnQkFBQXhFLEdBQUEsRUFBQTRCLEtBQUEsa0JBR0E1SyxFQUFBeU4sT0FBQSxFQUVBTCxFQUFBckssU0FBQVgsR0FBQWtDLEtBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBQSxLQUFBOEQsUUFBQSxDQUNBLEdBQUF1RixHQUFBckosRUFBQUEsS0FBQTZELE9BQUF3RixLQUFBSSxNQUFBLEtBQ0FDLEVBQUExSixFQUFBQSxLQUFBNkQsT0FBQXlGLE1BQUFHLE1BQUEsS0FDQUgsSUFDQSxLQUFBakYsRUFBQSxFQUFBQSxFQUFBcUYsRUFBQWxGLE9BQUFILElBQ0FpRixFQUFBakYsR0FBQXNGLE9BQUFELEVBQUFyRixHQU9BLEtBTEE1SSxFQUFBNEMsU0FBQTJCLEVBQUFBLEtBQUE2RCxPQUNBcEksRUFBQXVFLEtBQUFpSixnQkFDQXhFLEdBQUE2RSxFQUFBLElBR0FqRixFQUFBLEVBQUFBLEVBQUFpRixFQUFBOUUsT0FBQUgsSUFDQTVJLEVBQUF1RSxLQUFBZ0osaUJBQUEzRSxFQUFBLElBQ0FnQyxLQUFBZ0QsRUFBQWhGLEdBQ0FJLEdBQUE2RSxFQUFBakYsUUFJQTVJLEdBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosYUFRQXZELFdBQUEsa0JBQUEsUUFBQSxlQUFBLFNBQUEsUUFBQSxXQUFBLFNBQUEsVUFBQSxPQUFBLFNBQUF3TSxFQUFBSixFQUFBdkUsRUFBQXhHLEVBQUFxSSxFQUFBaEosRUFBQXNELEVBQUFzRixHQXVRQSxRQUFBaUUsR0FBQUMsR0FDQSxHQUFBQyxHQUFBRCxFQUFBdkQsTUFBQSxxQ0FFQSxPQUFBLEtBQUF3RCxFQUFBdEYsT0FDQSxHQUFBdUYsT0FBQSx5QkFHQUMsS0FBQUYsRUFBQSxHQUNBOUosS0FBQThKLEVBQUEsSUE5UUEsR0FBQXJPLEdBQUF1SyxLQUNBbkksRUFBQTRLLEVBQUE1SyxPQUVBcEMsR0FBQXVFLE1BQ0FnSixtQkFDQXZFLEdBQUEsRUFBQTRCLEtBQUEsa0JBRUE0QyxnQkFBQXhFLEdBQUEsRUFBQTRCLEtBQUEsa0JBR0E1SyxFQUFBd08sT0FDQWpCLG1CQUNBdkUsR0FBQSxFQUFBNEIsS0FBQSxrQkFFQTRDLGdCQUFBeEUsR0FBQSxFQUFBNEIsS0FBQSxrQkFHQVYsRUFBQXZFLGVBQUFyQixLQUFBLFNBQUFDLEdBRUEsR0FEQXZFLEVBQUFxSyxVQUFBLEVBQ0E5RixFQUFBQSxLQUFBOEQsUUFBQSxDQUNBLEdBQUFrRyxHQUFBaEssRUFBQUEsS0FBQTZELE1BQ0EsS0FBQVEsRUFBQSxFQUFBQSxFQUFBMkYsRUFBQXhGLE9BQUFILElBQ0E1SSxFQUFBdUUsS0FBQWdKLGlCQUFBM0UsRUFBQSxJQUNBZ0MsS0FBQTJELEVBQUEzRixHQUFBZ0MsS0FDQTVCLEdBQUF1RixFQUFBM0YsR0FBQXJELGlCQUlBdkYsR0FBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixVQUlBb0csS0FBQWtFLFNBQUEsU0FBQWxLLEdBR0EsR0FGQXZFLEVBQUFxSyxVQUFBLEVBQ0FySyxFQUFBME8sZ0JBQUEsRUFDQSxJQUFBbkssRUFBQXlFLEdBQ0FwRSxFQUFBcUgsTUFBQSxxQkFDQSxDQUNBLEdBQUExRyxHQUFBaEIsRUFBQXlFLEVBQ0EvRyxHQUFBYSxJQUFBLGFBQUF5QyxHQUFBakIsS0FBQSxTQUFBQyxHQUNBLEdBQUFBLEVBQUFBLEtBQUE4RCxRQUVBLEdBQUEsSUFBQTlELEVBQUFBLEtBQUE2RCxPQUFBVyxPQUNBL0ksRUFBQXdPLE9BQ0FqQixtQkFDQXZFLEdBQUEsRUFBQTRCLEtBQUEsa0JBRUE0QyxnQkFBQXhFLEdBQUEsRUFBQTRCLEtBQUEsa0JBRUFoRyxFQUFBcUgsTUFBQSxxQkFDQSxDQUNBak0sRUFBQTBPLGdCQUFBLEVBRUExTyxFQUFBd08sT0FDQWpCLG1CQUNBdkUsR0FBQSxFQUFBNEIsS0FBQSxrQkFFQTRDLGdCQUFBeEUsR0FBQSxFQUFBNEIsS0FBQSxpQkFFQSxJQUFBMkQsR0FBQWhLLEVBQUFBLEtBQUE2RCxNQUNBLEtBQUFRLEVBQUEsRUFBQUEsRUFBQTJGLEVBQUF4RixPQUFBSCxJQUNBNUksRUFBQXdPLE1BQUFqQixpQkFBQTNFLEVBQUEsSUFDQWdDLEtBQUEyRCxFQUFBM0YsR0FBQStGLGlCQUNBM0YsR0FBQXVGLEVBQUEzRixHQUFBdEYsa0JBS0F0RCxHQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFlBUUFpSixFQUFBckssU0FBQVgsR0FBQWtDLEtBQUEsU0FBQUMsR0FDQWdFLFFBQUFDLElBQUFqRSxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQXJJLEVBQUE0QyxTQUFBMkIsRUFBQUEsS0FBQTZELE9BQ0FwSSxFQUFBdUUsS0FBQWlKLGdCQUNBeEUsR0FBQWhKLEVBQUE0QyxTQUFBMkMsY0FHQXZGLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosVUFLQW9HLEtBQUFxRSxXQUFBLFNBQUFySyxHQUVBLEdBREF2RSxFQUFBcUssVUFBQSxFQUNBckssRUFBQTBPLGVBQ0EsR0FBQSxJQUFBbkssRUFBQWYsV0FBQSxNQUFBZSxFQUFBZixVQUNBb0IsRUFBQXFILE1BQUEsdUJBQ0EsQ0FDQSxHQUFBaEosSUFDQXNMLEtBQUFoSyxFQUFBZixVQUNBcUwsVUFBQXRLLEVBQUFzSyxVQUVBNU0sR0FBQWlCLElBQUEsYUFBQWQsRUFBQWEsR0FBQXFCLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQ0E3QyxFQUFBNEssVUFFQWxNLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosY0FLQTJLLGNBQ0FQLEtBQUF2TyxFQUFBNEMsU0FBQVUsYUFDQXVMLFVBQUF0SyxFQUFBc0ssV0FFQTVNLEVBQUFpQixJQUFBLGFBQUFkLEVBQUEwTSxhQUFBeEssS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQXJJLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFDQTdDLEVBQUE0SyxVQUVBbE0sRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixXQVVBb0csS0FBQUMsUUFFQUQsS0FBQXdFLGlCQUFBLFNBQUFyRSxHQUVBLEdBREFqQyxFQUFBa0MsTUFBQSxRQUNBRCxFQUFBM0IsT0FBQSxHQUFBMkIsRUFBQSxHQUFBRSxLQUFBQyxNQUFBLHFCQUFBLENBQ0EsR0FBQUwsR0FBQUUsRUFBQSxHQUNBSSxFQUFBLEdBQUFDLFdBQ0FELEdBQUFFLGNBQUFSLEdBQ0FNLEVBQUFHLE9BQUEsU0FBQUMsR0FDQVosRUFBQSxXQUNBN0IsRUFBQWtDLE1BQUEsVUFDQTNLLEVBQUFnUCxpQkFDQWhQLEVBQUFnUCxjQUFBNUQsUUFBQUYsRUFBQUcsT0FBQWpELGNBSUFLLEdBQUFrQyxNQUFBLFVBQ0EzSyxFQUFBZ1Asa0JBS0F6RSxLQUFBMEUsVUFBQSxXQUVBeEcsRUFBQWtDLE1BQUEsUUFDQTNLLEVBQUFrUCxXQUFBLEVBQ0FsUCxFQUFBd0wsVUFBQSxDQUNBLElBQUFDLEdBQUEsR0FBQUMsU0FDQUQsR0FBQUUsT0FBQSxTQUFBM0wsRUFBQXdLLEtBQUFvQixRQUNBM0osRUFBQU8sS0FBQSx5QkFBQWlKLEdBQ0FJLGlCQUFBbk0sUUFBQW9NLFNBQ0ExRyxTQUFBMkcsbUJBQUFDLE1BQ0ExSCxLQUFBLFNBQUFDLEdBQ0EsR0FBQUEsRUFBQUEsS0FBQThELFFBQUEsQ0FDQUksRUFBQWtDLE1BQUEsVUFDQS9GLEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosU0FDQW5FLEVBQUFrUCxXQUFBLEVBQ0FsUCxFQUFBd0wsVUFBQSxDQUNBLElBQUF2SSxJQUNBK0csTUFBQXpGLEVBQUFBLEtBQUE0SyxVQUVBbE4sR0FBQWlCLElBQUEsYUFBQWQsRUFBQWEsR0FBQXFCLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFFBQ0FFLFFBQUFDLElBQUFqRSxFQUFBQSxLQUFBSixXQU1BbkUsRUFBQXdLLFlBRUEvQixHQUFBa0MsTUFBQSxVQUNBL0YsRUFBQXFILE1BQUExSCxFQUFBQSxLQUFBSixTQUNBbkUsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUF3SyxXQU1BRCxLQUFBNkUsb0JBQUEsU0FBQTFFLEdBRUEsR0FEQWpDLEVBQUFrQyxNQUFBLFFBQ0FELEVBQUEzQixPQUFBLEdBQUEyQixFQUFBLEdBQUFFLEtBQUFDLE1BQUEscUJBQUEsQ0FDQSxHQUFBTCxHQUFBRSxFQUFBLEdBQ0FJLEVBQUEsR0FBQUMsV0FDQUQsR0FBQUUsY0FBQVIsR0FDQU0sRUFBQUcsT0FBQSxTQUFBQyxHQUNBWixFQUFBLFdBQ0E3QixFQUFBa0MsTUFBQSxVQUNBM0ssRUFBQW1MLG9CQUNBbkwsRUFBQW1MLGlCQUFBQyxRQUFBRixFQUFBRyxPQUFBakQsY0FJQUssR0FBQWtDLE1BQUEsVUFDQTNLLEVBQUFtTCxxQkFLQVosS0FBQThFLGlCQUFBLFdBRUE1RyxFQUFBa0MsTUFBQSxRQUNBM0ssRUFBQXVMLGNBQUEsRUFDQXZMLEVBQUF3TCxVQUFBLENBQ0EsSUFBQUMsR0FBQSxHQUFBQyxTQUNBRCxHQUFBRSxPQUFBLFNBQUEzTCxFQUFBd0ssS0FBQW9CLFFBQ0EzSixFQUFBTyxLQUFBLDJCQUFBaUosR0FDQUksaUJBQUFuTSxRQUFBb00sU0FDQTFHLFNBQUEyRyxtQkFBQUMsTUFDQTFILEtBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBQSxLQUFBOEQsUUFBQSxDQUNBSSxFQUFBa0MsTUFBQSxVQUNBL0YsRUFBQXFILE1BQUExSCxFQUFBQSxLQUFBSixTQUNBbkUsRUFBQXVMLGNBQUEsRUFDQXZMLEVBQUF3TCxVQUFBLENBQ0EsSUFBQXZJLElBQ0FxTSxRQUFBL0ssRUFBQUEsS0FBQTRLLFVBRUFsTixHQUFBaUIsSUFBQSxhQUFBZCxFQUFBYSxHQUFBcUIsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsUUFDQUUsUUFBQUMsSUFBQWpFLEVBQUFBLEtBQUFKLFdBS0FuRSxFQUFBd0ssWUFFQS9CLEdBQUFrQyxNQUFBLFVBQ0EvRixFQUFBcUgsTUFBQTFILEVBQUFBLEtBQUFKLFNBQ0FuRSxFQUFBd0wsVUFBQSxFQUNBeEwsRUFBQXdLLFdBTUF4SyxFQUFBdVAsUUFBQSxHQUNBdlAsRUFBQXdQLGVBQUEsRUFFQSxJQUFBQyxHQUFBLFNBQUFDLEdBQ0FqSCxFQUFBa0MsTUFBQSxPQUNBLElBQUFILEdBQUFrRixFQUFBQyxjQUFBakYsTUFBQSxHQUNBa0YsRUFBQSxHQUFBN0UsV0FDQTZFLEdBQUEzRSxPQUFBLFNBQUF5RSxHQUNBakgsRUFBQW9ILE9BQUEsU0FBQXBILEdBQ0FBLEVBQUFrQyxNQUFBLFVBQ0EzSyxFQUFBdVAsUUFBQUcsRUFBQXJFLE9BQUFqRCxVQUdBd0gsRUFBQTVFLGNBQUFSLEdBRUE5SyxTQUFBc0ksUUFBQThILFNBQUFDLGNBQUEsZUFBQUMsR0FBQSxTQUFBUCxHQWlCQWxGLEtBQUEwRixjQUFBLFNBQUExTCxHQUlBLEdBSEFrRSxFQUFBa0MsTUFBQSxRQUNBM0ssRUFBQWtRLFdBQUEsRUFDQWxRLEVBQUF3TCxVQUFBLEVBQ0EsS0FBQWpILEVBQUE0TCxXQUFBLE9BQUE1TCxFQUFBNEwsZUFBQW5FLEtBQUF6SCxFQUFBNEwsVUFDQW5RLEVBQUF3TCxVQUFBLE1BQ0EsQ0FDQS9DLEVBQUFrQyxNQUFBLFNBQ0EsSUFBQXBJLEdBQUE0TCxFQUFBMUYsRUFBQStHLGVBQ0FwQyxHQUFBOUssY0FBQUMsR0FBQStCLEtBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBQSxLQUFBOEQsUUFBQSxDQUNBSSxFQUFBa0MsTUFBQSxVQUNBL0YsRUFBQXFILE1BQUExSCxFQUFBQSxLQUFBSixTQUNBbkUsRUFBQWtRLFdBQUEsRUFDQWxRLEVBQUF3TCxVQUFBLENBQ0EsSUFBQXZJLElBQ0FpTixVQUFBM0wsRUFBQUEsS0FBQTZMLFNBRUFuTyxHQUFBaUIsSUFBQSxhQUFBZCxFQUFBYSxHQUFBcUIsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsUUFDQUUsUUFBQUMsSUFBQWpFLEVBQUFBLEtBQUFKLGVBTUFzRSxHQUFBa0MsTUFBQSxVQUNBM0ssRUFBQXdMLFVBQUEsU0FXQTVLLFdBQUEsa0JBQUEsUUFBQSxXQUFBLFNBQUEsUUFBQSxTQUFBLFVBQUEsT0FBQSxTQUFBcUIsRUFBQXFJLEVBQUE3QixFQUFBMkUsRUFBQTlMLEVBQUFzRCxFQUFBc0YsR0EyTkEsUUFBQWlFLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQUQsRUFBQXZELE1BQUEscUNBRUEsT0FBQSxLQUFBd0QsRUFBQXRGLE9BQ0EsR0FBQXVGLE9BQUEseUJBR0FDLEtBQUFGLEVBQUEsR0FDQTlKLEtBQUE4SixFQUFBLElBbE9BLEdBQUFyTyxHQUFBdUssSUFHQXZLLEdBQUFxUSxZQUNBclEsRUFBQXNRLGFBQ0F0USxFQUFBdVEsY0FFQWhHLEtBQUFpRyxRQUFBLFNBQUFDLEdBQ0FBLEVBR0EsT0FBQUEsRUFBQUMsZUFBQTFFLEtBQUF5RSxFQUFBQyxXQUFBLEtBQUFELEVBQUFDLFVBRUE5TCxFQUFBcUgsTUFBQSxnQkFDQSxPQUFBd0UsRUFBQUUsZUFBQTNFLEtBQUF5RSxFQUFBRSxXQUFBLEtBQUFGLEVBQUFFLFVBQ0EvTCxFQUFBcUgsTUFBQSxtQkFFQWpNLEVBQUFxUSxTQUFBdFEsTUFFQTZOLEtBQUE2QyxFQUFBQyxVQUNBN0MsTUFBQTRDLEVBQUFFLFlBR0EzUSxFQUFBc1EsVUFBQXZRLEtBQUEwUSxFQUFBQyxXQUNBMVEsRUFBQXVRLFdBQUF4USxLQUFBMFEsRUFBQUUsWUFmQS9MLEVBQUFxSCxNQUFBLG1CQXFCQWpNLEVBQUF1RSxNQUNBZ0osbUJBQ0F2RSxHQUFBLElBQUE0QixLQUFBLGtCQUVBNEMsZ0JBQUF4RSxHQUFBLElBQUE0QixLQUFBLGtCQUdBNUssRUFBQXdPLE9BQ0FqQixtQkFDQXZFLEdBQUEsSUFBQTRCLEtBQUEsa0JBRUE0QyxnQkFBQXhFLEdBQUEsSUFBQTRCLEtBQUEsa0JBR0FWLEVBQUF2RSxlQUFBckIsS0FBQSxTQUFBQyxHQUNBLEdBQUFBLEVBQUFBLEtBQUE4RCxRQUFBLENBQ0EsR0FBQWtHLEdBQUFoSyxFQUFBQSxLQUFBNkQsTUFDQSxLQUFBUSxFQUFBLEVBQUFBLEVBQUEyRixFQUFBeEYsT0FBQUgsSUFDQTVJLEVBQUF1RSxLQUFBZ0osaUJBQUEzRSxFQUFBLElBQ0FnQyxLQUFBMkQsRUFBQTNGLEdBQUFnQyxLQUNBNUIsR0FBQXVGLEVBQUEzRixHQUFBckQsaUJBSUF2RixHQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFVBSUFvRyxLQUFBa0UsU0FBQSxTQUFBbEssR0FDQSxHQUFBLElBQUFBLEVBQUF5RSxHQUNBcEUsRUFBQXFILE1BQUEscUJBQ0EsQ0FDQSxHQUFBMUcsR0FBQWhCLEVBQUF5RSxFQUNBL0csR0FBQWEsSUFBQSxhQUFBeUMsR0FBQWpCLEtBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBQSxLQUFBOEQsUUFFQSxHQUFBLElBQUE5RCxFQUFBQSxLQUFBNkQsT0FBQVcsT0FDQS9JLEVBQUF3TyxPQUNBakIsbUJBQ0F2RSxHQUFBLElBQUE0QixLQUFBLGtCQUVBNEMsZ0JBQUF4RSxHQUFBLElBQUE0QixLQUFBLGtCQUVBaEcsRUFBQXFILE1BQUEscUJBQ0EsQ0FFQWpNLEVBQUF3TyxPQUNBakIsbUJBQ0F2RSxHQUFBLElBQUE0QixLQUFBLGtCQUVBNEMsZ0JBQUF4RSxHQUFBLElBQUE0QixLQUFBLGlCQUVBLElBQUEyRCxHQUFBaEssRUFBQUEsS0FBQTZELE1BQ0EsS0FBQVEsRUFBQSxFQUFBQSxFQUFBMkYsRUFBQXhGLE9BQUFILElBQ0E1SSxFQUFBd08sTUFBQWpCLGlCQUFBM0UsRUFBQSxJQUNBZ0MsS0FBQTJELEVBQUEzRixHQUFBK0YsaUJBQ0EzRixHQUFBdUYsRUFBQTNGLEdBQUF0RixtQkFjQWlILEtBQUFDLFFBRUFELEtBQUF3RSxpQkFBQSxTQUFBckUsR0FFQSxHQURBakMsRUFBQWtDLE1BQUEsUUFDQUQsRUFBQTNCLE9BQUEsR0FBQTJCLEVBQUEsR0FBQUUsS0FBQUMsTUFBQSxxQkFBQSxDQUNBLEdBQUFMLEdBQUFFLEVBQUEsR0FDQUksRUFBQSxHQUFBQyxXQUNBRCxHQUFBRSxjQUFBUixHQUNBTSxFQUFBRyxPQUFBLFNBQUFDLEdBQ0FaLEVBQUEsV0FDQTdCLEVBQUFrQyxNQUFBLFVBQ0EzSyxFQUFBZ1AsaUJBQ0FoUCxFQUFBZ1AsY0FBQTVELFFBQUFGLEVBQUFHLE9BQUFqRCxjQUlBSyxHQUFBa0MsTUFBQSxVQUNBM0ssRUFBQWdQLGtCQU1BekUsS0FBQTBFLFVBQUEsV0FFQXhHLEVBQUFrQyxNQUFBLFFBQ0EzSyxFQUFBa1AsV0FBQSxFQUNBbFAsRUFBQXdMLFVBQUEsQ0FDQSxJQUFBQyxHQUFBLEdBQUFDLFNBQ0FELEdBQUFFLE9BQUEsU0FBQTNMLEVBQUF3SyxLQUFBb0IsUUFDQTNKLEVBQUFPLEtBQUEseUJBQUFpSixHQUNBSSxpQkFBQW5NLFFBQUFvTSxTQUNBMUcsU0FBQTJHLG1CQUFBQyxNQUNBMUgsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQUksRUFBQWtDLE1BQUEsVUFDQS9GLEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosU0FDQW5FLEVBQUFrUCxXQUFBLEVBQ0FsUCxFQUFBd0wsVUFBQSxFQUNBeEwsRUFBQTRRLGNBQUFyTSxFQUFBQSxLQUFBNEssVUFDQW5QLEVBQUF3SyxVQUVBL0IsRUFBQWtDLE1BQUEsVUFDQS9GLEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosU0FDQW5FLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBd0ssWUFNQUQsS0FBQTZFLG9CQUFBLFNBQUExRSxHQUVBLEdBREFqQyxFQUFBa0MsTUFBQSxRQUNBRCxFQUFBM0IsT0FBQSxHQUFBMkIsRUFBQSxHQUFBRSxLQUFBQyxNQUFBLHFCQUFBLENBQ0EsR0FBQUwsR0FBQUUsRUFBQSxHQUNBSSxFQUFBLEdBQUFDLFdBQ0FELEdBQUFFLGNBQUFSLEdBQ0FNLEVBQUFHLE9BQUEsU0FBQUMsR0FDQVosRUFBQSxXQUNBN0IsRUFBQWtDLE1BQUEsVUFDQTNLLEVBQUFtTCxvQkFDQW5MLEVBQUFtTCxpQkFBQUMsUUFBQUYsRUFBQUcsT0FBQWpELGNBSUFLLEdBQUFrQyxNQUFBLFVBQ0EzSyxFQUFBbUwscUJBTUFaLEtBQUE4RSxpQkFBQSxXQUVBNUcsRUFBQWtDLE1BQUEsUUFDQTNLLEVBQUF1TCxjQUFBLEVBQ0F2TCxFQUFBd0wsVUFBQSxDQUNBLElBQUFDLEdBQUEsR0FBQUMsU0FDQUQsR0FBQUUsT0FBQSxTQUFBM0wsRUFBQXdLLEtBQUFvQixRQUNBM0osRUFBQU8sS0FBQSwyQkFBQWlKLEdBQ0FJLGlCQUFBbk0sUUFBQW9NLFNBQ0ExRyxTQUFBMkcsbUJBQUFDLE1BQ0ExSCxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBSSxFQUFBa0MsTUFBQSxVQUNBL0YsRUFBQXFILE1BQUExSCxFQUFBQSxLQUFBSixTQUNBbkUsRUFBQXVMLGNBQUEsRUFDQXZMLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBNlEsaUJBQUF0TSxFQUFBQSxLQUFBNEssVUFDQW5QLEVBQUF3SyxVQUVBL0IsRUFBQWtDLE1BQUEsVUFDQS9GLEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosU0FDQW5FLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBd0ssWUFPQXhLLEVBQUF1UCxRQUFBLEdBQ0F2UCxFQUFBd1AsZUFBQSxFQUVBLElBQUFDLEdBQUEsU0FBQUMsR0FDQWpILEVBQUFrQyxNQUFBLE9BQ0EsSUFBQUgsR0FBQWtGLEVBQUFDLGNBQUFqRixNQUFBLEdBQ0FrRixFQUFBLEdBQUE3RSxXQUNBNkUsR0FBQTNFLE9BQUEsU0FBQXlFLEdBQ0FqSCxFQUFBb0gsT0FBQSxTQUFBcEgsR0FDQUEsRUFBQWtDLE1BQUEsVUFDQTNLLEVBQUF1UCxRQUFBRyxFQUFBckUsT0FBQWpELFVBR0F3SCxFQUFBNUUsY0FBQVIsR0FFQTlLLFNBQUFzSSxRQUFBOEgsU0FBQUMsY0FBQSxlQUFBQyxHQUFBLFNBQUFQLEdBaUJBbEYsS0FBQTBGLGNBQUEsU0FBQTFMLEdBSUEsR0FIQWtFLEVBQUFrQyxNQUFBLFFBQ0EzSyxFQUFBa1EsV0FBQSxFQUNBbFEsRUFBQXdMLFVBQUEsRUFDQSxLQUFBakgsRUFBQTRMLFdBQUEsT0FBQTVMLEVBQUE0TCxlQUFBbkUsS0FBQXpILEVBQUE0TCxVQUNBblEsRUFBQXdMLFVBQUEsTUFDQSxDQUNBL0MsRUFBQWtDLE1BQUEsU0FDQSxJQUFBcEksR0FBQTRMLEVBQUExRixFQUFBK0csZUFDQXBDLEdBQUE5SyxjQUFBQyxHQUFBK0IsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQUksRUFBQWtDLE1BQUEsVUFDQS9GLEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosU0FDQW5FLEVBQUFrUSxXQUFBLEVBQ0FsUSxFQUFBd0wsVUFBQSxFQUNBeEwsRUFBQThRLGNBQUF2TSxFQUFBQSxLQUFBNkwsV0FFQTNILEVBQUFrQyxNQUFBLFVBQ0EzSyxFQUFBd0wsVUFBQSxPQVNBakIsS0FBQXdHLFlBQUEsU0FBQUMsR0FDQXZJLEVBQUFrQyxNQUFBLFlBQ0FxQixLQUFBZ0YsR0FBQSxPQUFBQSxHQUFBLEtBQUFBLEdBQ0FwTSxFQUFBcUgsTUFBQSxrQkFDQWpNLEVBQUF3TCxVQUFBLEVBQ0EvQyxFQUFBa0MsTUFBQSxXQUVBLE1BQUEzSyxFQUFBd08sTUFBQWhCLGVBQUF4RSxJQUNBUCxFQUFBa0MsTUFBQSxVQUNBM0ssRUFBQXdMLFVBQUEsRUFDQTVHLEVBQUFxSCxNQUFBLHVCQUNBRCxLQUFBZ0YsRUFBQTNFLE9BQUEsT0FBQTJFLEVBQUEzRSxPQUFBLEtBQUEyRSxFQUFBM0UsT0FDQTVELEVBQUFrQyxNQUFBLFVBQ0EzSyxFQUFBd0wsVUFBQSxFQUNBNUcsRUFBQXFILE1BQUEsb0JBaUJBak0sRUFBQWdSLFlBQ0EzRSxNQUFBMkUsRUFBQTNFLE1BQ0FrQyxLQUFBdk8sRUFBQXdPLE1BQUFoQixlQUFBeEUsR0FJQTRFLEtBQUE1TixFQUFBc1EsVUFBQVcsV0FDQXBELE1BQUE3TixFQUFBdVEsV0FBQVUsWUFFQTdELEVBQUF6SyxXQUFBM0MsRUFBQWdSLFlBQUExTSxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBSSxFQUFBa0MsTUFBQSxVQUNBM0ssRUFBQXdMLFVBQUEsRUFDQTVHLEVBQUFxSCxNQUFBMUgsRUFBQUEsS0FBQUosU0FDQTdDLEVBQUE0SyxXQUVBekQsRUFBQWtDLE1BQUEsVUFDQTNLLEVBQUF3TCxVQUFBLEVBQ0E1RyxFQUFBcUgsTUFBQTFILEVBQUFBLEtBQUFKLGlCQ3RyQkF6RSxRQUFBQyxPQUFBLG1CQUFBLGlCQUNBaUIsV0FBQSxnQkFBQSxPQUFBLFNBQUEsU0FBQXNKLEVBQUE1SSxHQUNBLEdBQUF0QixHQUFBdUssSUFFQUEsTUFBQTlFLFdBQUEsU0FBQWxCLEdBRUEsR0FEQXZFLEVBQUFxSyxVQUFBLE1BQ0EyQixLQUFBekgsRUFDQXZFLEVBQUFxSyxTQUFBLHNCQUNBLENBQ0EsR0FBQTNFLElBQ0FrRixLQUFBckcsRUFBQXFHLEtBRUFWLEdBQUF6RSxXQUFBQyxHQUFBcEIsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQXJJLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFDQTdDLEVBQUE0SyxVQUVBbE0sRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixZQU1Bb0csS0FBQTJHLE9BQUEsU0FBQTNNLEdBQ0F2RSxFQUFBcUssVUFBQSxDQUNBLElBQUFwSCxJQUNBc0MsWUFBQWhCLEVBQUFnQixZQUNBcUYsS0FBQXJHLEVBQUFxRyxLQUVBVixHQUFBMUUsV0FBQXZDLEdBQUFxQixLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQStOLFdBQUF4SixFQUFBQSxLQUFBSixRQUNBN0MsRUFBQTRLLFVBRUFsTSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFdBS0FvRyxLQUFBbEksT0FBQSxTQUFBa0MsR0FDQXZFLEVBQUFxSyxVQUFBLENBQ0EsSUFBQThHLEdBQUE1TSxFQUFBZ0IsV0FDQTJFLEdBQUE1RSxXQUFBNkwsR0FBQTdNLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQ0E3QyxFQUFBNEssVUFFQWxNLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosY0FPQXZELFdBQUEsZUFBQSxPQUFBLFNBQUEsZUFBQSxRQUFBLFNBQUFzSixFQUFBNUksRUFBQTBMLEVBQUEvSyxHQUNBLEdBQUFqQyxHQUFBdUssS0FDQWhGLEVBQUF5SCxFQUFBekgsV0FFQXRELEdBQUFhLElBQUEsaUJBQUF5QyxHQUFBakIsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsVUFDQXJJLEVBQUFvUixhQUFBN00sRUFBQUEsS0FBQTZELGFDNURBMUksUUFBQUMsT0FBQSxtQkFBQSxnQkFBQSxlQUFBLGtCQUNBaUIsV0FBQSxzQkFBQSxlQUFBLE9BQUEsUUFBQSxTQUFBLFNBQUFvTSxFQUFBOUMsRUFBQWtELEVBQUE5TCxHQUNBLEdBQUF0QixHQUFBdUssS0FDQW5JLEVBQUE0SyxFQUFBNUssT0FDQXBDLEdBQUF1RSxNQUNBZ0osbUJBQ0F2RSxHQUFBLElBQUE0QixLQUFBLGtCQUVBNEMsZ0JBQUF4RSxHQUFBLElBQUE0QixLQUFBLGtCQUtBd0MsRUFBQWpLLG1CQUFBZixHQUFBa0MsS0FBQSxTQUFBQyxHQUVBLEdBREF2RSxFQUFBcUssVUFBQSxFQUNBOUYsRUFBQUEsS0FBQThELFFBQUEsQ0FDQTZCLEVBQUF2RSxlQUFBckIsS0FBQSxTQUFBQyxHQUNBLEdBQUFBLEVBQUFBLEtBQUE4RCxRQUFBLENBQ0EsR0FBQWtHLEdBQUFoSyxFQUFBQSxLQUFBNkQsTUFDQSxLQUFBUSxFQUFBLEVBQUFBLEVBQUEyRixFQUFBeEYsT0FBQUgsSUFDQTVJLEVBQUF1RSxLQUFBZ0osaUJBQUEzRSxFQUFBLElBQ0FnQyxLQUFBMkQsRUFBQTNGLEdBQUFnQyxLQUNBNUIsR0FBQXVGLEVBQUEzRixHQUFBckQsaUJBSUF2RixHQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFVBSUFuRSxFQUFBcVIsV0FBQTlNLEVBQUFBLEtBQUE2RCxPQUNBcEksRUFBQXVFLEtBQUFpSixnQkFDQXhFLEdBQUFoSixFQUFBcVIsV0FBQTlMLFlBR0EsSUFBQStMLElBQ0ExRCxLQUFBNU4sRUFBQXFSLFdBQUF6RCxLQUFBSSxNQUFBLEtBQ0FILE1BQUE3TixFQUFBcVIsV0FBQXhELE1BQUFHLE1BQUEsS0FLQSxLQUZBaE8sRUFBQXVSLGVBRUEzSSxFQUFBLEVBQUFBLEVBQUEwSSxFQUFBMUQsS0FBQTdFLE9BQUFILElBQ0E1SSxFQUFBdVIsWUFBQTNJLElBQ0FnRixLQUFBMEQsRUFBQTFELEtBQUFoRixHQUNBaUYsTUFBQXlELEVBQUF6RCxNQUFBakYsUUFLQTVJLEdBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosVUFLQW9HLEtBQUFpSCxXQUFBLFNBQUFqTixHQUNBdkUsRUFBQWlELFdBQUFzQixFQUNBdkUsRUFBQWlELFdBQUFzQyxZQUFBdkYsRUFBQXVFLEtBQUFpSixlQUFBeEUsR0FDQW9FLEVBQUEzSixpQkFBQXpELEVBQUFpRCxZQUFBcUIsS0FBQSxTQUFBQyxHQUNBdkUsRUFBQXFLLFVBQUEsRUFDQTlGLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQStOLFdBQUF4SixFQUFBQSxLQUFBSixRQUNBN0MsRUFBQTRLLFVBRUFsTSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFdBS0FvRyxLQUFBa0gsZUFBQSxTQUFBbE4sR0FDQSxHQUFBbU4sTUFDQUMsSUFDQSxLQUFBL0ksRUFBQSxFQUFBQSxFQUFBNUksRUFBQXVSLFlBQUF4SSxPQUFBSCxJQUNBOEksRUFBQTNSLEtBQUFDLEVBQUF1UixZQUFBM0ksR0FBQWdGLE1BQ0ErRCxFQUFBNVIsS0FBQUMsRUFBQXVSLFlBQUEzSSxHQUFBaUYsTUFFQSxJQUFBNUssSUFDQWIsUUFBQW1DLEVBQUFuQyxRQUNBeU0sVUFBQXRLLEVBQUFzSyxVQUNBaEIsTUFBQThELEVBQUFWLFdBQ0FyRCxLQUFBOEQsRUFBQVQsV0FHQTdELEdBQUFwSyxlQUFBQyxHQUFBcUIsS0FBQSxTQUFBQyxHQUNBdkUsRUFBQXFLLFVBQUEsRUFDQTlGLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQStOLFdBQUF4SixFQUFBQSxLQUFBSixRQUNBN0MsRUFBQTRLLFVBRUFsTSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLGNBVUF2RCxXQUFBLG9CQUFBLFFBQUEsU0FBQSxVQUFBLE9BQUEsU0FBQXdNLEVBQUE5TCxFQUFBc0QsRUFBQXNGLEdBQ0EsR0FBQWxLLEdBQUF1SyxJQUNBdkssR0FBQXVFLE1BQ0FnSixtQkFDQXZFLEdBQUEsSUFBQTRCLEtBQUEsa0JBRUE0QyxnQkFBQXhFLEdBQUEsSUFBQTRCLEtBQUEsa0JBSUFMLEtBQUFxSCxhQUFBLFNBQUFyTixHQUVBLEdBQUEzQixJQUNBMkwsS0FBQWhLLEVBQUFqQixhQUNBK0ksTUFBQTlILEVBQUFzSyxVQUNBakIsS0FBQXJKLEVBQUFxSixLQUFBcUQsV0FDQXBELE1BQUF0SixFQUFBc0osTUFBQW9ELFdBTUE3RCxHQUFBekssV0FBQUMsR0FBQTBCLEtBQUEsU0FBQUMsR0FDQXZFLEVBQUFxSyxVQUFBLEVBQ0E5RixFQUFBQSxLQUFBOEQsU0FDQXJJLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFDQTdDLEVBQUE0SyxVQUVBbE0sRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixXQUtBb0csS0FBQWxILFdBQUEsU0FBQWtCLEdBQ0F2RSxFQUFBcUssVUFBQSxDQUNBLElBQUFqSSxHQUFBbUMsRUFBQW5DLE9BQ0FnTCxHQUFBakwsV0FBQUMsR0FBQWtDLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQ0E3QyxFQUFBNEssVUFFQWxNLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosV0FNQWlKLEVBQUFoSyxlQUFBa0IsS0FBQSxTQUFBQyxHQUNBLEdBQUFBLEVBQUFBLEtBQUE4RCxRQUFBLENBQ0E2QixFQUFBdkUsZUFBQXJCLEtBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBQSxLQUFBOEQsUUFBQSxDQUNBLEdBQUFrRyxHQUFBaEssRUFBQUEsS0FBQTZELE1BQ0EsS0FBQVEsRUFBQSxFQUFBQSxFQUFBMkYsRUFBQXhGLE9BQUFILElBQ0E1SSxFQUFBdUUsS0FBQWdKLGlCQUFBM0UsRUFBQSxJQUNBZ0MsS0FBQTJELEVBQUEzRixHQUFBZ0MsS0FDQTVCLEdBQUF1RixFQUFBM0YsR0FBQXJELGlCQUlBdkYsR0FBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixVQUdBbkUsRUFBQTZSLFVBQUF0TixFQUFBQSxLQUFBNkQsTUFHQSxLQUFBLEdBRkEwSixNQUVBbEosRUFBQSxFQUFBQSxFQUFBckUsRUFBQUEsS0FBQTZELE9BQUFXLE9BQUFILElBQ0FrSixFQUFBbEosSUFDQWdGLEtBQUE1TixFQUFBNlIsVUFBQWpKLEdBQUFnRixLQUFBSSxNQUFBLEtBQ0FILE1BQUE3TixFQUFBNlIsVUFBQWpKLEdBQUFpRixNQUFBRyxNQUFBLE1BRUFoTyxFQUFBNlIsVUFBQWpKLEdBQUFnRixLQUFBa0UsRUFBQWxKLEdBQUFnRixLQUNBNU4sRUFBQTZSLFVBQUFqSixHQUFBaUYsTUFBQWlFLEVBQUFsSixHQUFBaUYsVUFJQTdOLEdBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosYUFPQXZELFdBQUEsa0JBQUEsZUFBQSxPQUFBLFFBQUEsU0FBQSxTQUFBb00sRUFBQTlDLEVBQUFrRCxFQUFBOUwsR0FDQSxHQUFBdEIsR0FBQXVLLEtBQ0EvRyxFQUFBd0osRUFBQXhKLFNBQ0F4RCxHQUFBdUUsTUFDQWdKLG1CQUNBdkUsR0FBQSxJQUFBNEIsS0FBQSxrQkFFQTRDLGdCQUFBeEUsR0FBQSxJQUFBNEIsS0FBQSxrQkFHQXdDLEVBQUE3SixlQUFBQyxHQUFBYyxLQUFBLFNBQUFDLEdBQ0F2RSxFQUFBcUssVUFBQSxFQUNBOUYsRUFBQUEsS0FBQThELFNBQ0E2QixFQUFBdkUsZUFBQXJCLEtBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBQSxLQUFBOEQsUUFBQSxDQUNBLEdBQUFrRyxHQUFBaEssRUFBQUEsS0FBQTZELE1BQ0EsS0FBQVEsRUFBQSxFQUFBQSxFQUFBMkYsRUFBQXhGLE9BQUFILElBQ0E1SSxFQUFBdUUsS0FBQWdKLGlCQUFBM0UsRUFBQSxJQUNBZ0MsS0FBQTJELEVBQUEzRixHQUFBZ0MsS0FDQTVCLEdBQUF1RixFQUFBM0YsR0FBQXJELGlCQUlBdkYsR0FBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixVQUdBbkUsRUFBQXFSLFdBQUE5TSxFQUFBQSxLQUFBNkQsT0FDQXBJLEVBQUF1RSxLQUFBaUosZ0JBQ0F4RSxHQUFBaEosRUFBQXFSLFdBQUE5TCxjQUdBdkYsRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixVQUtBb0csS0FBQWlILFdBQUEsU0FBQWpOLEdBQ0F2RSxFQUFBaUQsV0FBQXNCLEVBQ0F2RSxFQUFBaUQsV0FBQXNDLFlBQUF2RixFQUFBdUUsS0FBQWlKLGVBQUF4RSxHQUNBb0UsRUFBQTNKLGlCQUFBekQsRUFBQWlELFlBQUFxQixLQUFBLFNBQUFDLEdBQ0F2RSxFQUFBcUssVUFBQSxFQUNBOUYsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQ0E3QyxFQUFBNEssVUFFQWxNLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosY0FPQXZELFdBQUEsZ0JBQUEsUUFBQSxTQUFBLFVBQUEsT0FBQSxTQUFBd00sRUFBQTlMLEVBQUFzRCxFQUFBc0YsR0FDQSxHQUFBbEssR0FBQXVLLElBQ0F2SyxHQUFBdUUsTUFDQWdKLG1CQUNBdkUsR0FBQSxJQUFBNEIsS0FBQSxrQkFFQTRDLGdCQUFBeEUsR0FBQSxJQUFBNEIsS0FBQSxrQkFHQUwsS0FBQXdILFNBQUEsU0FBQXhOLEdBQ0EsR0FBQVosSUFDQXFPLFNBQUF6TixFQUFBZ0IsWUFDQW9KLGlCQUFBcEssRUFBQW9LLGlCQUNBMUIsVUFBQTFJLEVBQUEwSSxVQUVBRyxHQUFBMUosV0FBQUMsR0FBQVcsS0FBQSxTQUFBQyxHQUNBdkUsRUFBQXFLLFVBQUEsRUFDQTlGLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQStOLFdBQUF4SixFQUFBQSxLQUFBSixRQUNBN0MsRUFBQTRLLFVBRUFsTSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFdBS0FvRyxLQUFBbEgsV0FBQSxTQUFBa0IsR0FDQXZFLEVBQUFxSyxVQUFBLENBQ0EsSUFBQS9HLEdBQUFpQixFQUFBZixTQUNBNEosR0FBQS9KLFdBQUFDLEdBQUFnQixLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQStOLFdBQUF4SixFQUFBQSxLQUFBSixRQUNBN0MsRUFBQTRLLFVBRUFsTSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFdBTUFpSixFQUFBeEosV0FBQVUsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQTZCLEVBQUF2RSxlQUFBckIsS0FBQSxTQUFBQyxHQUNBLEdBQUFBLEVBQUFBLEtBQUE4RCxRQUFBLENBQ0EsR0FBQWtHLEdBQUFoSyxFQUFBQSxLQUFBNkQsTUFDQSxLQUFBUSxFQUFBLEVBQUFBLEVBQUEyRixFQUFBeEYsT0FBQUgsSUFDQTVJLEVBQUF1RSxLQUFBZ0osaUJBQUEzRSxFQUFBLElBQ0FnQyxLQUFBMkQsRUFBQTNGLEdBQUFnQyxLQUNBNUIsR0FBQXVGLEVBQUEzRixHQUFBckQsaUJBSUF2RixHQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFVBR0FuRSxFQUFBNlIsVUFBQXROLEVBQUFBLEtBQUE2RCxRQUdBcEksRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixhQU1BdkQsV0FBQSxrQkFBQSxRQUFBLFNBQUEsT0FBQSxVQUFBLFNBQUF3TSxFQUFBOUwsRUFBQTRJLEVBQUF0RixHQUNBLEdBQUE1RSxHQUFBdUssSUFDQXZLLEdBQUF1RSxNQUNBZ0osbUJBQ0F2RSxHQUFBLElBQUE0QixLQUFBLGtCQUVBNEMsZ0JBQUF4RSxHQUFBLElBQUE0QixLQUFBLGtCQUdBVixFQUFBdkUsZUFBQXJCLEtBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBQSxLQUFBOEQsUUFBQSxDQUNBLEdBQUFrRyxHQUFBaEssRUFBQUEsS0FBQTZELE1BQ0EsS0FBQVEsRUFBQSxFQUFBQSxFQUFBMkYsRUFBQXhGLE9BQUFILElBQ0E1SSxFQUFBdUUsS0FBQWdKLGlCQUFBM0UsRUFBQSxJQUNBZ0MsS0FBQTJELEVBQUEzRixHQUFBZ0MsS0FDQTVCLEdBQUF1RixFQUFBM0YsR0FBQXJELGlCQUlBdkYsR0FBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixVQUtBb0csS0FBQTdHLFdBQUEsU0FBQWEsR0FDQXZFLEVBQUFxSyxVQUFBLEVBQ0FySyxFQUFBMkQsVUFDQXFPLFNBQUFoUyxFQUFBdUUsS0FBQWlKLGVBQUF4RSxHQUNBMkYsaUJBQUFwSyxFQUFBb0ssaUJBQ0ExQixVQUFBMUksRUFBQTBJLFdBR0FHLEVBQUExSixXQUFBMUQsRUFBQTJELFVBQUFXLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBcUksUUFBQTlELEVBQUFBLEtBQUFKLFFBQ0E3QyxFQUFBNEssVUFFQWxNLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosV0FNQW5FLEVBQUFxUSxZQUNBclEsRUFBQXNRLGFBQ0F0USxFQUFBdVEsY0FFQWhHLEtBQUFpRyxRQUFBLFNBQUFDLEdBQ0FBLEVBR0EsT0FBQUEsRUFBQUMsZUFBQTFFLEtBQUF5RSxFQUFBQyxXQUFBLEtBQUFELEVBQUFDLFVBRUE5TCxFQUFBcUgsTUFBQSxnQkFDQSxPQUFBd0UsRUFBQUUsZUFBQTNFLEtBQUF5RSxFQUFBRSxXQUFBLEtBQUFGLEVBQUFFLFVBQ0EvTCxFQUFBcUgsTUFBQSxtQkFFQWpNLEVBQUFxUSxTQUFBdFEsTUFFQTZOLEtBQUE2QyxFQUFBQyxVQUNBN0MsTUFBQTRDLEVBQUFFLFlBR0EzUSxFQUFBc1EsVUFBQXZRLEtBQUEwUSxFQUFBQyxXQUNBMVEsRUFBQXVRLFdBQUF4USxLQUFBMFEsRUFBQUUsWUFmQS9MLEVBQUFxSCxNQUFBLHNCQzFWQXZNLFFBQUFDLE9BQUEsbUJBQUEsZUFBQSxpQkFDQWlCLFdBQUEsWUFBQSxPQUFBLFdBQUEsWUFBQSxTQUFBLGFBQUEsU0FBQSxVQUFBLFlBQUEsT0FBQSxZQUFBLFNBQUFxUixFQUFBM0gsRUFBQTRILEVBQUE1USxFQUFBRixFQUFBcUgsRUFBQTdELEVBQUF1TixFQUFBOVEsRUFBQXdDOzZOQUNBLEdBQUE3RCxHQUFBdUssSUFDQXZLLEdBQUFvUyxRQUFBLEVBQ0EzSixFQUFBbEgsSUFBQSxPQUFBLFdBQ0FrSCxFQUFBNEosU0FBQSxJQUdBNUosRUFBQWxILElBQUEsU0FBQSxXQUNBa0gsRUFBQTRKLFNBQUEsSUFHQWpSLEVBQUFHLElBQUEsb0JBQUEsV0FDQStRLEVBR0FMLEVBQUF2TixjQUNBMUUsRUFBQTBFLFlBQUEsRUFDQTFFLEVBQUFvUyxRQUFBLEVBQ0FILEVBQUFsTyxVQUFBTyxLQUFBLFNBQUFDLEdBQ0F2RSxFQUFBdVMsS0FBQWhPLEVBQUFBLEtBQ0F2RSxFQUFBb1MsUUFBQSxFQUNBL1EsRUFBQXlGLGdCQUFBeEMsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsUUFDQSxVQUFBOUQsRUFBQUEsS0FBQWlPLFlBQ0F4UyxFQUFBeVMsWUFBQSxFQUNBelMsRUFBQW9TLFFBQUEsR0FDQSxXQUFBN04sRUFBQUEsS0FBQWlPLFlBQ0F4UyxFQUFBd1MsWUFBQSxFQUNBeFMsRUFBQW9TLFFBQUEsSUFFQXBTLEVBQUF3UyxZQUFBLEVBQ0F4UyxFQUFBeVMsWUFBQSxFQUNBelMsRUFBQW9TLFFBQUEsSUFHQXBTLEVBQUF3UyxZQUFBLEVBQ0F4UyxFQUFBeVMsWUFBQSxFQUNBelMsRUFBQW9TLFFBQUEsU0FLQXBTLEVBQUF1UyxNQUFBLEVBQ0F2UyxFQUFBMEUsWUFBQSxFQUNBMUUsRUFBQW9TLFFBQUEsR0EvQkFFLEtBb0NBLElBQUFBLEdBQUEsV0FDQSxHQUFBTCxFQUFBdk4sYUFBQSxDQUNBMUUsRUFBQXNTLGNBQUEsQ0FDQSxJQUFBSSxHQUFBUCxFQUFBLFdBQ0EsR0FBQTFOLEdBQUFHLEVBQUFFLGFBQUFHLFFBQUEsUUFDQSxJQUFBLE9BQUFSLEVBQ0EwTixFQUFBUSxPQUFBRCxPQUNBLENBQ0FFLEtBQUFDLFNBQUEsU0FBQXBPLEdBQ0EsR0FBQTBMLEdBQUExTCxFQUFBdUosTUFBQSxLQUFBLEdBQ0E4RSxFQUFBM0MsRUFBQTRDLFFBQUEsSUFBQSxLQUFBQSxRQUFBLElBQUEsSUFDQSxPQUFBQyxNQUFBQyxNQUFBck8sRUFBQXNPLEtBQUFKLElBRUEsSUFBQUssR0FBQVAsS0FBQUMsU0FBQXBPLEdBQ0EyTyxFQUFBM0osS0FBQUMsTUFBQTJKLEtBQUFDLE1BQUEsSUFDQUgsR0FBQUksSUFBQUgsR0FFQSxJQUNBSSxFQUFBLFdBQ0FyQixFQUFBUSxPQUFBRCxNQUlBLE1BSUFKLEtBR0F0UyxFQUFBMkgsYUFBQSxXQUNBM0gsRUFBQXlULFlBQUEsRUFDQXBTLEVBQUFzRyxhQUFBM0gsRUFBQXVTLEtBQUFuTCxVQUFBOUMsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQXhFLEVBQUFXLFNBQUFELEVBQUFBLEtBQUFFLE9BQ0E2TixJQUNBb0IsRUFBQSxhQUVBMVQsRUFBQTJULFVBQUFwUCxFQUFBQSxLQUFBSixRQUNBdVAsRUFBQSxlQUtBMVQsRUFBQTRULFdBQUEsV0FDQTVULEVBQUF5VCxZQUFBLEVBQ0FDLEVBQUEsV0FDQXBKLEVBQUEsV0FDQWtKLEVBQUEsV0FDQSxLQUlBLElBQUFBLEdBQUEsU0FBQUssR0FDQTdULEVBQUF5VCxZQUFBLEVBQ0F6VCxFQUFBOFQsZ0JBQUE5SCxHQUNBaE0sRUFBQStULGNBQUEvSCxHQUNBaE0sRUFBQWdVLFlBQUEsRUFFQSxZQUFBSCxHQUNBN1QsRUFBQThULFlBQUEsa0JBQ0E5VCxFQUFBK1QsVUFBQSxnRkFDQUUsRUFBQSxZQUFBQyxPQUFBQyxTQUFBLFlBQ0EsV0FBQU4sR0FFQTdULEVBQUFnVSxZQUFBLEVBQ0FoVSxFQUFBOFQsWUFBQSxPQUNBRyxFQUFBLFlBQUFDLE9BQUFDLFNBQUEsV0FDQTdKLEVBQUEsV0FDQTJILEVBQUF0TixTQUNBM0UsRUFBQTBFLFlBQUEsRUFDQTFFLEVBQUF5UyxZQUFBLEVBQ0F6UyxFQUFBd1MsWUFBQSxFQUNBeFMsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUErTixZQUFBLEVBRUEyRixFQUFBLFVBQ0FwUyxFQUFBNEssVUFDQSxNQUNBLFVBQUEySCxHQUVBSSxFQUFBLFVBQUFDLE9BQUFDLFNBQUEsV0FFQTdKLEVBQUEsV0FDQXRLLEVBQUF5VCxZQUNBQyxFQUFBLFdBRUEsTUFJQUEsRUFBQSxTQUFBRyxHQUVBLFlBQUFBLEVBQ0FJLEVBQUEsWUFBQUMsTUFBQSxRQUNBLFdBQUFMLEVBQ0FJLEVBQUEsWUFBQUMsTUFBQSxRQUNBLFVBQUFMLEdBQ0FJLEVBQUEsVUFBQUMsTUFBQSxRQU1BM0osTUFBQTZKLFFBQUEsU0FBQS9QLEVBQUFnUSxHQUNBclUsRUFBQXFLLFVBQUEsRUFDQXJLLEVBQUFzVSxTQUFBLEVBQ0F0VSxFQUFBd0wsVUFBQSxFQUVBNkksRUFDQXBDLEVBQUE3TixNQUFBcEUsRUFBQXFFLFdBQUFDLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQ0FtRyxFQUFBLFdBQ0F0SyxFQUFBcUUsVUFBQSxLQUNBckUsRUFBQTBFLFlBQUEsRUFDQTROLElBQ0FoUixFQUFBUyxHQUFBLFFBQ0EsTUFFQXdDLEVBQUFBLEtBQUErUCxTQUNBdFUsRUFBQXNVLFNBQUEsRUFDQXRVLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFVBRUFuRSxFQUFBd0wsVUFBQSxFQUNBeEwsRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixZQUtBbkUsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUFxUyxTQUFBLEVBQ0FyUyxFQUFBcUssU0FBQSxvQkFNQXJLLEVBQUEyRSxPQUFBLFdBQ0E2TyxFQUFBLFdBR0F4VCxFQUFBdVUsT0FBQSxXQUNBYixFQUFBLFNBQ0FwSixFQUFBLFdBQ0FoSixFQUFBUyxHQUFBLFVBQ0EvQixFQUFBc1UsU0FBQSxHQUNBLE1BR0F0VSxFQUFBd1UsY0FBQSxXQUNBZCxFQUFBLFNBQ0FwSixFQUFBLFdBQ0FoSixFQUFBUyxHQUFBLGtCQUNBLE1BR0EvQixFQUFBeVUsY0FBQSxXQUNBZixFQUFBLFNBQ0FwSixFQUFBLFdBQ0FoSixFQUFBUyxHQUFBLGtCQUNBLFNDcE5BckMsUUFBQUMsT0FBQSxvQkFBQSxrQkFDQWlCLFdBQUEsaUJBQUEsZUFBQSxTQUFBLFVBQUEsUUFBQSxTQUFBLFNBQUFvTSxFQUFBMUwsRUFBQXNELEVBQUF5SSxFQUFBNUUsR0FDQSxHQUFBekksR0FBQXVLLEtBQ0F0RSxFQUFBd0MsRUFBQWlNLEtBQUFuQyxLQUFBdE0sT0FFQWpHLEdBQUEyVSxhQUFBLEVBRUEzVSxFQUFBNFUsYUFBQSxFQUNBNVUsRUFBQTRVLFlBQ0E1VSxFQUFBNlUsZ0JBQUEsRUFFQTdVLEVBQUE2VSxnQkFBQSxFQUlBdEssS0FBQXVLLFlBQUEsV0FFQUMsS0FBQUMsU0FBQUMsS0FBQSxXQUNBalYsRUFBQWtWLGNBQUEsR0FDQSxHQUFBSCxNQUFBSSxVQUNBQyxXQUFBLFNBQUE3USxHQUNBdkUsRUFBQWdHLFVBQ0FxUCxhQUFBOVEsRUFBQStRLFlBQ0FDLGNBQUFoUixFQUFBaVIsYUFDQUMsYUFBQWxSLEVBQUFtUixnQkFHQUMsVUFLQXRJLEVBQUEzRyxtQkFBQXBDLEtBQUEsU0FBQUMsR0FFQSxHQURBdkUsRUFBQXFLLFVBQUEsRUFDQTlGLEVBQUFBLEtBQUE4RCxRQUVBLEdBQUEsSUFBQTlELEVBQUFBLEtBQUE2RCxPQUFBVyxPQUNBL0ksRUFBQTRWLFVBQUEsRUFDQXZJLEVBQUE1RyxVQUFBUixHQUFBM0IsS0FBQSxTQUFBQyxHQUNBLEdBQUFzUixLQUdBLEtBRkE3VixFQUFBOFYsYUFBQSxFQUNBOVYsRUFBQTRHLFVBQUFyQyxFQUFBQSxLQUFBNkQsT0FDQVEsRUFBQSxFQUFBQSxFQUFBNUksRUFBQTRHLFVBQUFtQyxPQUFBSCxJQUNBaU4sRUFBQWpOLEdBQUE1SSxFQUFBNEcsVUFBQWdDLEdBQUFpRixNQUFBN04sRUFBQTRHLFVBQUFnQyxHQUFBNkUsTUFFQSxLQUFBN0UsRUFBQSxFQUFBQSxFQUFBaU4sRUFBQTlNLE9BQUFILElBQ0E1SSxFQUFBOFYsYUFBQTlWLEVBQUE4VixhQUFBRCxFQUFBak4sU0FLQSxDQUNBLEdBQUFpTixLQUlBLEtBSEE3VixFQUFBNFYsVUFBQSxFQUNBNVYsRUFBQThWLGFBQUEsRUFDQTlWLEVBQUE0RyxVQUFBckMsRUFBQUEsS0FBQTZELE9BQ0FRLEVBQUEsRUFBQUEsRUFBQTVJLEVBQUE0RyxVQUFBbUMsT0FBQUgsSUFDQWlOLEVBQUFqTixHQUFBNUksRUFBQTRHLFVBQUFnQyxHQUFBaUYsTUFBQTdOLEVBQUE0RyxVQUFBZ0MsR0FBQTZFLE1BRUEsS0FBQTdFLEVBQUEsRUFBQUEsRUFBQWlOLEVBQUE5TSxPQUFBSCxJQUNBNUksRUFBQThWLGFBQUE5VixFQUFBOFYsYUFBQUQsRUFBQWpOLE9BSUE1SSxHQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFVBS0FvRyxLQUFBd0wsYUFBQSxTQUFBeFIsR0FFQSxHQUFBeUIsR0FBQSxFQUVBaEcsR0FBQTRWLGFBRUE1SixLQUFBekgsRUFBQXlSLFNBQ0F6TixRQUFBQyxJQUFBLFlBSUF4QyxFQUFBekIsRUFBQXlSLFNBRUEzSSxFQUFBdEgsZUFBQUMsR0FBQTFCLEtBQUEsU0FBQUMsUUFPQXlCLEVBQUF6QixFQUFBeVIsU0FDQXpSLEVBQUEwUixZQUNBNUksRUFBQW5ILGVBQUFGLEdBQUExQixLQUFBLFNBQUFDLFFBS0FnRyxLQUFBbEksT0FBQSxTQUFBa0MsR0FDQXZFLEVBQUFxSyxVQUFBLENBQ0EsSUFBQWpJLEdBQUFtQyxFQUFBbkMsT0FDQWlMLEdBQUE3RyxZQUFBcEUsR0FBQWtDLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQ0E3QyxFQUFBNEssVUFFQWxNLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosY0FNQXZELFdBQUEsY0FBQSxRQUFBLFVBQUEsU0FBQSxTQUFBeU0sRUFBQXpJLEVBQUF0RCxHQUNBLEdBQUF0QixHQUFBdUssSUFDQXZLLEdBQUF5TixPQUFBLEVBQ0F6TixFQUFBdUUsTUFDQWdKLG1CQUNBdkUsR0FBQSxFQUFBNEIsS0FBQSxrQkFFQTRDLGdCQUFBeEUsR0FBQSxFQUFBNEIsS0FBQSxrQkFHQUwsS0FBQWxJLE9BQUEsU0FBQWtDLEdBQ0F2RSxFQUFBcUssVUFBQSxDQUNBLElBQUFqRSxHQUFBN0IsRUFBQTZCLFNBQ0FpSCxHQUFBbEgsYUFBQUMsR0FBQTlCLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUEsS0FBQThELFNBQ0FySSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQ0E3QyxFQUFBNEssVUFHQWxNLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosV0FLQW9HLEtBQUEyTCxXQUFBLGFBR0E3SSxFQUFBaEgsYUFBQS9CLEtBQUEsU0FBQUMsR0FFQSxHQURBdkUsRUFBQXFLLFVBQUEsRUFDQTlGLEVBQUFBLEtBQUE4RCxRQUFBLENBQ0FySSxFQUFBdUcsV0FBQWhDLEVBQUFBLEtBQUE2RCxNQUNBLElBQUFRLEdBQ0FnRixLQUNBSyxJQUVBLEtBQUFyRixFQUFBLEVBQUFBLEVBQUE1SSxFQUFBdUcsV0FBQXdDLE9BQUFILElBQ0FnRixFQUFBaEYsR0FBQTVJLEVBQUF1RyxXQUFBcUMsR0FBQWdGLEtBQUFJLE1BQUEsS0FDQUMsRUFBQXJGLEdBQUE1SSxFQUFBdUcsV0FBQXFDLEdBQUFpRixNQUFBRyxNQUFBLElBR0EsS0FBQXBGLEVBQUEsRUFBQUEsRUFBQWdGLEVBQUE3RSxPQUFBSCxJQVFBLElBUEE1SSxFQUFBdUUsS0FBQXFFLElBQ0EyRSxtQkFDQXZFLEdBQUEsRUFBQTRCLEtBQUEsa0JBRUE0QyxnQkFBQXhFLEdBQUEsRUFBQTRCLEtBQUEsa0JBR0F1TCxFQUFBLEVBQUFBLEVBQUF2SSxFQUFBaEYsR0FBQUcsT0FBQW9OLElBQ0FuVyxFQUFBdUUsS0FBQXFFLEdBQUEyRSxpQkFBQTRJLEVBQUEsSUFDQXZMLEtBQUFnRCxFQUFBaEYsR0FBQXVOLEdBQ0FuTixHQUFBa0YsT0FBQUQsRUFBQXJGLEdBQUF1TixTQUtBblcsR0FBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixhQ3RLQXpFLFFBQUFDLE9BQUEsb0JBQUEsaUJBQ0FpQixXQUFBLGFBQUEsZUFBQSxPQUFBLFdBQUEsU0FBQSxTQUFBb00sRUFBQTNMLEVBQUFpSixFQUFBaEosR0FDQSxHQUFBdEIsR0FBQXVLLElBQ0FsSixHQUFBNEYsY0FBQStGLEVBQUF2SSxPQUFBSCxLQUFBLFNBQUFDLEdBQ0F2RSxFQUFBK04sWUFBQSxFQUNBL04sRUFBQXFLLFVBQUEsRUFDQTlGLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFBQSxvQkFDQW1HLEVBQUEsV0FDQWhKLEVBQUFTLEdBQUEsUUFDQSxPQUVBL0IsRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixRQUFBLG9CQUNBbUcsRUFBQSxXQUNBaEosRUFBQVMsR0FBQSxRQUNBLFdBS0FuQixXQUFBLGNBQUEsT0FBQSxXQUFBLFNBQUEsU0FBQVMsRUFBQWlKLEVBQUFoSixHQUNBdEIsSUFBQXVLLEtBQ0FBLEtBQUFyRCxpQkFBQSxTQUFBN0MsR0FDQXJFLElBQUErTixZQUFBLEVBQ0EvTixJQUFBcUssVUFBQSxFQUNBckssSUFBQXdMLFVBQUEsRUFFQW5LLEVBQUE2RixpQkFBQXFELEtBQUFsRyxXQUFBQyxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxRQUNBaEgsRUFBQThGLFdBQUFuSCxJQUFBcUUsV0FBQUMsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsVUFDQXJJLElBQUF3TCxVQUFBLEVBQ0F4TCxJQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQUEsb0JBQ0FtRyxFQUFBLFdBQ0FoSixFQUFBUyxHQUFBLFFBQ0EsU0FJQS9CLElBQUF3TCxVQUFBLEVBQ0F4TCxJQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLGVBTUF2RCxXQUFBLGdCQUFBLE9BQUEsV0FBQSxTQUFBLFNBQUFTLEVBQUFpSixFQUFBaEosR0FDQSxHQUFBdEIsR0FBQXVLLElBQ0FBLE1BQUFsRCxhQUFBLFNBQUFDLEVBQUErTSxHQUNBclUsRUFBQXFLLFVBQUEsRUFDQXJLLEVBQUF3TCxVQUFBLEVBQ0E2SSxFQUNBaFQsRUFBQWdHLGFBQUFySCxFQUFBc0gsU0FBQThPLE9BQUE5UixLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQStOLFdBQUF4SixFQUFBQSxLQUFBSixRQUFBLG9CQUNBbUcsRUFBQSxXQUNBaEosRUFBQVMsR0FBQSxRQUNBLE9BRUEvQixFQUFBd0wsVUFBQSxFQUNBeEwsRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixZQUlBbkUsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUFxSyxTQUFBLHlCQUtBekosV0FBQSxnQkFBQSxPQUFBLFdBQUEsU0FBQSxTQUFBUyxFQUFBaUosRUFBQWhKLEdBQ0EsR0FBQXRCLEdBQUF1SyxJQUNBdkssR0FBQXVILGFBQUEsU0FBQUMsRUFBQTZNLEdBQ0FyVSxFQUFBcUssVUFBQSxFQUNBckssRUFBQXdMLFVBQUEsRUFDQTZJLEVBQ0FoVCxFQUFBa0csYUFBQXZILEVBQUF3SCxXQUFBbEQsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQSxLQUFBOEQsU0FDQXJJLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFBQSxvQkFDQW1HLEVBQUEsV0FDQWhKLEVBQUFTLEdBQUEsUUFDQSxPQUVBL0IsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosWUFJQW5FLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBcUssU0FBQSxzQkFLQXpKLFdBQUEsYUFBQSxlQUFBLFNBQUEsT0FBQSxXQUFBLFNBQUEsU0FBQW9NLEVBQUF2RSxFQUFBcEgsRUFBQWlKLEVBQUFoSixHQUNBLEdBQUF0QixHQUFBdUssSUFFQXZLLEdBQUFxVyxNQUFBLEVBR0FoVixFQUFBb0csY0FBQXVGLEVBQUF2SSxPQUFBSCxLQUFBLFNBQUFDLEdBRUFBLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQXFXLE1BQUEsRUFDQTVOLEVBQUF3RCxNQUFBLHNCQUNBak0sRUFBQStOLFdBQUEsb0JBQ0F0RixFQUFBckIsU0FBQTdDLEVBQUFBLEtBQUFnTyxLQUFBLEdBQUFuTCxXQUVBcUIsRUFBQXdELE1BQUEscUJBQ0FqTSxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLFdBS0FuRSxFQUFBMEgsYUFBQSxTQUFBVixFQUFBcU4sRUFBQWlDLEdBQ0F0VyxFQUFBcUssVUFBQSxFQUNBckssRUFBQStOLFlBQUEsRUFDQS9OLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBcVMsU0FBQSxFQUdBZ0MsR0FBQWlDLEdBQ0F0VyxFQUFBZ0gsUUFBQUksU0FBQXFCLEVBQUFyQixTQUdBL0YsRUFBQXFHLGFBQUExSCxFQUFBZ0gsU0FBQTFDLEtBQUEsU0FBQUMsR0FDQXZFLEVBQUFxUyxTQUFBLEVBRUE5TixFQUFBQSxLQUFBOEQsU0FDQUksRUFBQXdELE1BQUEsc0JBQ0FqTSxFQUFBK04sV0FBQXhKLEVBQUFBLEtBQUFKLFFBQUEsb0JBRUFtRyxFQUFBLFdBQ0FoSixFQUFBUyxHQUFBLFFBQ0EsT0FFQTBHLEVBQUF3RCxNQUFBLHFCQUNBak0sRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosYUFJQXNFLEVBQUF3RCxNQUFBLHFCQUNBak0sRUFBQXFTLFNBQUEsRUFDQXJTLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBcUssU0FBQSx1QkNsSkEzSyxRQUFBQyxPQUFBLG1CQUFBLGlCQUNBaUIsV0FBQSxXQUFBLFFBQUEsWUFBQSxXQUFBLE9BQUEsT0FBQSxTQUFBLFNBQUFxQixFQUFBaVEsRUFBQTVILEVBQUFqSixFQUFBNFEsRUFBQTNRLEdBQ0EsR0FBQXRCLEdBQUF1SyxJQUVBQSxNQUFBZ00sU0FBQSxTQUFBdlAsR0FDQWhILEVBQUFxSyxVQUFBLEVBQ0FyRCxFQUdBQSxFQUFBLE9BQUFBLEVBQUEsU0FDQWhILEVBQUErTixXQUFBLHFCQUNBL04sRUFBQXdMLFVBQUEsRUFDQWxLLEVBQUFTLEdBQUEsdUJBRUEvQixFQUFBcUssU0FBQSw4QkFDQXJLLEVBQUF3TCxVQUFBLEdBUkF4TCxFQUFBcUssU0FBQSwrQkFlQUUsS0FBQWlNLFNBQUEsU0FBQXhQLEVBQUFxTixFQUFBaUMsR0FDQXRXLEVBQUFxSyxVQUFBLEVBQ0FySyxFQUFBd0wsVUFBQSxFQUNBbEssRUFBQVMsR0FBQSxzQkFzQ0F3SSxLQUFBa00sU0FBQSxTQUFBelAsRUFBQXFOLEVBQUFpQyxHQUNBdFcsRUFBQXFLLFVBQUEsRUFDQXJLLEVBQUF3TCxVQUFBLEVBQ0E2SSxHQUFBaUMsRUFDQWpWLEVBQUEwRixPQUFBL0csRUFBQWdILFNBQUExQyxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFDQThOLEVBQUE3TixNQUFBcEUsRUFBQWdILFNBQUExQyxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFBLEtBQUE4RCxTQUNBckksRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUErTixXQUFBeEosRUFBQUEsS0FBQUosUUFDQW1HLEVBQUEsV0FDQWhKLEVBQUFTLEdBQUEsUUFDQSxNQUVBd0MsRUFBQUEsS0FBQStQLFNBQ0F0VSxFQUFBc1UsU0FBQSxFQUNBdFUsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUFxSyxTQUFBOUYsRUFBQUEsS0FBQUosVUFFQW5FLEVBQUF3TCxVQUFBLEVBQ0F4TCxFQUFBcUssU0FBQTlGLEVBQUFBLEtBQUFKLGFBS0FuRSxFQUFBd0wsVUFBQSxFQUNBeEwsRUFBQXFLLFNBQUE5RixFQUFBQSxLQUFBSixZQUtBbkUsRUFBQXdMLFVBQUEsRUFDQXhMLEVBQUFxUyxTQUFBLEVBQ0FyUyxFQUFBcUssU0FBQSx1QkNsR0EzSyxRQUFBQyxPQUFBLE9BQ0FpSSxVQUFBLG9CQUFBLFdBQ0EsT0FDQUMsU0FBQSxJQUNBakgsWUFBQSxjQUdBRCxZQUFBLDZDQUNBbUgsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxTQ1JBeEksUUFBQUMsT0FBQSxPQUNBaUksVUFBQSw2QkFBQSxXQUNBLE9BQ0FDLFNBQUEsSUFDQWpILFlBQUEsY0FHQUQsWUFBQSxvRUFDQW1ILEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsU0NSQXhJLFFBQUFDLE9BQUEsT0FDQWlJLFVBQUEsV0FBQSxXQUNBLE9BQ0FDLFNBQUEsSUFDQWpILFlBQUEsY0FHQUQsWUFBQSxvQ0FDQW1ILEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsU0NSQXhJLFFBQUFDLE9BQUEsT0FDQWlJLFVBQUEsU0FBQSxXQUNBLE9BQ0FDLFNBQUEsSUFDQWpILFlBQUEsY0FHQUQsWUFBQSxrQ0FDQW1ILEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsU0NSQXhJLFFBQUFDLE9BQUEsT0FDQWlJLFVBQUEsaUJBQUEsV0FDQSxPQUNBQyxTQUFBLElBQ0FqSCxZQUFBLGNBR0FELFlBQUEsd0RBQ0FtSCxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLFNDUkF4SSxRQUFBQyxPQUFBLE9BQ0FpSSxVQUFBLFdBQUEsV0FDQSxPQUNBQyxTQUFBLElBQ0FqSCxZQUFBLGNBR0FELFlBQUEseUJBQ0FtSCxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLFNDUkF4SSxRQUFBQyxPQUFBLE9BQ0FpSSxVQUFBLFVBQUEsV0FDQSxPQUNBQyxTQUFBLElBQ0FqSCxZQUFBLGNBR0FELFlBQUEsbUNBQ0FtSCxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLFNDUkF4SSxRQUFBQyxPQUFBLE9BQ0FpSSxVQUFBLFVBQUEsV0FDQSxPQUNBQyxTQUFBLElBQ0FqSCxZQUFBLGNBR0FELFlBQUEsbUNBQ0FtSCxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLFNDUkF4SSxRQUFBQyxPQUFBLE9BQ0FpSSxVQUFBLGFBQUEsU0FBQSxTQUFBOE8sR0FDQSxPQUNBN08sU0FBQSxJQUNBQyxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQTBPLEdBQUFELEVBQUF6TyxFQUFBMk8sV0FDQUMsRUFBQUYsRUFBQUcsTUFFQTlPLEdBQUErTyxLQUFBLFNBQUEsV0FDQWhQLEVBQUE4SCxPQUFBLFdBQ0FnSCxFQUFBOU8sRUFBQUMsRUFBQSxHQUFBMEMsTUFBQSxhQ1ZBaEwsUUFBQUMsT0FBQSxPQUNBaUksVUFBQSxRQUFBLFdBQ0EsT0FDQUMsU0FBQSxJQUNBakgsWUFBQSxTQUFBLFNBQUE2SCxHQUNBQSxFQUFBdU8sVUFBQSxTQUFBQyxHQUVBeE8sRUFBQTZOLFdBQUEsRUFDQVcsRUFBQUMsUUFBQSxTQUFBQyxHQUNBMU8sRUFBQTJPLFNBQUFELEVBQ0ExTyxFQUFBNk4sV0FBQSxFQUVBN04sRUFBQTZOLFdBQUEsT0FNQXhPLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQUEsRUFBQW9QLFNBQUEsUUFBQSxXQUNBdFAsRUFBQXNHLFFBQUEyRSxLQUFBQyxNQUFBaEwsRUFBQTRDLE9BQ0E5QyxFQUFBaVAsVUFBQWpQLEVBQUFzRyxXQUdBdEcsRUFBQXVQLE9BQUEsVUFBQSxXQUNBdlAsRUFBQXNHLFFBQUEyRSxLQUFBQyxNQUFBaEwsRUFBQTRDLE9BQ0E5QyxFQUFBaVAsVUFBQWpQLEVBQUFzRyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJyxbXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgJ21lbnVDb250cm9sbGVycycsXHJcbiAgICAndXNlckNvbnRyb2xsZXJzJyxcclxuICAgICdtYWluQ29udHJvbGxlcnMnLFxyXG4gICAgJ2VtYWlsQ29udHJvbGxlcnMnLFxyXG4gICAgJ21hbmFnZW1lbnRDb250cm9sbGVycycsXHJcbiAgICAnaXRlbUNvbnRyb2xsZXJzJyxcclxuICAgICd0eXBlQ29udHJvbGxlcnMnLFxyXG4gICAgJ29yZGVyQ29udHJvbGxlcnMnLFxyXG4gICAgJ3VpQ3JvcHBlcicsXHJcbiAgICAnYmFubmVyQ29udHJvbGxlcicsXHJcbiAgICAnZ2FsbGVyeUNvbnRyb2xsZXInXHJcbl0pLmNvbmZpZyhmdW5jdGlvbigkaHR0cFByb3ZpZGVyKXtcclxuICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdBdXRoSW50ZXJjZXB0b3JzJyk7XHJcbn0pO1xyXG4iLCJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpO1xyXG5hcHAuY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xyXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnJyk7XHJcbiAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2FwcCcsIHtcclxuICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFpbi9ob21lLmh0bWwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLnJlZ2lzdGVyU3RlcDEnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdyZWdpc3Rlci9zdGVwMScsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL3JlZ2lzdGVyL3JlZ2lzdGVyU3RlcDEuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZWdDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVnaXN0ZXInXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5yZWdpc3RlclN0ZXAyJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAncmVnaXN0ZXIvc3RlcDInLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9yZWdpc3Rlci9yZWdpc3RlclN0ZXAyLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVnQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3JlZ2lzdGVyJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAucmVnaXN0ZXJTdGVwMycsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJ3JlZ2lzdGVyL3N0ZXAzJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QGFwcCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdXNlcnMvcmVnaXN0ZXIvcmVnaXN0ZXJTdGVwMy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlZ0N0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdyZWdpc3RlcidcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmxvZ2luJywge1xyXG4gICAgICAgICAgICB1cmw6ICdsb2dpbicsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL2xvZ2luL2xvZ2luLmh0bWwnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5ib2FyZCcsIHtcclxuICAgICAgICAgICAgdXJsOiAnYm9hcmQnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jYXRlZ29yeWVzL2JvYXJkL2Zvcm0uaHRtbCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmdhbGxlcnknLCB7XHJcbiAgICAgICAgICAgIHVybDogJ2dhbGxlcnknLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jYXRlZ29yeWVzL2dhbGxlcnkvaG9tZS5odG1sJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAudXNlcicsIHtcclxuICAgICAgICAgICAgdXJsOiAndXNlcicsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL3BhcnRpYWwvdXNlci5odG1sJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ2FwcC5jb21tZXJjZURldGFpbCcsIHtcclxuICAgICAgICAgICAgdXJsOiAnY29tbWVyY2UtZGV0YWlsJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdXNlcnMvcGFydGlhbC9jb21tZXJjZURldGFpbC5odG1sJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ2FwcC5iYXNrZXQnLCB7XHJcbiAgICAgICAgICAgIHVybDogJ2Jhc2tldCcsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL3BhcnRpYWwvYmFza2V0Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdiYXNrZXRDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdiYXNrZXQnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5jYXRlZ29yeScsIHtcclxuICAgICAgICAgICAgdXJsOiAnY2F0ZWdvcnk9OmNhdGVnb3J5X2lkJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdzdWJNZW51QGFwcCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tZW51ZXMvc3ViTWVudS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc3ViTWVudUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3N1Yk1lbnUnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jYXRlZ29yeWVzL2l0ZW1zL2Zvcm0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2dldFR5cGVJdGVtc0N0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2dldFR5cGVJdGVtcydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuY2F0ZWdvcnkuaXRlbV90eXBlJywge1xyXG4gICAgICAgICAgICB1cmw6ICcvaXRlbV90eXBlPTp0eXBlX2NvZGUnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jYXRlZ29yeWVzL2l0ZW1zL2Zvcm0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2dldFR5cGVJdGVtc0N0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2dldFR5cGVJdGVtcydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuY2F0ZWdvcnkuaXRlbV90eXBlLnNob3cnLCB7XHJcbiAgICAgICAgICAgIHVybDogJy9pdGVtOml0ZW1faWQnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jYXRlZ29yeWVzL2l0ZW1zL2l0ZW0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2dldFR5cGVJdGVtQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZ2V0VHlwZUl0ZW0nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5jYXRlZ29yeS5zaG93Jywge1xyXG4gICAgICAgICAgICB1cmw6ICcvaXRlbTppdGVtX2lkJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvY2F0ZWdvcnllcy9pdGVtcy9pdGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdnZXRUeXBlSXRlbUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2dldFR5cGVJdGVtJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAubWFrZU9yZGVyJywge1xyXG4gICAgICAgICAgICB1cmw6ICdtYWtlT3JkZXInLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9vcmRlci9tYWtlT3JkZXIuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlYWRPcmRlckN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3JlYWRPcmRlcidcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmNvbmZpcm1PcmRlcicsIHtcclxuICAgICAgICAgICAgdXJsOiAnY29uZmlybU9yZGVyJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvb3JkZXIvY29uZmlybU9yZGVyLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZWFkT3JkZXJDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdyZWFkT3JkZXJDdHJsJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcblxyXG4vLyDqtIDrpqzsnpAg7Y6Y7J207KeAXHJcbiAgICAgICAgLnN0YXRlKCdhcHAubWFuYWdlbWVudCcsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJ21hbmFnZW1lbnQnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAYXBwJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L2Zvcm0uaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdtZW51QGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L21lbnUuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLm1hbmFnZW1lbnQuY2F0ZWdvcnknLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdjYXRlZ29yeScsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50c0BhcHAubWFuYWdlbWVudCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFuYWdlbWVudC9wYXJ0aWFsL2NhdGVnb3J5Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbk1lbnVDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbWFpbk1lbnUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5tYW5hZ2VtZW50LnR5cGVBbmRJdGVtcycsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy90eXBlQW5kSXRlbXMnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGVudHNAYXBwLm1hbmFnZW1lbnQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21hbmFnZW1lbnQvcGFydGlhbC90eXBlQW5kSXRlbXMuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5tYW5hZ2VtZW50LnR5cGVBbmRJdGVtcy51cGRhdGUnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvdXBkYXRlVHlwZTppdGVtX3R5cGUnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGVudHNAYXBwLm1hbmFnZW1lbnQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21hbmFnZW1lbnQvcGFydGlhbC91cGRhdGUvdHlwZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VwZGF0ZVR5cGVDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndXBkYXRlVHlwZSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLm1hbmFnZW1lbnQudHlwZUFuZEl0ZW1zLnVwZGF0ZUl0ZW1UeXBlJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3VwZGF0ZUl0ZW06aXRlbV9pZCcsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50c0BhcHAubWFuYWdlbWVudCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFuYWdlbWVudC9wYXJ0aWFsL3VwZGF0ZS9pdGVtVHlwZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VwZGF0ZUl0ZW1UeXBlQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3VwZGF0ZUl0ZW1UeXBlJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAubWFuYWdlbWVudC50eXBlQW5kSXRlbXMudXBkYXRlSXRlbScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy91cGRhdGUvaXRlbTppdGVtX2lkJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRzQGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L3BhcnRpYWwvdXBkYXRlL2l0ZW0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1cGRhdGVJdGVtQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3VwZGF0ZUl0ZW0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5tYW5hZ2VtZW50LnR5cGVBbmRJdGVtcy5yZWFkSXRlbScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJzppdGVtX2lkJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRzQGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L3BhcnRpYWwvcmVhZC9pdGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVhZEl0ZW1DdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVhZEl0ZW0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLm1hbmFnZW1lbnQuYmFubmVyJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2Jhbm5lcicsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50c0BhcHAubWFuYWdlbWVudCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFuYWdlbWVudC9wYXJ0aWFsL2Jhbm5lci5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VwbG9hZEJhbm5lckN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd1cGxvYWRCYW5uZXInXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLm1hbmFnZW1lbnQuZ2FsbGVyeScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9nYWxsZXJ5JyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRzQGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L3BhcnRpYWwvZ2FsbGVyeS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VwbG9hZGdhbGxlcnlDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndXBsb2FkR2FsbGVyeSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdhcHAubWFuYWdlbWVudC5vcmRlclN0YXR1cycsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9vcmRlclN0YXR1cycsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50c0BhcHAubWFuYWdlbWVudCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFuYWdlbWVudC9wYXJ0aWFsL29yZGVyU3RhdHVzLmh0bWwnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLm1hbmFnZW1lbnQubWVtYmVycycsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9tZW1iZXJzJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRzQGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L3BhcnRpYWwvbWVtYmVycy5odG1sJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcblxyXG5cclxuICAgICAgICAuc3RhdGUoJ3Jlc2V0dXNlcm5hbWUnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcmVzZXR1c2VybmFtZScsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9yZXNldC91c2VybmFtZS5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VybmFtZUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgncmVzZXRwYXNzd29yZCcsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9yZXNldHBhc3N3b3JkJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL3Jlc2V0L3Bhc3N3b3JkLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Bhc3N3b3JkQ3RybCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdwYXNzd29yZCdcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdyZXNldCcsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9yZXNldC86dG9rZW4nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdXNlcnMvcmVzZXQvbmV3cGFzc3dvcmQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVzZXRDdHJsJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3Jlc2V0J1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgLnN0YXRlKCdhY3RpdmF0ZScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9hY3RpdmF0ZS86dG9rZW4nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdXNlcnMvYWN0aXZhdGlvbi9hY3RpdmF0ZS5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdlbWFpbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZW1haWwnXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgncmVzZW5kJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Jlc2VuZCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9hY3RpdmF0aW9uL3Jlc2VuZC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZXNlbmRDdHJsJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3Jlc2VuZCdcclxuICAgICAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmludHJvJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnaW50cm8nLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL2NvbXBhbnlJbmZvcm1hdGlvbi9jb21wYW55SW50cm9kdWNlLnRwbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLnRlcm1zJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAndGVybXMnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL2NvbXBhbnlJbmZvcm1hdGlvbi90ZXJtcy50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5wcml2YWN5JyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAncHJpdmFjeScsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL3ByaXZhY3kudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG59KTtcclxuXHJcbmFwcC5ydW4oZnVuY3Rpb24gKCRyb290U2NvcGUsIFVzZXIsICRzdGF0ZSkge1xyXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICB9KTtcclxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcclxuICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYWRtaW5TZXJ2aWNlcycsW10pXHJcbi5mYWN0b3J5KCdBZG1pbicsIGZ1bmN0aW9uKCRodHRwKXtcclxuICBhZG1pbkZhY3RvcnkgPSB7fTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LmRlbGV0ZUl0ZW0gPSBmdW5jdGlvbihpdGVtX2lkKXtcclxuICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvaXRlbS8nK2l0ZW1faWQpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5yZWFkQXJpc3RDcm9wID0gZnVuY3Rpb24oYmxvYil7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jcmVhdGVDcm9wSW1hZ2UnLCBibG9iKTtcclxuICB9O1xyXG4gIC8vIEFydGlzdC5jcmVhdGVQaG90byhwaG90b0RhdGEpXHJcbiAgYWRtaW5GYWN0b3J5LmNyZWF0ZUFyaXN0UGhvdG8gPSBmdW5jdGlvbihwaG90b0RhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvYXJ0aXN0UHJvZmlsZXMnLCBwaG90b0RhdGEpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5jcmVhdGVJdGVtID0gZnVuY3Rpb24oaXRlbURhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvaXRlbScsIGl0ZW1EYXRhKTtcclxuICB9O1xyXG5cclxuICBhZG1pbkZhY3RvcnkucmVhZEl0ZW1zID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvaXRlbScpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5yZWFkSXRlbSA9IGZ1bmN0aW9uKGl0ZW1faWQpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9pdGVtLycraXRlbV9pZCk7XHJcbiAgfTtcclxuXHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT0gdHlwZVNlcnZpY2VzIOyDneyEsSA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gLy9cclxuXHJcblxyXG4gIGFkbWluRmFjdG9yeS51cGRhdGVJdGVtVHlwZSA9IGZ1bmN0aW9uKHVwZGF0ZURhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS9pdGVtVHlwZScsIHVwZGF0ZURhdGEpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5yZWFkVXBkYXRlSXRlbVR5cGUgPSBmdW5jdGlvbihpdGVtX2lkKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvaXRlbVR5cGUvJytpdGVtX2lkKTtcclxuICB9O1xyXG5cclxuICBhZG1pbkZhY3RvcnkucmVhZEl0ZW1UeXBlID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvaXRlbVR5cGUnKTtcclxuICB9O1xyXG5cclxuICBhZG1pbkZhY3RvcnkuZGVsZXRlVHlwZSA9IGZ1bmN0aW9uKGl0ZW1fdHlwZV9pZCl7XHJcbiAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL3R5cGUvJytpdGVtX3R5cGVfaWQpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5yZWFkVXBkYXRlVHlwZSA9IGZ1bmN0aW9uKGl0ZW1fdHlwZSl7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3R5cGUvJytpdGVtX3R5cGUpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS51cGRhdGVVcGRhdGVUeXBlID0gZnVuY3Rpb24odXBkYXRlRGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL3R5cGUnLCB1cGRhdGVEYXRhKTtcclxuICB9O1xyXG5cclxuICBhZG1pbkZhY3RvcnkuY3JlYXRlVHlwZSA9IGZ1bmN0aW9uKHR5cGVEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3R5cGUnLCB0eXBlRGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LnJlYWRUeXBlID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdHlwZScpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBhZG1pbkZhY3Rvcnk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXV0aFNlcnZpY2VzJyxbXSlcclxuXHJcbi5mYWN0b3J5KCdBdXRoJywgZnVuY3Rpb24oJGh0dHAsIEF1dGhUb2tlbil7XHJcbiAgICB2YXIgYXV0aEZhY3RvcnkgPSB7fTtcclxuLy8gQXV0aC5nZXRVc2VyKCk7XHJcbiAgICBhdXRoRmFjdG9yeS5nZXRVc2VyID0gZnVuY3Rpb24oKXtcclxuICAgICAgaWYoQXV0aFRva2VuLmdldFRva2VuKCkpe1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL21lJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJHEucmVqZWN0KHttZXNzYWdlOidVc2VyIGhhcyBubyB0b2tlbid9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbi8vIEF1dGgubG9naW4obG9naW5EYXRhKTtcclxuICAgIGF1dGhGYWN0b3J5LmxvZ2luID0gZnVuY3Rpb24obG9naW5EYXRhKXtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvYXV0aGVudGljYXRlJywgbG9naW5EYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIEF1dGhUb2tlbi5zZXRUb2tlbihkYXRhLmRhdGEudG9rZW4pO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4vLyBBdXRoLmlzTG9nZ2VkSW4oKTtcclxuICAgIGF1dGhGYWN0b3J5LmlzTG9nZ2VkSW4gPSBmdW5jdGlvbigpe1xyXG4gICAgICBpZihBdXRoVG9rZW4uZ2V0VG9rZW4oKSl7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuLy8gQXV0aC5sb2dvdXQoKTtcclxuICAgIGF1dGhGYWN0b3J5LmxvZ291dCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgIEF1dGhUb2tlbi5zZXRUb2tlbigpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBhdXRoRmFjdG9yeTtcclxufSlcclxuXHJcbi5mYWN0b3J5KCdBdXRoVG9rZW4nLCBmdW5jdGlvbigkd2luZG93KXtcclxuICB2YXIgYXV0aFRva2VuRmFjdG9yeSA9IHt9O1xyXG5cclxuICAvLyBBdXRoVG9rZW4uc2V0VG9rZW4odG9rZW4pO1xyXG4gIGF1dGhUb2tlbkZhY3Rvcnkuc2V0VG9rZW4gPSBmdW5jdGlvbih0b2tlbil7XHJcbiAgICBpZih0b2tlbil7XHJcbiAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgdG9rZW4pO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicsIHRva2VuKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuLy8gQXV0aFRva2VuLmdldFRva2VuKCk7XHJcbiAgYXV0aFRva2VuRmFjdG9yeS5nZXRUb2tlbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcclxuICB9O1xyXG4gIHJldHVybiBhdXRoVG9rZW5GYWN0b3J5O1xyXG59KVxyXG5cclxuLmZhY3RvcnkoJ0F1dGhJbnRlcmNlcHRvcnMnLCBmdW5jdGlvbihBdXRoVG9rZW4pe1xyXG4gIHZhciBhdXRoSW50ZXJjZXB0b3JzRmFjdG9yeSA9IHt9O1xyXG5cclxuICBhdXRoSW50ZXJjZXB0b3JzRmFjdG9yeS5yZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKXtcclxuICAgIHZhciB0b2tlbiA9IEF1dGhUb2tlbi5nZXRUb2tlbigpO1xyXG5cclxuICAgIGlmKHRva2VuKSBjb25maWcuaGVhZGVyc1sneC1hY2Nlc3MtdG9rZW4nXSA9IHRva2VuO1xyXG5cclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfTtcclxuICByZXR1cm4gYXV0aEludGVyY2VwdG9yc0ZhY3Rvcnk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnbWVudVNlcnZpY2VzJyxbXSlcclxuLmZhY3RvcnkoJ01lbnUnLCBmdW5jdGlvbigkaHR0cCl7XHJcbiAgbWVudUZhY3RvcnkgPSB7fTtcclxuXHJcbiAgbWVudUZhY3RvcnkuZGVsZXRlTWVudSA9IGZ1bmN0aW9uKGNhdGVnb3J5X2lkKXtcclxuICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvbWVudS8nK2NhdGVnb3J5X2lkKTtcclxuICB9O1xyXG5cclxuICBtZW51RmFjdG9yeS51cGRhdGVNZW51ID0gZnVuY3Rpb24odXBkYXRlRGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL21lbnUvJywgdXBkYXRlRGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgbWVudUZhY3RvcnkuY3JlYXRlTWVudSA9IGZ1bmN0aW9uKG1lbnVEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL21lbnUnLCBtZW51RGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgbWVudUZhY3RvcnkucmVhZE1haW5NZW51ID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWVudScpO1xyXG4gIH07XHJcbiAgbWVudUZhY3RvcnkucmVhZFN1Yk1lbnUgPSAgZnVuY3Rpb24obWFpbk1lbnVUeXBlKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWVudS8nK21haW5NZW51VHlwZSk7XHJcbiAgfTtcclxuICByZXR1cm4gbWVudUZhY3Rvcnk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnb3JkZXJTZXJ2aWNlcycsW10pXHJcbi5mYWN0b3J5KCdPcmRlcicsIGZ1bmN0aW9uKCRodHRwKXtcclxuICBvcmRlckZhY3RvcnkgPSB7fTtcclxuICBcclxuICBvcmRlckZhY3RvcnkudXBkYXRlRGVsaXZlcnkgPSBmdW5jdGlvbihkZWxpRGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL2RlbGl2ZXJ5LycrZGVsaURhdGEudXNlcl9pZCwgZGVsaURhdGEpO1xyXG4gIH07XHJcblxyXG4gIG9yZGVyRmFjdG9yeS5jcmVhdGVEZWxpdmVyeSA9IGZ1bmN0aW9uKGRlbGlEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2RlbGl2ZXJ5JyxkZWxpRGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgb3JkZXJGYWN0b3J5LmRlbGV0ZUJhc2tldCA9IGZ1bmN0aW9uKGJhc2tldF9pZCl7XHJcbiAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2Jhc2tldC8nK2Jhc2tldF9pZCk7XHJcbiAgfTtcclxuXHJcbiAgb3JkZXJGYWN0b3J5LnJlYWRCYXNrZXQ9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2Jhc2tldCcpO1xyXG4gIH07XHJcblxyXG4gIG9yZGVyRmFjdG9yeS5jcmVhdGVCYXNrZXQgPSBmdW5jdGlvbihiYXNrZXREYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2Jhc2tldCcsIGJhc2tldERhdGEpO1xyXG4gIH07XHJcblxyXG4gIG9yZGVyRmFjdG9yeS5kZWxldGVPcmRlciA9IGZ1bmN0aW9uKGl0ZW1faWQpe1xyXG4gICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9tYWtlT3JkZXIvJytpdGVtX2lkKTtcclxuICB9O1xyXG5cclxuICBvcmRlckZhY3RvcnkucmVhZE9yZGVyID0gZnVuY3Rpb24odXNlcl9pZCl7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL21ha2VPcmRlci8nK3VzZXJfaWQpO1xyXG4gIH07XHJcblxyXG4gIG9yZGVyRmFjdG9yeS5yZWFkT3JkZXJBbmREZWxpID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWFrZU9yZGVyJyk7XHJcbiAgfTtcclxuXHJcbiAgb3JkZXJGYWN0b3J5LmNyZWF0ZU9yZGVyID0gZnVuY3Rpb24ob3JkZXJEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL21ha2VPcmRlcicsb3JkZXJEYXRhKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gb3JkZXJGYWN0b3J5O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ3VzZXJTZXJ2aWNlcycsW10pXHJcbi5mYWN0b3J5KCdVc2VyJywgZnVuY3Rpb24oJGh0dHApe1xyXG4gIHVzZXJGYWN0b3J5ID0ge307XHJcblxyXG4gIHVzZXJGYWN0b3J5LmdldFBlcm1pc3Npb24gPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wZXJtaXNzaW9uJyk7XHJcbiAgfTtcclxuLy8gVXNlci5jcmVhdGUocmVnRGF0YSlcclxuICB1c2VyRmFjdG9yeS5jcmVhdGUgPSBmdW5jdGlvbihyZWdEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywgcmVnRGF0YSk7XHJcbiAgfTtcclxuXHJcbi8vIFVzZXIuYWN0aXZlQWNjb3VudCh0b2tlbik7XHJcbiAgdXNlckZhY3RvcnkuYWN0aXZlQWNjb3VudCA9IGZ1bmN0aW9uKHRva2VuKXtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvYWN0aXZhdGUvJyt0b2tlbik7XHJcbiAgfTtcclxuXHJcbi8vIFVzZXIuY2hlY2tDcmVkZW50aWFscyhsb2dpbkRhdGEpO1xyXG4gIHVzZXJGYWN0b3J5LmNoZWNrQ3JlZGVudGlhbHMgPSBmdW5jdGlvbihsb2dpbkRhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcmVzZW5kJywgbG9naW5EYXRhKTtcclxuICB9O1xyXG5cclxuLy8gVXNlci5yZXNlbmRMaW5rKHVzZXJuYW1lKVxyXG4gIHVzZXJGYWN0b3J5LnJlc2VuZExpbmsgPSBmdW5jdGlvbih1c2VybmFtZSl7XHJcbiAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL3Jlc2VuZCcsIHVzZXJuYW1lKTtcclxuICB9O1xyXG5cclxuLy8gVXNlci5zZW5kVXNlcm5hbWUodXNlckRhdGEpO1xyXG4gIHVzZXJGYWN0b3J5LnNlbmRVc2VybmFtZSA9IGZ1bmN0aW9uKHVzZXJEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcmVzZXR1c2VybmFtZS8nK3VzZXJEYXRhKTtcclxuICB9O1xyXG5cclxuLy8gVXNlci5zZW5kUGFzc3dvcmQocmVzZXREYXRhKTtcclxuICB1c2VyRmFjdG9yeS5zZW5kUGFzc3dvcmQgPSBmdW5jdGlvbihyZXNldERhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS9yZXNldHBhc3N3b3JkJywgcmVzZXREYXRhKTtcclxuICB9O1xyXG5cclxuLy8gVXNlci5yZXNldFBhc3N3b3JkKHRva2VuKTtcclxuICB1c2VyRmFjdG9yeS5yZXNldFBhc3N3b3JkID0gZnVuY3Rpb24odG9rZW4pe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9yZXNldHBhc3N3b3JkLycrdG9rZW4pO1xyXG4gIH07XHJcblxyXG5cclxuLy8gVXNlci5zYXZlUGFzc3dvcmQocmVnRGF0YSlcclxuICB1c2VyRmFjdG9yeS5zYXZlUGFzc3dvcmQgPSBmdW5jdGlvbihyZWdEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvc2F2ZXBhc3N3b3JkJywgcmVnRGF0YSk7XHJcbiAgfTtcclxuXHJcbi8vICBVc2VyLnJlbmV3U2Vzc2lvbih1c2VybmFtZSlcclxuICB1c2VyRmFjdG9yeS5yZW5ld1Nlc3Npb24gPSBmdW5jdGlvbih1c2VybmFtZSl7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3JlbmV3VG9rZW4vJysgdXNlcm5hbWUpO1xyXG4gIH07XHJcblxyXG5cclxuICByZXR1cm4gdXNlckZhY3Rvcnk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmRpcmVjdGl2ZSgnYWRtaW5Vc2VycycsIFtmdW5jdGlvbiAoKSB7XHJcbiAgIHJldHVybiB7XHJcbiAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAvLyAgcmVxdWlyZTogWydhZG1pblVzZXJzJ10sXHJcbiAgICAgICBjb250cm9sbGVyOiBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgIHZhciBOYW1lQ3RybCA9IHRoaXM7XHJcbiAgICAgICB9XSxcclxuICAgICAgIGNvbnRyb2xsZXJBczogJ05hbWVDdHJsJyxcclxuICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvYWRtaW5Vc2Vycy50cGwuaHRtbCcsXHJcbiAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgIC8vXHJcbiAgICAgICB9XHJcbiAgIH07XHJcbn1dKTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdiYW5uZXInLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogWyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwID0gdGhpcztcclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2Jhbm5lckN0cmwnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL2Jhbm5lci50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwQ3RybCA9IGN0cmxzO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvYmFubmVyJykudGhlbihmdW5jdGlvbihyZXN1bHQpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBDdHJsLmJhbm5lckRhdGEgPSByZXN1bHQuZGF0YS5iYW5uZXJEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi67aI65+s7Jik7KeAIOuqu+2VmOyYgOyKteuLiOuLpC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pXHJcblxyXG4uY29udHJvbGxlcignQ2Fyb3VzZWxDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG4gICAgJHNjb3BlLm15SW50ZXJ2YWwgPSAyNTAwO1xyXG4gICAgJHNjb3BlLm5vV3JhcFNsaWRlcyA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmFjdGl2ZSA9IDA7XHJcbiAgICB2YXIgc2xpZGVzID0gJHNjb3BlLnNsaWRlcyA9IFtdO1xyXG4gICAgdmFyIGN1cnJJbmRleCA9IDA7XHJcblxyXG4gICAgJHNjb3BlLmFkZFNsaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG5ld1dpZHRoID0gNjAwICsgc2xpZGVzLmxlbmd0aCArIDE7XHJcbiAgICAgICAgc2xpZGVzLnB1c2goe1xyXG4gICAgICAgICAgICBpbWFnZTogWycvaW1hZ2VzL2l0ZW1zL2Jhbm5lci8xLmpwZycsJy9pbWFnZXMvaXRlbXMvYmFubmVyLzIuanBnJywgJy9pbWFnZXMvaXRlbXMvYmFubmVyLzMuanBnJ11bc2xpZGVzLmxlbmd0aCAlIDNdLFxyXG4gICAgICAgICAgICBpZDogY3VyckluZGV4KytcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnJhbmRvbWl6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbmRleGVzID0gZ2VuZXJhdGVJbmRleGVzQXJyYXkoKTtcclxuICAgICAgICBhc3NpZ25OZXdJbmRleGVzVG9TbGlkZXMoaW5kZXhlcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgJHNjb3BlLmFkZFNsaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmFuZG9taXplIGxvZ2ljIGJlbG93XHJcblxyXG4gICAgZnVuY3Rpb24gYXNzaWduTmV3SW5kZXhlc1RvU2xpZGVzKGluZGV4ZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgc2xpZGVzW2ldLmlkID0gaW5kZXhlcy5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVJbmRleGVzQXJyYXkoKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJJbmRleDsgKytpKSB7XHJcbiAgICAgICAgICAgIGluZGV4ZXNbaV0gPSBpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2h1ZmZsZShpbmRleGVzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk2MjgwMiM5NjI4OTBcclxuICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICB2YXIgdG1wLCBjdXJyZW50LCB0b3AgPSBhcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmICh0b3ApIHtcclxuICAgICAgICAgICAgd2hpbGUgKC0tdG9wKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHRvcCArIDEpKTtcclxuICAgICAgICAgICAgICAgIHRtcCA9IGFycmF5W2N1cnJlbnRdO1xyXG4gICAgICAgICAgICAgICAgYXJyYXlbY3VycmVudF0gPSBhcnJheVt0b3BdO1xyXG4gICAgICAgICAgICAgICAgYXJyYXlbdG9wXSA9IHRtcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ21lbnVJdGVtJywgWydNZW51JywgZnVuY3Rpb24gKE1lbnUpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdtZW51SXRlbUN0cmwnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL21lbnVJdGVtLnRwbC5odG1sJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZW51SXRlbUN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgICAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVJdGVtQ3RybC5tYWluTWVudWVzID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51SXRlbUN0cmwuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pIiwiYW5ndWxhci5tb2R1bGUoJ2Jhbm5lckNvbnRyb2xsZXInLCBbXSlcclxuLmNvbnRyb2xsZXIoJ3VwbG9hZEJhbm5lckN0cmwnLCBmdW5jdGlvbigkc2NvcGUsJHRpbWVvdXQsJGh0dHAsICR3aW5kb3csICRzdGF0ZSl7XHJcbnZhciBhcHAgPSB0aGlzO1xyXG50aGlzLmZpbGUgPSB7fTtcclxuXHJcbi8vIOyeke2SiCDshKTrqoUg7J2066+47KeAIOyXheuhnOuTnCDrkJjsl4jripTsp4Ag67O07Jes7KO86riwXHJcbnRoaXMucmVhZEltYWdlID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwICYmIGZpbGVzWzBdLm5hbWUubWF0Y2goL1xcLihwbmd8anBlZ3xqcGcpJC8pKSB7XHJcbiAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsLmRhdGFVcmwgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuLy8g7J6R7ZKIIOyEpOuqhSAg7J2066+47KeAIOyXheuhnOuTnO2VtOyEnCDqsr3roZwg7KCA7J6lXHJcbnRoaXMudXBsb2FkQmFubmVyID0gZnVuY3Rpb24oKXtcclxuLy8g7J6R7ZKIIOyEpOuqhSAg7JeF66Gc65OcIOyXrOu2gFxyXG4gICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gIGFwcC5leHBsYWluUGhvdG8gPSBmYWxzZTtcclxuICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gIGZkLmFwcGVuZCgnbXlmaWxlJywgYXBwLmZpbGUudXBsb2FkKTtcclxuICAgICRodHRwLnBvc3QoJy9hcGkvYmFubmVyLycsIGZkLHtcclxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXHJcbiAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cclxuICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICBhcHAuZXhwbGFpblBob3RvID0gdHJ1ZTtcclxuICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdnZXRCYW5uZXJDdHJsJywgZnVuY3Rpb24oJGh0dHApe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG5cclxuICAkaHR0cC5nZXQoJy9hcGkvYmFubmVyJykudGhlbihmdW5jdGlvbihyZXN1bHQpe1xyXG4gICAgaWYocmVzdWx0LmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgYXBwLmJhbm5lckRhdGEgPSByZXN1bHQuZGF0YS5iYW5uZXJEYXRhO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCLrtojrn6zsmKTsp4Ag66q77ZWY7JiA7Iq164uI64ukLlwiKTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdnYWxsZXJ5Q29udHJvbGxlcicsIFtdKVxyXG4uY29udHJvbGxlcigndXBsb2FkZ2FsbGVyeUN0cmwnLCBmdW5jdGlvbigkc2NvcGUsJHRpbWVvdXQsJGh0dHAsICR3aW5kb3csICRzdGF0ZSl7XHJcbnZhciBhcHAgPSB0aGlzO1xyXG50aGlzLmZpbGUgPSB7fTtcclxuXHJcbi8vIOyeke2SiCDshKTrqoUg7J2066+47KeAIOyXheuhnOuTnCDrkJjsl4jripTsp4Ag67O07Jes7KO86riwXHJcbnRoaXMucmVhZEltYWdlID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwICYmIGZpbGVzWzBdLm5hbWUubWF0Y2goL1xcLihwbmd8anBlZ3xqcGcpJC8pKSB7XHJcbiAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsLmRhdGFVcmwgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuLy8g7J6R7ZKIIOyEpOuqhSAg7J2066+47KeAIOyXheuhnOuTnO2VtOyEnCDqsr3roZwg7KCA7J6lXHJcbnRoaXMudXBsb2FkSW1hZ2UgPSBmdW5jdGlvbihpdGVtVGl0bGUpe1xyXG4vLyDsnpHtkogg7ISk66qFICDsl4XroZzrk5wg7Jes67aAXHJcbiAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgYXBwLmV4cGxhaW5QaG90byA9IGZhbHNlO1xyXG4gIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgZmQudGl0bGUgPSBpdGVtVGl0bGU7XHJcbiAgZmQuYXBwZW5kKCdteWZpbGUnLCBhcHAuZmlsZS51cGxvYWQpO1xyXG4gICAgJGh0dHAucGF0Y2goJy9hcGkvZ2FsbGVyeS8nLCBmZCwge1xyXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcclxuICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkfVxyXG4gIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIGFwcC5pbWFnZVBhdGggPSBkYXRhLmRhdGEuaW1hZ2VfcGF0aDtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIGFwcC5leHBsYWluUGhvdG8gPSB0cnVlO1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMudXBsb2FkR2FsbGVyeSA9IGZ1bmN0aW9uKHRpdGxlKXtcclxuICAgIGdhbGxlcnlEYXRhID0ge1xyXG4gICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgIGltYWdlUGF0aCA6IGFwcC5pbWFnZVBhdGhcclxuICAgIH07XHJcbiAgICAkaHR0cC5wb3N0KCcvYXBpL2dhbGxlcnknLCBnYWxsZXJ5RGF0YSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xyXG4gICAgfSk7XHJcbiAgfTtcclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdnZXRHYWxsZXJ5Q3RybCcsIGZ1bmN0aW9uKCRodHRwKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuXHJcbiAgJGh0dHAuZ2V0KCcvYXBpL2dhbGxlcnknKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XHJcbiAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBhcHAuZ2FsbGVyeURhdGEgPSByZXN1bHQuZGF0YS5nYWxsZXJ5RGF0YTtcclxuICAgICAgICBjb25zb2xlLmxvZyhhcHAuZ2FsbGVyeURhdGEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCLrtojrn6zsmKTsp4Ag66q77ZWY7JiA7Iq164uI64ukLlwiKTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiIsIiAgYW5ndWxhci5tb2R1bGUoJ2l0ZW1Db250cm9sbGVycycsWydvcmRlclNlcnZpY2VzJ10pXHJcbiAgLmZpbHRlcignc3VtQnlLZXknLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIHByb3BlcnR5KSB7XHJcbiAgICB2YXIgaSA9IGlucHV0IGluc3RhbmNlb2YgQXJyYXkgPyBpbnB1dC5sZW5ndGggOiAwO1xyXG4vLyBpZiBwcm9wZXJ0eSBpcyBub3QgZGVmaW5lZCwgcmV0dXJucyBsZW5ndGggb2YgYXJyYXlcclxuLy8gaWYgYXJyYXkgaGFzIHplcm8gbGVuZ3RoIG9yIGlmIGl0IGlzIG5vdCBhbiBhcnJheSwgcmV0dXJuIHplcm9cclxuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICd1bmRlZmluZWQnIHx8IGkgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuLy8gdGVzdCBpZiBwcm9wZXJ0eSBpcyBudW1iZXIgc28gaXQgY2FuIGJlIGNvdW50ZWRcclxuICAgIH1cclxuICAgICBlbHNlIHtcclxuICAgICAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpLS0pXHJcbiAgICAgICAgICAgIHRvdGFsICs9IChpbnB1dFtpXVtwcm9wZXJ0eVswXV0gKiBpbnB1dFtpXVtwcm9wZXJ0eVsxXV0pO1xyXG4gICAgICAgIHJldHVybiB0b3RhbDtcclxuICAgIH1cclxufTtcclxufSlcclxuLmNvbnRyb2xsZXIoJ2dldFR5cGVJdGVtc0N0cmwnLCBmdW5jdGlvbiAoJHN0YXRlUGFyYW1zLCAkaHR0cCkge1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG5cclxuICB2YXIgY2F0ZWdvcnlfaWQgPSAkc3RhdGVQYXJhbXMuY2F0ZWdvcnlfaWQ7XHJcbiAgaWYoISRzdGF0ZVBhcmFtcy50eXBlX2NvZGUpe1xyXG4gICAgJGh0dHAuZ2V0KCcvYXBpL2l0ZW1fdHlwZS8nK2NhdGVnb3J5X2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnJlc3VsdC5sZW5ndGggPT09IDAgKXtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9ICfrk7HroZ3rkJwg7IOB7ZKI7J20IOyXhuyKteuLiOuLpC4nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuaXRlbXNEYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgdHlwZV9jb2RlID0gICRzdGF0ZVBhcmFtcy50eXBlX2NvZGU7XHJcbiAgICAkaHR0cC5nZXQoJy9hcGkvaXRlbV90eXBlLycrY2F0ZWdvcnlfaWQsXHJcbiAgICB7ICBwYXJhbXM6IHt0eXBlX2NvZGUgOiB0eXBlX2NvZGUgfX1cclxuICApLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEucmVzdWx0Lmxlbmd0aCA9PT0gMCApe1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gJ+uTseuhneuQnCDsg4HtkojsnbQg7JeG7Iq164uI64ukLic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5pdGVtc0RhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdnZXRUeXBlSXRlbUN0cmwnLCBmdW5jdGlvbihBZG1pbiwgJHN0YXRlUGFyYW1zLCAkd2luZG93LCAkc3RhdGUsIE9yZGVyKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICB2YXIgaXRlbV9pZCA9ICRzdGF0ZVBhcmFtcy5pdGVtX2lkO1xyXG4gIGFwcC5vcHRpb25JdGVtID0gZmFsc2U7XHJcblxyXG4gIGFwcC5kYXRhID0ge1xyXG4gICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgXSxcclxuICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgfTtcclxuXHJcbiAgIGFwcC5hbW91bnQgPSAxO1xyXG5cclxuICAgYXBwLm9wdGlvbkxpc3QgPSBbXTtcclxuICAgdGhpcy5hZGRJdGVtID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgaWYoZGF0YS5pZCA9PT0gMCl7XHJcbiAgICAgICAgJHdpbmRvdy5hbGVydCgn7Ji17IWY7J2EIOyEoO2Dne2VtOyjvOyEuOyalC4nKTtcclxuICAgICB9IGVsc2Uge1xyXG4gICAgICAgYXBwLm9wdGlvbkl0ZW0gPSB0cnVlO1xyXG4gICAgICAgYXBwLm9wdGlvbkxpc3QucHVzaChcclxuICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICBraW5kOiBkYXRhLm5hbWUsXHJcbiAgICAgICAgICAgICBwcmljZTogZGF0YS5pZCxcclxuICAgICAgICAgICAgIGFtb3VudDogMVxyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgKTtcclxuXHJcbiAgICAgfVxyXG4gICB9O1xyXG5cclxuICB0aGlzLmNyZWF0ZUJhc2tldCA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgdmFyIGJhc2tldERhdGEgPSB7XHJcbiAgICAgIGl0ZW1faWQ6IGRhdGEuaXRlbV9pZCxcclxuICAgIH07XHJcbiAgICBPcmRlci5jcmVhdGVCYXNrZXQoYmFza2V0RGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLmNyZWF0ZU9yZGVyID0gZnVuY3Rpb24oZGF0YSl7XHJcblxyXG4gICAgdmFyIG9yZGVyRGF0YSA9IHtcclxuICAgICAgaXRlbV9pZDogZGF0YS5pdGVtX2lkLFxyXG4gICAgICBhbW91bnQ6IGRhdGEuYW1vdW50LFxyXG4gICAgICBraW5kX29mOiBkYXRhLmtpbmRfb2YsXHJcbiAgICAgIHByaWNlOiBkYXRhLnByaWNlXHJcbiAgICB9O1xyXG5cclxuICAgIE9yZGVyLmNyZWF0ZU9yZGVyKG9yZGVyRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgJHN0YXRlLmdvKCdhcHAubWFrZU9yZGVyJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICB9O1xyXG5cclxuICBBZG1pbi5yZWFkSXRlbShpdGVtX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICB2YXIga2luZCA9IGRhdGEuZGF0YS5yZXN1bHQua2luZC5zcGxpdCgnLCcpO1xyXG4gICAgICB2YXIgdGVtcCA9IGRhdGEuZGF0YS5yZXN1bHQucHJpY2Uuc3BsaXQoJywnKTtcclxuICAgICAgdmFyIHByaWNlID0gW107XHJcbiAgICAgIGZvcihpPTA7aTx0ZW1wLmxlbmd0aDtpKyspe1xyXG4gICAgICAgIHByaWNlW2ldID0gTnVtYmVyKHRlbXBbaV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhcHAuaXRlbURhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG5cclxuICAgICAgZm9yKGk9MDsgaTxwcmljZS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgbmFtZToga2luZFtpXSxcclxuICAgICAgICAgIGlkOiBwcmljZVtpXVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdtYW5hZ2VtZW50Q29udHJvbGxlcnMnLCBbJ2FkbWluU2VydmljZXMnLCAnbWVudVNlcnZpY2VzJywgJ29yZGVyU2VydmljZXMnXSlcclxuXHJcbi5jb250cm9sbGVyKCdyZWFkSXRlbXNDdHJsJywgZnVuY3Rpb24oQWRtaW4sICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgQWRtaW4ucmVhZEl0ZW1zKCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBhcHAuaXRlbXNEYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB0aGlzLmRlbGV0ZUl0ZW0gPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgdmFyIGl0ZW1faWQgPSBkYXRhLml0ZW1faWQ7XHJcbiAgICBBZG1pbi5kZWxldGVJdGVtKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdyZWFkSXRlbUN0cmwnLCBmdW5jdGlvbihBZG1pbiwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsIE9yZGVyLCAkd2luZG93KXtcclxuXHJcbiAgICB2YXIgYXBwID0gdGhpcztcclxuICAgIHZhciBpdGVtX2lkID0gJHN0YXRlUGFyYW1zLml0ZW1faWQ7XHJcbiAgICBhcHAuZGF0YSA9IHtcclxuICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgIF0sXHJcbiAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICB9O1xyXG5cclxuICAgICBhcHAuYW1vdW50ID0gMTtcclxuXHJcbiAgICBBZG1pbi5yZWFkSXRlbShpdGVtX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgdmFyIGtpbmQgPSBkYXRhLmRhdGEucmVzdWx0LmtpbmQuc3BsaXQoJywnKTtcclxuICAgICAgICB2YXIgdGVtcCA9IGRhdGEuZGF0YS5yZXN1bHQucHJpY2Uuc3BsaXQoJywnKTtcclxuICAgICAgICB2YXIgcHJpY2UgPSBbXTtcclxuICAgICAgICBmb3IoaT0wO2k8dGVtcC5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgIHByaWNlW2ldID0gTnVtYmVyKHRlbXBbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcHAuaXRlbURhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgIGFwcC5kYXRhLnNlbGVjdGVkT3B0aW9uID0ge1xyXG4gICAgICAgICAgaWQgOiBwcmljZVswXVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZvcihpPTA7IGk8cHJpY2UubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBraW5kW2ldLFxyXG4gICAgICAgICAgICBpZDogcHJpY2VbaV1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxufSlcclxuXHJcblxyXG5cclxuXHJcbi5jb250cm9sbGVyKCd1cGRhdGVJdGVtQ3RybCcsIGZ1bmN0aW9uKEFkbWluLCAkc3RhdGVQYXJhbXMsICRzY29wZSwgJGh0dHAsICR0aW1lb3V0LCAgJHN0YXRlLCAkd2luZG93LCBNZW51KXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICB2YXIgaXRlbV9pZCA9ICRzdGF0ZVBhcmFtcy5pdGVtX2lkO1xyXG5cclxuICAgICAgICAgYXBwLmRhdGEgPSB7XHJcbiAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAgIHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgYXBwLmRhdGEyID0ge1xyXG4gICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgTWVudS5yZWFkTWFpbk1lbnUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB0aGlzLnJlYWRNZW51ID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhcHAucmVhZE1lbnVTdGF0dXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYoZGF0YS5pZCA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnlfaWQgPSBkYXRhLmlkO1xyXG4gICAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9tZW51LycrY2F0ZWdvcnlfaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAvLyDstIjquLDtmZQg7Iuc7YK0XHJcbiAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5yZXN1bHQubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGF0YTIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+uTseuhneuQnCDsg4HtkojsnbQg7JeG7Iq164uI64ukLicpO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5yZWFkTWVudVN0YXR1cyA9IHRydWU7XHJcbiAgICAvLyDstIjquLDtmZQg7Iuc7Lyc7JW87ZWY64qU642wIOyWtOuWu+qyjCDtlaDquYzsmpRcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGF0YTIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZGF0YTIuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLnR5cGVfZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0eXBlW2ldLml0ZW1fdHlwZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gIEFkbWluLnJlYWRJdGVtKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgYXBwLml0ZW1EYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgYXBwLmRhdGEuc2VsZWN0ZWRPcHRpb24gPSB7XHJcbiAgICAgICAgaWQgOiBhcHAuaXRlbURhdGEuY2F0ZWdvcnlfaWRcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdGhpcy51cGRhdGVJdGVtID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIGlmKGFwcC5yZWFkTWVudVN0YXR1cyl7XHJcbiAgICAgIGlmKGRhdGEuaXRlbV90eXBlID09PSAwIHx8IGRhdGEuaXRlbV90eXBlID09PSAnMCcpe1xyXG4gICAgICAgICR3aW5kb3cuYWxlcnQoJ+yDge2SiCDrtoTrpZjrpbwg7ISg7YOd7ZW07KO87IS47JqULiEnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdXBkYXRlRGF0YSA9IHtcclxuICAgICAgICAgIHR5cGU6IGRhdGEuaXRlbV90eXBlLFxyXG4gICAgICAgICAgaXRlbV9uYW1lOiBkYXRhLml0ZW1fbmFtZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgICRodHRwLnB1dCgnL2FwaS9pdGVtLycraXRlbV9pZCwgdXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXBkYXRlRGF0YTIgPSB7XHJcbiAgICAgICAgICB0eXBlOiBhcHAuaXRlbURhdGEuaXRlbV90eXBlX2lkLFxyXG4gICAgICAgICAgaXRlbV9uYW1lOiBkYXRhLml0ZW1fbmFtZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgICRodHRwLnB1dCgnL2FwaS9pdGVtLycraXRlbV9pZCwgdXBkYXRlRGF0YTIpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG5cclxufTtcclxuXHJcblxyXG4gIC8vIO2MjOydvOydmCDqsr3roZzrp4wg7KCA7J6l7ZWY6riwIOuplOyduCDsnbTrr7jsp4Ag66eM65Ok6riwXHJcbiAgICAgIHRoaXMuZmlsZSA9IHt9O1xyXG4gIC8vIOuplOyduCDsnpHtkojsnbTrr7jsp4Ag7JeF66Gc65OcIOuQmOyXiOuKlOyngCDrs7Tsl6zso7zquLBcclxuICAgICAgdGhpcy5tYWluUGhvdG9DaGFuZ2VkID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwICYmIGZpbGVzWzBdLm5hbWUubWF0Y2goL1xcLihwbmd8anBlZ3xqcGcpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5tYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5tYWluVGh1bWJuYWlsLmRhdGFVcmwgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgIGFwcC5tYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAvLyDrqZTsnbgg7J6R7ZKIIOydtOuvuOyngCDsl4XroZzrk5ztlbTshJwg6rK966GcIOyggOyepVxyXG4gICAgICB0aGlzLnJlYWRQaG90byA9IGZ1bmN0aW9uKCl7XHJcbiAgLy8g66mU7J24IOydtOuvuOyngCDsl4XroZzrk5wg7Jes67aAXHJcbiAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgYXBwLm1haW5QaG90byA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgZmQuYXBwZW5kKCdteWZpbGUnLCBhcHAuZmlsZS51cGxvYWQpO1xyXG4gICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9jcmVhdGVQaG90b0ltYWdlLycsIGZkLHtcclxuICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXHJcbiAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgYXBwLm1haW5QaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgdXBkYXRlRGF0YSA9IHtcclxuICAgICAgICAgICAgICBpbWFnZTogZGF0YS5kYXRhLml0ZW1fcGF0aFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkaHR0cC5wdXQoJy9hcGkvaXRlbS8nK2l0ZW1faWQsIHVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAvLyDsnpHtkogg7ISk66qFIOydtOuvuOyngCDsl4XroZzrk5wg65CY7JeI64qU7KeAIOuztOyXrOyjvOq4sFxyXG4gICAgICB0aGlzLmV4cGxhaW5QaG90b0NoYW5nZWQgPSBmdW5jdGlvbihmaWxlcykge1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0ubmFtZS5tYXRjaCgvXFwuKHBuZ3xqcGVnfGpwZykkLykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwuZGF0YVVybCA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gIC8vIOyeke2SiCDshKTrqoUgIOydtOuvuOyngCDsl4XroZzrk5ztlbTshJwg6rK966GcIOyggOyepVxyXG4gICAgICB0aGlzLnJlYWRQaG90b0V4cGxhaW4gPSBmdW5jdGlvbigpe1xyXG4gIC8vIOyeke2SiCDshKTrqoUgIOyXheuhnOuTnCDsl6zrtoBcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICBhcHAuZXhwbGFpblBob3RvID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICBmZC5hcHBlbmQoJ215ZmlsZScsIGFwcC5maWxlLnVwbG9hZCk7XHJcbiAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL2NyZWF0ZVBob3RvRXhwbGFpbi8nLCBmZCx7XHJcbiAgICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG4gICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWR9XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGFwcC5leHBsYWluUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgZXhwbGFpbjogZGF0YS5kYXRhLml0ZW1fcGF0aFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkaHR0cC5wdXQoJy9hcGkvaXRlbS8nK2l0ZW1faWQsIHVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gIC8vIOyNuOuEpOydvCDsnbTrr7jsp4Ag66eM65Ok6riwXHJcbiAgICAgICAgYXBwLm15SW1hZ2U9Jyc7XHJcbiAgICAgICAgYXBwLm15Q3JvcHBlZEltYWdlPScnO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlRmlsZVNlbGVjdD1mdW5jdGlvbihldnQpIHtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgICAgdmFyIGZpbGU9ZXZ0LmN1cnJlbnRUYXJnZXQuZmlsZXNbMF07XHJcbiAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgIGFwcC5teUltYWdlPWV2dC50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWxlSW5wdXQnKSkub24oJ2NoYW5nZScsaGFuZGxlRmlsZVNlbGVjdCk7XHJcblxyXG4gICAgICAgICAgZnVuY3Rpb24gZGVjb2RlQmFzZTY0SW1hZ2UoZGF0YVN0cmluZykge1xyXG4gICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IGRhdGFTdHJpbmcubWF0Y2goL15kYXRhOihbQS1aYS16LStcXC9dKyk7YmFzZTY0LCguKykkLyk7XHJcblxyXG4gICAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggIT09IDMpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIGlucHV0IHN0cmluZycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHZhciBmaWxlID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA6IG1hdGNoZXNbMV0sXHJcbiAgICAgICAgICAgICAgICBkYXRhIDogbWF0Y2hlc1syXVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZpbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgLy8g7I2464Sk7J28IOydtOuvuOyngCDroZzsu6zrlJTsiqTtgazsl5Ag7KCA7J6lIO2bhCDsoIDsnqUg7JyE7LmYIOqwgOyguOyYpOq4sFxyXG4gICAgICAgICAgdGhpcy5yZWFkQ3JvcEltYWdlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgICAgICBhcHAudGh1bWJuYWlsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuYmFzZTY0VXJsID09PSAnJyB8fCBkYXRhLmJhc2U2NFVybCA9PT0gbnVsbCB8fCBkYXRhLmJhc2U2NFVybCA9PT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBkZWNvZGVCYXNlNjRJbWFnZSgkc2NvcGUubXlDcm9wcGVkSW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICBBZG1pbi5yZWFkQXJpc3RDcm9wKGJsb2IpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLnRodW1ibmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IGRhdGEuZGF0YS5maWxlUGF0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICRodHRwLnB1dCgnL2FwaS9pdGVtLycraXRlbV9pZCwgdXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcblxyXG59KVxyXG5cclxuXHJcblxyXG4uY29udHJvbGxlcignY3JlYXRlSXRlbUN0cmwnLCBmdW5jdGlvbiAoJGh0dHAsICR0aW1lb3V0LCAkc2NvcGUsIEFkbWluLCAkc3RhdGUsICR3aW5kb3csIE1lbnUpIHtcclxuICAgIHZhciBhcHAgPSB0aGlzO1xyXG5cclxuXHJcbiAgICAgIGFwcC5raW5kTGlzdCA9IFtdO1xyXG4gICAgICBhcHAudHlwZV90aW55ID0gW107XHJcbiAgICAgIGFwcC50eXBlX3ByaWNlID0gW107XHJcblxyXG4gICAgICB0aGlzLmFkZExpbmUgPSBmdW5jdGlvbihraW5kRGF0YSl7XHJcbiAgICAgICAgaWYoIWtpbmREYXRhKXtcclxuICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+ygle2Zle2VnCDqsJLsnYQg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZihraW5kRGF0YS5raW5kVmFsdWUgPT09IG51bGwgfHwga2luZERhdGEua2luZFZhbHVlID09PSB1bmRlZmluZWQgfHwga2luZERhdGEua2luZFZhbHVlID09PSAnJylcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgn7Ji17IWY66qF7J2EIOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIH0gZWxzZSBpZihraW5kRGF0YS5raW5kUHJpY2UgPT09IG51bGwgfHwga2luZERhdGEua2luZFByaWNlID09PSB1bmRlZmluZWQgfHwga2luZERhdGEua2luZFByaWNlID09PSAnJyl7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+yYteyFmCDqsIDqsqnsnYQg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXBwLmtpbmRMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAga2luZDoga2luZERhdGEua2luZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgcHJpY2U6IGtpbmREYXRhLmtpbmRQcmljZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYXBwLnR5cGVfdGlueS5wdXNoKGtpbmREYXRhLmtpbmRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGFwcC50eXBlX3ByaWNlLnB1c2goa2luZERhdGEua2luZFByaWNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9O1xyXG5cclxuICAgICBhcHAuZGF0YSA9IHtcclxuICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgXSxcclxuICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgYXBwLmRhdGEyID0ge1xyXG4gICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMucmVhZE1lbnUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmlkID09PSAwKXtcclxuICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhciBjYXRlZ29yeV9pZCA9IGRhdGEuaWQ7XHJcbiAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvbWVudS8nK2NhdGVnb3J5X2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbi8vIOy0iOq4sO2ZlCDsi5ztgrRcclxuICAgICAgICAgICAgICBpZihkYXRhLmRhdGEucmVzdWx0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGF0YTIgPSB7XHJcbiAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KCfrk7HroZ3rkJwg7IOB7ZKI7J20IOyXhuyKteuLiOuLpC4nKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyDstIjquLDtmZQg7Iuc7Lyc7JW87ZWY64qU642wIOyWtOuWu+qyjCDtlaDquYzsmpRcclxuICAgICAgICAgICAgICAgIGFwcC5kYXRhMiA9IHtcclxuICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgICAgYXBwLmRhdGEyLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLnR5cGVfZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uaXRlbV90eXBlX2lkXHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcblxyXG4vLyDtjIzsnbzsnZgg6rK966Gc66eMIOyggOyepe2VmOq4sCDrqZTsnbgg7J2066+47KeAIOunjOuTpOq4sFxyXG4gICAgdGhpcy5maWxlID0ge307XHJcbi8vIOuplOyduCDsnpHtkojsnbTrr7jsp4Ag7JeF66Gc65OcIOuQmOyXiOuKlOyngCDrs7Tsl6zso7zquLBcclxuICAgIHRoaXMubWFpblBob3RvQ2hhbmdlZCA9IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwICYmIGZpbGVzWzBdLm5hbWUubWF0Y2goL1xcLihwbmd8anBlZ3xqcGcpJC8pKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1swXTtcclxuICAgICAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAubWFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLm1haW5UaHVtYm5haWwuZGF0YVVybCA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICBhcHAubWFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuXHJcbi8vIOuplOyduCDsnpHtkogg7J2066+47KeAIOyXheuhnOuTnO2VtOyEnCDqsr3roZwg7KCA7J6lXHJcbiAgICB0aGlzLnJlYWRQaG90byA9IGZ1bmN0aW9uKCl7XHJcbi8vIOuplOyduCDsnbTrr7jsp4Ag7JeF66Gc65OcIOyXrOu2gFxyXG4gICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgYXBwLm1haW5QaG90byA9IGZhbHNlO1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgZmQuYXBwZW5kKCdteWZpbGUnLCBhcHAuZmlsZS51cGxvYWQpO1xyXG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvY3JlYXRlUGhvdG9JbWFnZS8nLCBmZCx7XHJcbiAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcclxuICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cclxuICAgICAgfSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICBhcHAubWFpblBob3RvID0gdHJ1ZTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgYXBwLm1haW5JbWFnZVBhdGggPSBkYXRhLmRhdGEuaXRlbV9wYXRoO1xyXG4gICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbi8vIOyeke2SiCDshKTrqoUg7J2066+47KeAIOyXheuhnOuTnCDrkJjsl4jripTsp4Ag67O07Jes7KO86riwXHJcbiAgICB0aGlzLmV4cGxhaW5QaG90b0NoYW5nZWQgPSBmdW5jdGlvbihmaWxlcykge1xyXG4gICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCAmJiBmaWxlc1swXS5uYW1lLm1hdGNoKC9cXC4ocG5nfGpwZWd8anBnKSQvKSkge1xyXG4gICAgICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XHJcbiAgICAgICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsLmRhdGFVcmwgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcblxyXG4vLyDsnpHtkogg7ISk66qFICDsnbTrr7jsp4Ag7JeF66Gc65Oc7ZW07IScIOqyveuhnCDsoIDsnqVcclxuICAgIHRoaXMucmVhZFBob3RvRXhwbGFpbiA9IGZ1bmN0aW9uKCl7XHJcbi8vIOyeke2SiCDshKTrqoUgIOyXheuhnOuTnCDsl6zrtoBcclxuICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgIGFwcC5leHBsYWluUGhvdG8gPSBmYWxzZTtcclxuICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgIGZkLmFwcGVuZCgnbXlmaWxlJywgYXBwLmZpbGUudXBsb2FkKTtcclxuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL2NyZWF0ZVBob3RvRXhwbGFpbi8nLCBmZCx7XHJcbiAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcclxuICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cclxuICAgICAgfSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICBhcHAuZXhwbGFpblBob3RvID0gdHJ1ZTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgYXBwLmV4cGxhaW5JbWFnZVBhdGggPSBkYXRhLmRhdGEuaXRlbV9wYXRoO1xyXG4gICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcblxyXG4vLyDsjbjrhKTsnbwg7J2066+47KeAIOunjOuTpOq4sFxyXG4gICAgICBhcHAubXlJbWFnZT0nJztcclxuICAgICAgYXBwLm15Q3JvcHBlZEltYWdlPScnO1xyXG5cclxuICAgICAgdmFyIGhhbmRsZUZpbGVTZWxlY3Q9ZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgdmFyIGZpbGU9ZXZ0LmN1cnJlbnRUYXJnZXQuZmlsZXNbMF07XHJcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgYXBwLm15SW1hZ2U9ZXZ0LnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICB9O1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlsZUlucHV0JykpLm9uKCdjaGFuZ2UnLGhhbmRsZUZpbGVTZWxlY3QpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBkZWNvZGVCYXNlNjRJbWFnZShkYXRhU3RyaW5nKSB7XHJcbiAgICAgICAgICB2YXIgbWF0Y2hlcyA9IGRhdGFTdHJpbmcubWF0Y2goL15kYXRhOihbQS1aYS16LStcXC9dKyk7YmFzZTY0LCguKykkLyk7XHJcblxyXG4gICAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoICE9PSAzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgc3RyaW5nJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZmlsZSA9IHtcclxuICAgICAgICAgICAgICB0eXBlIDogbWF0Y2hlc1sxXSxcclxuICAgICAgICAgICAgICBkYXRhIDogbWF0Y2hlc1syXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gZmlsZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4vLyDsjbjrhKTsnbwg7J2066+47KeAIOuhnOy7rOuUlOyKpO2BrOyXkCDsoIDsnqUg7ZuEIOyggOyepSDsnITsuZgg6rCA7KC47Jik6riwXHJcbiAgICAgICAgdGhpcy5yZWFkQ3JvcEltYWdlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgIGFwcC50aHVtYm5haWwgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICBpZihkYXRhLmJhc2U2NFVybCA9PT0gJycgfHwgZGF0YS5iYXNlNjRVcmwgPT09IG51bGwgfHwgZGF0YS5iYXNlNjRVcmwgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmxvYiA9IGRlY29kZUJhc2U2NEltYWdlKCRzY29wZS5teUNyb3BwZWRJbWFnZSk7XHJcbiAgICAgICAgICAgICAgICBBZG1pbi5yZWFkQXJpc3RDcm9wKGJsb2IpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC50aHVtYm5haWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC50aHVtYm5haWxQYXRoID0gZGF0YS5kYXRhLmZpbGVQYXRoO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbi8vIOyekeqwgCDsnpHtkogg7JeF66Gc65OcXHJcbiAgICAgIHRoaXMuY3JlYXRlUGhvdG8gPSBmdW5jdGlvbih1cGxvYWREYXRhKXtcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICBpZih1cGxvYWREYXRhID09PSB1bmRlZmluZWQgfHwgdXBsb2FkRGF0YSA9PT0gbnVsbCB8fCB1cGxvYWREYXRhID09PSAnJyl7XHJcbiAgICAgICAgICAkd2luZG93LmFsZXJ0KCfruYjsubjsnYQg66qo65GQIOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZihhcHAuZGF0YTIuc2VsZWN0ZWRPcHRpb24uaWQgPT09ICcwJyl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KCfsg4Htkogg67aE66WY7J2EIOyEoO2Dne2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIH0gZWxzZSBpZih1cGxvYWREYXRhLnRpdGxlID09PSB1bmRlZmluZWQgfHwgdXBsb2FkRGF0YS50aXRsZSA9PT0gIG51bGwgfHwgdXBsb2FkRGF0YS50aXRsZT09PSAnJyl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KCfsg4Htkogg7KCc66qp66W8IOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vICAgZWxzZSBpZihhcHAubWFpbkltYWdlUGF0aCA9PT0gdW5kZWZpbmVkIHx8IGFwcC5tYWluSW1hZ2VQYXRoID09PSAgbnVsbCB8fCBhcHAubWFpbkltYWdlUGF0aCA9PT0gJycpe1xyXG4gICAgICAgICAgLy8gICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgLy8gICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIC8vICAgJHdpbmRvdy5hbGVydCgn7IOB7ZKIIOydtOuvuOyngOulvCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAvLyBlbHNlIGlmKGFwcC5leHBsYWluSW1hZ2VQYXRoID09PSB1bmRlZmluZWQgfHwgYXBwLmV4cGxhaW5JbWFnZVBhdGggPT09IG51bGwgfHwgYXBwLmV4cGxhaW5JbWFnZVBhdGggPT09ICcnKSB7XHJcbiAgICAgICAgICAvLyAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAvLyAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgLy8gICAkd2luZG93LmFsZXJ0KCfsg4Htkogg7ISk66qFIOydtOuvuOyngOulvCDsl4XroZzrk5ztlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICAvLyB9IGVsc2UgaWYoYXBwLnRodW1ibmFpbFBhdGggPT09IHVuZGVmaW5lZCB8fCBhcHAudGh1bWJuYWlsUGF0aCA9PT0gbnVsbCB8fCBhcHAudGh1bWJuYWlsUGF0aCA9PT0gJycpIHtcclxuICAgICAgICAgIC8vICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgIC8vICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAvLyAgICR3aW5kb3cuYWxlcnQoJ+yNuOuEpOydvCDsnbTrr7jsp4Drpbwg7JeF66Gc65Oc7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgYXBwLnVwbG9hZERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdXBsb2FkRGF0YS50aXRsZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IGFwcC5kYXRhMi5zZWxlY3RlZE9wdGlvbi5pZCxcclxuICAgICAgICAgICAgICAgIC8vIHRodW1ibmFpbDogYXBwLnRodW1ibmFpbFBhdGgsXHJcbiAgICAgICAgICAgICAgICAvLyBleHBsYWluOiBhcHAuZXhwbGFpbkltYWdlUGF0aCxcclxuICAgICAgICAgICAgICAgIC8vIGltYWdlOiBhcHAubWFpbkltYWdlUGF0aCxcclxuICAgICAgICAgICAgICAgIGtpbmQ6IGFwcC50eXBlX3RpbnkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIHByaWNlOiBhcHAudHlwZV9wcmljZS50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICBBZG1pbi5jcmVhdGVJdGVtKGFwcC51cGxvYWREYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ21lbnVDb250cm9sbGVycycsWydtZW51U2VydmljZXMnXSlcclxuLmNvbnRyb2xsZXIoJ21haW5NZW51Q3RybCcsIGZ1bmN0aW9uIChNZW51LCAkc3RhdGUpIHtcclxuICB2YXIgYXBwID0gdGhpcztcclxuXHJcbiAgdGhpcy5jcmVhdGVNZW51ID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIGlmKGRhdGEgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7KCV67O066W8IOyeheugpe2VtOyjvOyEuOyalC4nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIG1lbnVEYXRhID0ge1xyXG4gICAgICAgICAgbmFtZTogZGF0YS5uYW1lXHJcbiAgICAgIH07XHJcbiAgICAgIE1lbnUuY3JlYXRlTWVudShtZW51RGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMudXBkYXRlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIHZhciB1cGRhdGVEYXRhID0ge1xyXG4gICAgICBjYXRlZ29yeV9pZDogZGF0YS5jYXRlZ29yeV9pZCxcclxuICAgICAgbmFtZTogZGF0YS5uYW1lXHJcbiAgICB9O1xyXG4gICAgICBNZW51LnVwZGF0ZU1lbnUodXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZGVsZXRlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIHZhciBkZWxldGVEYXRhID0gZGF0YS5jYXRlZ29yeV9pZDtcclxuICAgIE1lbnUuZGVsZXRlTWVudShkZWxldGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3N1Yk1lbnVDdHJsJywgZnVuY3Rpb24gKE1lbnUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkaHR0cCkge1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHZhciBjYXRlZ29yeV9pZCA9ICRzdGF0ZVBhcmFtcy5jYXRlZ29yeV9pZDtcclxuXHJcbiAgJGh0dHAuZ2V0KCcvYXBpL2NhdGVnb3J5LycrY2F0ZWdvcnlfaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIGFwcC5zdWJNZW51RGF0YXMgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgndHlwZUNvbnRyb2xsZXJzJywgWydhZG1pblNlcnZpY2VzJywgJ21lbnVTZXJ2aWNlcycsICdvcmRlclNlcnZpY2VzJ10pXHJcbi5jb250cm9sbGVyKCd1cGRhdGVJdGVtVHlwZUN0cmwnLCBmdW5jdGlvbigkc3RhdGVQYXJhbXMsIE1lbnUsIEFkbWluLCAkc3RhdGUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHZhciBpdGVtX2lkID0gJHN0YXRlUGFyYW1zLml0ZW1faWQ7XHJcbiAgYXBwLmRhdGEgPSB7XHJcbiAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgIF0sXHJcbiAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgfTtcclxuXHJcblxyXG5cclxuICAgQWRtaW4ucmVhZFVwZGF0ZUl0ZW1UeXBlKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgYXBwLnVwZGF0YURhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgIGFwcC5kYXRhLnNlbGVjdGVkT3B0aW9uID0ge1xyXG4gICAgICAgICAgICAgaWQgOiBhcHAudXBkYXRhRGF0YS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIHZhciBzcGxpdE9wdGlvbkRhdGFzID0ge1xyXG4gICAgICAgICAgICAgICAgICAga2luZDogYXBwLnVwZGF0YURhdGEua2luZC5zcGxpdCgnLCcpLFxyXG4gICAgICAgICAgICAgICAgICAgcHJpY2U6IGFwcC51cGRhdGFEYXRhLnByaWNlLnNwbGl0KCcsJylcclxuICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgYXBwLm9wdGlvbkRhdGFzID0gW107XHJcblxyXG4gICAgICAgICAgIGZvcihpPTA7IGkgPCBzcGxpdE9wdGlvbkRhdGFzLmtpbmQubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgYXBwLm9wdGlvbkRhdGFzW2ldID0ge1xyXG4gICAgICAgICAgICAgICBraW5kOiBzcGxpdE9wdGlvbkRhdGFzLmtpbmRbaV0sXHJcbiAgICAgICAgICAgICAgIHByaWNlOiAgc3BsaXRPcHRpb25EYXRhcy5wcmljZVtpXSxcclxuICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgfVxyXG5cclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgICAgIH1cclxuICAgfSk7XHJcblxyXG4gICB0aGlzLnVwZGF0ZVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAudXBkYXRlRGF0YSA9IGRhdGE7XHJcbiAgICAgYXBwLnVwZGF0ZURhdGEuY2F0ZWdvcnlfaWQgPSBhcHAuZGF0YS5zZWxlY3RlZE9wdGlvbi5pZDtcclxuICAgICBBZG1pbi51cGRhdGVVcGRhdGVUeXBlKGFwcC51cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICAgdGhpcy51cGRhdGVpdGVtVHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIHZhciBraW5kQXJyYXkgPSBbXTtcclxuICAgICB2YXIgcHJpY2VBcnJheSA9IFtdO1xyXG4gICAgIGZvcihpPTA7aTxhcHAub3B0aW9uRGF0YXMubGVuZ3RoO2krKyl7XHJcbiAgICAgICBraW5kQXJyYXkucHVzaChhcHAub3B0aW9uRGF0YXNbaV0ua2luZCk7XHJcbiAgICAgICBwcmljZUFycmF5LnB1c2goYXBwLm9wdGlvbkRhdGFzW2ldLnByaWNlKTtcclxuICAgICB9XHJcbiAgICAgdmFyIHVwZGF0ZURhdGEgPSB7XHJcbiAgICAgICBpdGVtX2lkOiBkYXRhLml0ZW1faWQsXHJcbiAgICAgICBpdGVtX25hbWU6IGRhdGEuaXRlbV9uYW1lLFxyXG4gICAgICAgcHJpY2U6IHByaWNlQXJyYXkudG9TdHJpbmcoKSxcclxuICAgICAgIGtpbmQ6IGtpbmRBcnJheS50b1N0cmluZygpXHJcbiAgICAgfTtcclxuXHJcbiAgICAgQWRtaW4udXBkYXRlSXRlbVR5cGUodXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuXHJcbiAgICAgICB9XHJcbiAgICAgfSk7XHJcbiAgIH07XHJcblxyXG5cclxuXHJcbn0pXHJcblxyXG4uY29udHJvbGxlcigncmVhZEl0ZW1UeXBlQ3RybCcsIGZ1bmN0aW9uKEFkbWluLCAkc3RhdGUsICR3aW5kb3csIE1lbnUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgYXBwLmRhdGEgPSB7XHJcbiAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgIF0sXHJcbiAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgIH07XHJcblxyXG5cclxuICAgICB0aGlzLmNvcHlJdGVtVHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG5cclxuICAgICAgIHZhciBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgdHlwZTogZGF0YS5pdGVtX3R5cGVfaWQsXHJcbiAgICAgICAgIHRpdGxlOiBkYXRhLml0ZW1fbmFtZSxcclxuICAgICAgICAga2luZDogZGF0YS5raW5kLnRvU3RyaW5nKCksXHJcbiAgICAgICAgIHByaWNlOiBkYXRhLnByaWNlLnRvU3RyaW5nKClcclxuXHJcbiAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgIEFkbWluLmNyZWF0ZUl0ZW0oaXRlbURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4gICB0aGlzLmRlbGV0ZVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICB2YXIgaXRlbV9pZCA9IGRhdGEuaXRlbV9pZDtcclxuICAgICBBZG1pbi5kZWxldGVJdGVtKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG5cclxuLy8g7IOB7ZKIIOu2hOulmO2RnFxyXG4gIEFkbWluLnJlYWRJdGVtVHlwZSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYXBwLnR5cGVEYXRhcyA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgIHZhciBraW5kRGF0YXMgPSBbXTtcclxuXHJcbiAgICAgIGZvcih2YXIgaT0wOyBpPGRhdGEuZGF0YS5yZXN1bHQubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAga2luZERhdGFzW2ldID0ge1xyXG4gICAgICAgICAgICAgIGtpbmQ6IGFwcC50eXBlRGF0YXNbaV0ua2luZC5zcGxpdCgnLCcpLFxyXG4gICAgICAgICAgICAgIHByaWNlOiBhcHAudHlwZURhdGFzW2ldLnByaWNlLnNwbGl0KCcsJylcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBhcHAudHlwZURhdGFzW2ldLmtpbmQgPSBraW5kRGF0YXNbaV0ua2luZDtcclxuICAgICAgICAgIGFwcC50eXBlRGF0YXNbaV0ucHJpY2UgPSBraW5kRGF0YXNbaV0ucHJpY2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgIH1cclxuICB9KTtcclxufSlcclxuXHJcblxyXG4vLyDsg4Htkogg67aE66WY7ZGcXHJcbi5jb250cm9sbGVyKCd1cGRhdGVUeXBlQ3RybCcsIGZ1bmN0aW9uKCRzdGF0ZVBhcmFtcywgTWVudSwgQWRtaW4sICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgdmFyIGl0ZW1fdHlwZSA9ICRzdGF0ZVBhcmFtcy5pdGVtX3R5cGU7XHJcbiAgYXBwLmRhdGEgPSB7XHJcbiAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgIF0sXHJcbiAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgfTtcclxuXHJcbiAgIEFkbWluLnJlYWRVcGRhdGVUeXBlKGl0ZW1fdHlwZSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgTWVudS5yZWFkTWFpbk1lbnUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0ubmFtZSxcclxuICAgICAgICAgICAgICAgICBpZDogdHlwZVtpXS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICAgICAgIGFwcC51cGRhdGFEYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICBhcHAuZGF0YS5zZWxlY3RlZE9wdGlvbiA9IHtcclxuICAgICAgICAgICAgIGlkIDogYXBwLnVwZGF0YURhdGEuY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICB9O1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgfVxyXG4gICB9KTtcclxuXHJcbiAgIHRoaXMudXBkYXRlVHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGFwcC51cGRhdGVEYXRhID0gZGF0YTtcclxuICAgICBhcHAudXBkYXRlRGF0YS5jYXRlZ29yeV9pZCA9IGFwcC5kYXRhLnNlbGVjdGVkT3B0aW9uLmlkO1xyXG4gICAgIEFkbWluLnVwZGF0ZVVwZGF0ZVR5cGUoYXBwLnVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSk7XHJcbiAgIH07XHJcbn0pXHJcblxyXG4vLyDsg4Htkogg67aE66WY7ZGcXHJcbi5jb250cm9sbGVyKCdyZWFkVHlwZUN0cmwnLCBmdW5jdGlvbihBZG1pbiwgJHN0YXRlLCAkd2luZG93LCBNZW51KXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICAgIGFwcC5kYXRhID0ge1xyXG4gICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICBdLFxyXG4gICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICB9O1xyXG5cclxuICAgIHRoaXMuY29weVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgdmFyIHR5cGVEYXRhID0ge1xyXG4gICAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5X2lkLFxyXG4gICAgICAgIHR5cGVfZGVzY3JpcHRpb246IGRhdGEudHlwZV9kZXNjcmlwdGlvbixcclxuICAgICAgICB0eXBlX2NvZGU6IGRhdGEudHlwZV9jb2RlXHJcbiAgICAgIH07XHJcbiAgICAgIEFkbWluLmNyZWF0ZVR5cGUodHlwZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICB0aGlzLmRlbGV0ZVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICB2YXIgaXRlbV90eXBlX2lkID0gZGF0YS5pdGVtX3R5cGU7XHJcbiAgICAgQWRtaW4uZGVsZXRlVHlwZShpdGVtX3R5cGVfaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG5cclxuLy8g7IOB7ZKIIOu2hOulmO2RnFxyXG4gIEFkbWluLnJlYWRUeXBlKCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgTWVudS5yZWFkTWFpbk1lbnUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0ubmFtZSxcclxuICAgICAgICAgICAgICBpZDogdHlwZVtpXS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBhcHAudHlwZURhdGFzID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgIH1cclxuICB9KTtcclxufSlcclxuXHJcbi8vIOyDge2SiCDrtoTrpZjtkZxcclxuLmNvbnRyb2xsZXIoJ2NyZWF0ZVR5cGVDdHJsJywgZnVuY3Rpb24oQWRtaW4sICRzdGF0ZSwgTWVudSwgJHdpbmRvdyl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgYXBwLmRhdGEgPSB7XHJcbiAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgIF0sXHJcbiAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgfTtcclxuXHJcbiAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICBuYW1lOiB0eXBlW2ldLm5hbWUsXHJcbiAgICAgICAgICAgaWQ6IHR5cGVbaV0uY2F0ZWdvcnlfaWRcclxuICAgICAgICAgfTtcclxuICAgICAgIH1cclxuICAgICB9IGVsc2Uge1xyXG4gICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgfVxyXG4gICB9KTtcclxuXHJcblxyXG4gIHRoaXMuY3JlYXRlVHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBhcHAudHlwZURhdGEgPSB7XHJcbiAgICAgIGNhdGVnb3J5OiBhcHAuZGF0YS5zZWxlY3RlZE9wdGlvbi5pZCxcclxuICAgICAgdHlwZV9kZXNjcmlwdGlvbjogZGF0YS50eXBlX2Rlc2NyaXB0aW9uLFxyXG4gICAgICB0eXBlX2NvZGU6IGRhdGEudHlwZV9jb2RlXHJcbiAgICB9O1xyXG5cclxuICAgIEFkbWluLmNyZWF0ZVR5cGUoYXBwLnR5cGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgYXBwLnN1Y2Nlc3MgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBhcHAua2luZExpc3QgPSBbXTtcclxuICBhcHAudHlwZV90aW55ID0gW107XHJcbiAgYXBwLnR5cGVfcHJpY2UgPSBbXTtcclxuXHJcbiAgdGhpcy5hZGRMaW5lID0gZnVuY3Rpb24oa2luZERhdGEpe1xyXG4gICAgaWYoIWtpbmREYXRhKXtcclxuICAgICAgJHdpbmRvdy5hbGVydCgn7KCV7ZmV7ZWcIOqwkuydhCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZihraW5kRGF0YS5raW5kVmFsdWUgPT09IG51bGwgfHwga2luZERhdGEua2luZFZhbHVlID09PSB1bmRlZmluZWQgfHwga2luZERhdGEua2luZFZhbHVlID09PSAnJylcclxuICAgICAge1xyXG4gICAgICAgICR3aW5kb3cuYWxlcnQoJ+yYteyFmOuqheydhCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgIH0gZWxzZSBpZihraW5kRGF0YS5raW5kUHJpY2UgPT09IG51bGwgfHwga2luZERhdGEua2luZFByaWNlID09PSB1bmRlZmluZWQgfHwga2luZERhdGEua2luZFByaWNlID09PSAnJyl7XHJcbiAgICAgICAgJHdpbmRvdy5hbGVydCgn7Ji17IWYIOqwgOqyqeydhCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLmtpbmRMaXN0LnB1c2goXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGtpbmQ6IGtpbmREYXRhLmtpbmRWYWx1ZSxcclxuICAgICAgICAgICAgcHJpY2U6IGtpbmREYXRhLmtpbmRQcmljZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYXBwLnR5cGVfdGlueS5wdXNoKGtpbmREYXRhLmtpbmRWYWx1ZSk7XHJcbiAgICAgICAgYXBwLnR5cGVfcHJpY2UucHVzaChraW5kRGF0YS5raW5kUHJpY2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnbWFpbkNvbnRyb2xsZXJzJyxbJ2F1dGhTZXJ2aWNlcycsICd1c2VyU2VydmljZXMnXSlcclxuLmNvbnRyb2xsZXIoJ21haW5DdHJsJywgZnVuY3Rpb24oQXV0aCwgJHRpbWVvdXQsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkc2NvcGUsICR3aW5kb3csICRpbnRlcnZhbCwgVXNlciwgQXV0aFRva2VuKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICBhcHAubG9hZG1lID0gZmFsc2U7XHJcbiAgJHNjb3BlLiRvbignTE9BRCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kb24oJ1VOTE9BRCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG4gIH0pO1xyXG5cclxuICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbigpe1xyXG4gICAgaWYoIWNoZWNrU2Vzc2lvbikge1xyXG4gICAgICBjaGVja1Nlc3Npb24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmKEF1dGguaXNMb2dnZWRJbigpKXtcclxuICAgICAgICBhcHAuaXNMb2dnZWRJbiA9IHRydWU7XHJcbiAgICAgICAgYXBwLmxvYWRtZSA9IHRydWU7XHJcbiAgICAgICAgQXV0aC5nZXRVc2VyKCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIGFwcC51c2VyID0gZGF0YS5kYXRhO1xyXG4gICAgICAgICAgYXBwLmxvYWRtZSA9IHRydWU7XHJcbiAgICAgICAgICBVc2VyLmdldFBlcm1pc3Npb24oKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnBlcm1pc3Npb24gPT09ICdhZG1pbicpe1xyXG4gICAgICAgICAgICAgICAgYXBwLmF1dGhvcml6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYXBwLmxvYWRtZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKGRhdGEuZGF0YS5wZXJtaXNzaW9uID09PSAnYXJ0aXN0Jyl7XHJcbiAgICAgICAgICAgICAgICBhcHAucGVybWlzc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBhcHAubG9hZG1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXBwLnBlcm1pc3Npb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGFwcC5hdXRob3JpemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhcHAubG9hZG1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYXBwLnBlcm1pc3Npb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICBhcHAuYXV0aG9yaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAudXNlciA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5pc0xvZ2dlZEluID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmxvYWRtZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdmFyIGNoZWNrU2Vzc2lvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICBpZihBdXRoLmlzTG9nZ2VkSW4oKSl7XHJcbiAgICAgIGFwcC5jaGVja1Nlc3Npb24gPSB0cnVlO1xyXG4gICAgICB2YXIgaW50ZXJ2YWwgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgdG9rZW4gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpO1xyXG4gICAgICAgIGlmKHRva2VuID09PSBudWxsKXtcclxuICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoaW50ZXJ2YWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxmLnBhcnNlSnd0ID0gZnVuY3Rpb24odG9rZW4pe1xyXG4gICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcclxuICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKCctJywnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSgkd2luZG93LmF0b2IoYmFzZTY0KSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgdmFyIGV4cGlyZVRpbWUgPSBzZWxmLnBhcnNlSnd0KHRva2VuKTtcclxuICAgICAgICAgIHZhciB0aW1lU3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcclxuICAgICAgICAgIHZhciB0aW1lQ2hlY2sgPSBleHBpcmVUaW1lLmV4cCAtIHRpbWVTdGFtcDtcclxuXHJcbiAgICAgICAgICBpZih0aW1lQ2hlY2sgPD0gNSl7XHJcbiAgICAgICAgICAgIHNob3dNb2RhbCgnZXhwaXJlZCcpO1xyXG4gICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKGludGVydmFsKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAyMDAwKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjaGVja1Nlc3Npb24oKTtcclxuXHJcblxyXG4gICAgYXBwLnJlbmV3U2Vzc2lvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgIGFwcC5jaG9pY2VNYWRlID0gdHJ1ZTtcclxuICAgICAgVXNlci5yZW5ld1Nlc3Npb24oYXBwLnVzZXIudXNlcm5hbWUpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgQXV0aFRva2VuLnNldFRva2VuKGRhdGEuZGF0YS50b2tlbik7XHJcbiAgICAgICAgICBjaGVja1Nlc3Npb24oKTtcclxuICAgICAgICAgIGhpZGVNb2RhbCgnZXhwaXJlZCcpO1xyXG4gICAgICAgIH0gZWxzZXtcclxuICAgICAgICAgIGFwcC5Nb2RhbEJvZHkgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgIGhpZGVNb2RhbCgnZXhwaXJlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGFwcC5lbmRTZXNzaW9uID0gZnVuY3Rpb24oKXtcclxuICAgICAgYXBwLmNob2ljZU1hZGUgPSB0cnVlO1xyXG4gICAgICBoaWRlTW9kYWwoJ2V4cGlyZWQnKTtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICBzaG93TW9kYWwoJ2xvZ291dCcpO1xyXG4gICAgICB9LDUwMCk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgdmFyIHNob3dNb2RhbCA9IGZ1bmN0aW9uKG9wdGlvbil7XHJcbiAgICBhcHAuY2hvaWNlTWFkZSA9IGZhbHNlO1xyXG4gICAgYXBwLm1vZGFsSGVhZGVyID0gdW5kZWZpbmVkO1xyXG4gICAgYXBwLm1vZGFsQm9keSA9IHVuZGVmaW5lZDtcclxuICAgIGFwcC5oaWRlQnV0dG9uID0gZmFsc2U7XHJcbi8vIGNoZWNrIHRva2VuIGV4cGlyZWRcclxuICAgIGlmKG9wdGlvbiA9PT0gICdleHBpcmVkJyApe1xyXG4gICAgICBhcHAubW9kYWxIZWFkZXIgPSAnVGltZW91dCBXYXJuaW5nJztcclxuICAgICAgYXBwLm1vZGFsQm9keSA9ICdZb3VyIHNlc3Npb24gd2lsbCBleHBpcmVkIGluIDUgbWludXRlcy4gV291bGQgeW91IGxpa2UgdG8gcmVuZXcgeW91ciBzZXNzaW9uPyc7XHJcbiAgICAgICQoXCIjbXlNb2RhbFwiKS5tb2RhbCh7YmFja2Ryb3A6XCJzdGF0aWNcIn0pO1xyXG4gICAgfSBlbHNlIGlmKG9wdGlvbiA9PT0gJ2xvZ291dCcpe1xyXG4vLyBsb2dvdXRcclxuICAgICAgYXBwLmhpZGVCdXR0b24gPSB0cnVlO1xyXG4gICAgICBhcHAubW9kYWxIZWFkZXIgPSAn66Gc6re47JWE7JuDJztcclxuICAgICAgJChcIiNteU1vZGFsXCIpLm1vZGFsKHtiYWNrZHJvcDpcInN0YXRpY1wifSk7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgQXV0aC5sb2dvdXQoKTtcclxuICAgICAgICBhcHAuaXNMb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5hdXRob3JpemVkID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLnBlcm1pc3Npb24gPSBmYWxzZTtcclxuICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBoaWRlTW9kYWwoJ2xvZ291dCcpO1xyXG4gICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9IGVsc2UgaWYob3B0aW9uID09PSAnbG9naW4nKXtcclxuLy8gTG9naW5cclxuICAgICAgJChcIiNsb2dpblwiKS5tb2RhbCh7YmFja2Ryb3A6XCJzdGF0aWNcIn0pO1xyXG4gICAgfVxyXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgIGlmKCFhcHAuY2hvaWNlTWFkZSl7XHJcbiAgICAgICAgICBoaWRlTW9kYWwoJ2xvZ291dCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMjAwMCk7XHJcblxyXG4gIH07XHJcblxyXG4gIHZhciBoaWRlTW9kYWwgPSBmdW5jdGlvbihvcHRpb24pe1xyXG5cclxuICAgIGlmKG9wdGlvbiA9PT0gJ2V4cGlyZWQnKXtcclxuICAgICAgJChcIiNteU1vZGFsXCIpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICB9IGVsc2UgaWYob3B0aW9uID09PSAnbG9nb3V0Jyl7XHJcbiAgICAgICQoXCIjbXlNb2RhbFwiKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgfSBlbHNlIGlmKG9wdGlvbiA9PT0gJ2xvZ2luJyl7XHJcbiAgICAgICQoXCIjbG9naW5cIikubW9kYWwoJ2hpZGUnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbi8vIOuhnOq3uOyduFxyXG4gIHRoaXMuZG9Mb2dpbiA9IGZ1bmN0aW9uKGxvZ2luRGF0YSwgdmFsaWQpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBhcHAuZXhwaXJlZCA9IGZhbHNlO1xyXG4gICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICBpZih2YWxpZCl7XHJcbiAgICAgIEF1dGgubG9naW4oYXBwLmxvZ2luRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgYXBwLmxvZ2luRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIGFwcC5pc0xvZ2dlZEluID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2hlY2tTZXNzaW9uKCk7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgICAgICB9LDEwMDApO1xyXG4gICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgIGlmKGRhdGEuZGF0YS5leHBpcmVkKXtcclxuICAgICAgICAgICAgYXBwLmV4cGlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7IC8vIElmIGVycm9yIG9jY3VycywgcmVtb3ZlIGRpc2FibGUgbG9jayBmcm9tIGZvcm1cclxuICAgICAgYXBwLmxvYWRpbmcgPSBmYWxzZTsgLy8gU3RvcCBib290c3RyYXAgbG9hZGluZyBpY29uXHJcbiAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7KCV67O066W8IOyeheugpe2VtOyjvOyEuOyalC4nOyAvLyBEaXNwbGF5IGVycm9yIGlmIHZhbGlkIHJldHVybnMgZmFsc2VcclxuICAgIH1cclxuXHJcbiAgfTtcclxuXHJcblxyXG4gIGFwcC5sb2dvdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgc2hvd01vZGFsKCdsb2dvdXQnKTtcclxuICB9O1xyXG5cclxuICBhcHAucmVzZW5kID0gZnVuY3Rpb24oKXtcclxuICAgIGhpZGVNb2RhbCgnbG9naW4nKTtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICRzdGF0ZS5nbygncmVzZW5kJyk7XHJcbiAgICAgIGFwcC5leHBpcmVkID0gZmFsc2U7XHJcbiAgICB9LDUwMCk7XHJcbiAgfTtcclxuXHJcbiAgYXBwLnJlc2V0dXNlcm5hbWUgPSBmdW5jdGlvbigpe1xyXG4gICAgaGlkZU1vZGFsKCdsb2dpbicpO1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgJHN0YXRlLmdvKCdyZXNldHVzZXJuYW1lJyk7XHJcbiAgICB9LDUwMCk7XHJcbiAgfTtcclxuXHJcbiAgYXBwLnJlc2V0cGFzc3dvcmQgPSBmdW5jdGlvbigpe1xyXG4gICAgaGlkZU1vZGFsKCdsb2dpbicpO1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgJHN0YXRlLmdvKCdyZXNldHBhc3N3b3JkJyk7XHJcbiAgICB9LDUwMCk7XHJcblxyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ29yZGVyQ29udHJvbGxlcnMnLFsnb3JkZXJTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcigncmVhZE9yZGVyQ3RybCcsIGZ1bmN0aW9uICgkc3RhdGVQYXJhbXMsICRzdGF0ZSwgJHdpbmRvdywgT3JkZXIsICRzY29wZSkge1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHZhciB1c2VyX2lkID0gJHNjb3BlLm1haW4udXNlci51c2VyX2lkO1xyXG5cclxuICBhcHAuZ2V0SXRlbUZhaWwgPSBmYWxzZTtcclxuXHJcbiAgYXBwLmNhc2hSZWNlaXB0ID0gdHJ1ZTtcclxuICBpZihhcHAuY2FzaFJlY2VpcHQpe1xyXG4gICAgYXBwLmdldENhc2hSZWNlaXB0ID0gdHJ1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXBwLmdldENhc2hSZWNlaXB0ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuXHJcbiAgdGhpcy5yZWFkQWRkcmVzcyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAvL2xvYWTtlajsiJjrpbwg7J207Jqp7ZWY7JesIGNvcmXsiqTtgazrpr3tirjsnZgg66Gc65Sp7J20IOyZhOujjOuQnCDtm4QsIOyasO2OuOuyiO2YuCDshJzruYTsiqTrpbwg7Iuk7ZaJ7ZWp64uI64ukLlxyXG4gICAgZGF1bS5wb3N0Y29kZS5sb2FkKGZ1bmN0aW9uKCl7XHJcbiAgICAgIGFwcC5hZGRyZXNzRGV0YWlsID0gJyc7XHJcbiAgICAgICAgbmV3IGRhdW0uUG9zdGNvZGUoe1xyXG4gICAgICAgICAgICBvbmNvbXBsZXRlOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgYXBwLmRlbGlEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgc2lndW5ndV9jb2RlOiBkYXRhLnNpZ3VuZ3VDb2RlLFxyXG4gICAgICAgICAgICAgICAgamlidW5fYWRkcmVzczogZGF0YS5qaWJ1bkFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICByb2FkX2FkZHJlc3M6IGRhdGEucm9hZEFkZHJlc3NcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkub3BlbigpO1xyXG4gICAgfSk7XHJcblxyXG4gIH07XHJcblxyXG4gIE9yZGVyLnJlYWRPcmRlckFuZERlbGkoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbi8vIOuTseuhneuQnCDrsLDshqHsp4Ag7KCV67O06rCAIOyXhuydhCDrlYxcclxuICAgICAgaWYoZGF0YS5kYXRhLnJlc3VsdC5sZW5ndGg9PT0wKXtcclxuICAgICAgICBhcHAuZGVsaXZlcnkgPSBmYWxzZTtcclxuICAgICAgICBPcmRlci5yZWFkT3JkZXIodXNlcl9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIHZhciBpdGVtUHJpY2UgPSBbXTtcclxuICAgICAgICAgIGFwcC5hbGxJdGVtUHJpY2UgPSAwO1xyXG4gICAgICAgICAgYXBwLm9yZGVyRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICBmb3IoaT0wOyBpPGFwcC5vcmRlckRhdGEubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBpdGVtUHJpY2VbaV0gPSBhcHAub3JkZXJEYXRhW2ldLnByaWNlICogYXBwLm9yZGVyRGF0YVtpXS5hbW91bnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBmb3IoaT0wO2k8aXRlbVByaWNlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBhcHAuYWxsSXRlbVByaWNlID0gYXBwLmFsbEl0ZW1QcmljZSArIGl0ZW1QcmljZVtpXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4vLyDrk7HroZ3rkJwg67Cw7Iah7KeAIOygleuztOqwgCDsnojsnYQg65WMXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICB2YXIgaXRlbVByaWNlID0gW107XHJcbiAgICAgIGFwcC5kZWxpdmVyeSA9IHRydWU7XHJcbiAgICAgIGFwcC5hbGxJdGVtUHJpY2UgPSAwO1xyXG4gICAgICBhcHAub3JkZXJEYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgZm9yKGk9MDsgaTxhcHAub3JkZXJEYXRhLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBpdGVtUHJpY2VbaV0gPSBhcHAub3JkZXJEYXRhW2ldLnByaWNlICogYXBwLm9yZGVyRGF0YVtpXS5hbW91bnQ7XHJcbiAgICAgIH1cclxuICAgICAgZm9yKGk9MDtpPGl0ZW1QcmljZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICBhcHAuYWxsSXRlbVByaWNlID0gYXBwLmFsbEl0ZW1QcmljZSArIGl0ZW1QcmljZVtpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB0aGlzLmNvbmZpcm1PcmRlciA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4vLyDrk7HroZ3rkJwg67Cw7Iah7KeA6rCAIOyeiOydhCDrlYwgcHV0XHJcbiAgICB2YXIgZGVsaURhdGEgPSAnJztcclxuICAgIHZhciByZWNlaXB0RGF0YSA9ICcnO1xyXG4gICAgaWYoYXBwLmRlbGl2ZXJ5KXtcclxuLy8gICAg67OA6rK97IKs7ZWtIOyXhuydjFxyXG4gICAgICBpZihkYXRhLmRhbGlEYXRhID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfrs4Dqsr3sgqztla0g7JeG7J2MJyk7XHJcbiAgICAgIH1cclxuLy8g67OA6rK97IKs7ZWtIOyeiOydjFxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBkZWxpRGF0YSA9IGRhdGEuZGFsaURhdGE7XHJcbiAgICAgICAgLy8gZGVsaURhdGEudXNlcl9pZCA9IHVzZXJfaWQ7XHJcbiAgICAgICAgT3JkZXIudXBkYXRlRGVsaXZlcnkoZGVsaURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4vLyDrk7HroZ3rkJwg67Cw7Iah7KeA6rCAIOyXhuydhCDrlYwgcG9zdFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGVsaURhdGEgPSBkYXRhLmRhbGlEYXRhO1xyXG4gICAgICByZWNlaXB0RGF0YSA9IGRhdGEucmVjZWlwdERhdGE7XHJcbiAgICAgIE9yZGVyLmNyZWF0ZURlbGl2ZXJ5KGRlbGlEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmRlbGV0ZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICB2YXIgaXRlbV9pZCA9IGRhdGEuaXRlbV9pZDtcclxuICAgIE9yZGVyLmRlbGV0ZU9yZGVyKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIH0pXHJcblxyXG4uY29udHJvbGxlcignYmFza2V0Q3RybCcsIGZ1bmN0aW9uIChPcmRlciwgJHdpbmRvdywgJHN0YXRlKSB7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgYXBwLmFtb3VudCA9IDE7XHJcbiAgYXBwLmRhdGEgPSB7XHJcbiAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICBdLFxyXG4gICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICB9O1xyXG5cclxuICAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICB2YXIgYmFza2V0X2lkID0gZGF0YS5iYXNrZXRfaWQ7XHJcbiAgICAgT3JkZXIuZGVsZXRlQmFza2V0KGJhc2tldF9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG5cclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICB0aGlzLm1ha2VCYXNrZXQgPSBmdW5jdGlvbigpe1xyXG4gIH07XHJcblxyXG4gIE9yZGVyLnJlYWRCYXNrZXQoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIGFwcC5iYXNrZXREYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgdmFyIGk7XHJcbiAgICAgIHZhciBraW5kID0gW107XHJcbiAgICAgIHZhciB0ZW1wID0gW107XHJcbiAgICAgIHZhciBzZWxlY3REYXRhO1xyXG4gICAgICBmb3IoaT0wOyBpIDwgYXBwLmJhc2tldERhdGEubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAga2luZFtpXSA9IGFwcC5iYXNrZXREYXRhW2ldLmtpbmQuc3BsaXQoJywnKTtcclxuICAgICAgICAgIHRlbXBbaV0gPSBhcHAuYmFza2V0RGF0YVtpXS5wcmljZS5zcGxpdCgnLCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IoaT0wOyBpPGtpbmQubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGFwcC5kYXRhW2ldID0ge1xyXG4gICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgXSxcclxuICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm9yKGo9MDtqPGtpbmRbaV0ubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICBhcHAuZGF0YVtpXS5hdmFpbGFibGVPcHRpb25zW2orMV0gPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGtpbmRbaV1bal0sXHJcbiAgICAgICAgICAgIGlkOiBOdW1iZXIodGVtcFtpXVtqXSlcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdlbWFpbENvbnRyb2xsZXJzJyxbJ3VzZXJTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcignZW1haWxDdHJsJywgZnVuY3Rpb24oJHN0YXRlUGFyYW1zLCBVc2VyLCAkdGltZW91dCwgJHN0YXRlKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICBVc2VyLmFjdGl2ZUFjY291bnQoJHN0YXRlUGFyYW1zLnRva2VuKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLnN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtjpjsnbTsp4DroZwg7J2064+Z7ZWp64uI64ukLic7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgfSwyMDAwKTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2UgKyAnLi4u66mU7J24IO2OmOydtOyngOuhnCDsnbTrj5ntlanri4jri6QuJztcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xyXG4gICAgICB9LDIwMDApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3Jlc2VuZEN0cmwnLCBmdW5jdGlvbihVc2VyLCAkdGltZW91dCwgJHN0YXRlKXtcclxuICBhcHAgPSB0aGlzO1xyXG4gIHRoaXMuY2hlY2tDcmVkZW50aWFscyA9IGZ1bmN0aW9uKGxvZ2luRGF0YSl7XHJcbiAgICBhcHAuc3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIFVzZXIuY2hlY2tDcmVkZW50aWFscyh0aGlzLmxvZ2luRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIFVzZXIucmVzZW5kTGluayhhcHAubG9naW5EYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtjpjsnbTsp4DroZwg7J2064+Z7ZWp64uI64ukLic7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgICAgfSwyMDAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3VzZXJuYW1lQ3RybCcsIGZ1bmN0aW9uKFVzZXIsICR0aW1lb3V0LCAkc3RhdGUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHRoaXMuc2VuZFVzZXJuYW1lID0gZnVuY3Rpb24odXNlckRhdGEsIHZhbGlkKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGlmKHZhbGlkKXtcclxuICAgICAgVXNlci5zZW5kVXNlcm5hbWUoYXBwLnVzZXJEYXRhLmVtYWlsKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2UgKyAnLi4u66mU7J24IO2OmOydtOyngOuhnCDsnbTrj5ntlanri4jri6QuJztcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYXBwLmVycm9yTXNnID0gJ+yYrOuwlOuluCDsnbTrqZTsnbwg7KO87IaM6rCAIOyVhOuLmeuLiOuLpC4nO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pXHJcblxyXG4uY29udHJvbGxlcigncGFzc3dvcmRDdHJsJywgZnVuY3Rpb24oVXNlciwgJHRpbWVvdXQsICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgYXBwLnNlbmRQYXNzd29yZCA9IGZ1bmN0aW9uKHJlc2V0RGF0YSwgdmFsaWQpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgaWYodmFsaWQpe1xyXG4gICAgICBVc2VyLnNlbmRQYXNzd29yZChhcHAucmVzZXREYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2UgKyAnLi4u66mU7J24IO2OmOydtOyngOuhnCDsnbTrj5ntlanri4jri6QuJztcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYXBwLmVycm9yTXNnID0gJ+yYrOuwlOuluCDslYTsnbTrlJTqsIAg7JWE64uZ64uI64ukLic7XHJcbiAgICB9XHJcbiAgfTtcclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdyZXNldEN0cmwnLCBmdW5jdGlvbigkc3RhdGVQYXJhbXMsICRzY29wZSwgVXNlciwgJHRpbWVvdXQsICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG4gICAgYXBwLmhpZGUgPSB0cnVlOyAvLyBIaWRlIGZvcm0gdW50aWwgdG9rZW4gY2FuIGJlIHZlcmlmaWVkIHRvIGJlIHZhbGlkXHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gY2hlY2sgaWYgdG9rZW4gaXMgdmFsaWQgYW5kIGdldCB0aGUgdXNlcidzIGluZm8gZnJvbSBkYXRhYmFzZSAocnVucyBvbiBwYWdlIGxvYWQpXHJcbiAgICBVc2VyLnJlc2V0UGFzc3dvcmQoJHN0YXRlUGFyYW1zLnRva2VuKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB1c2VyIHdhcyByZXRyaWV2ZWRcclxuICAgICAgICBpZiAoZGF0YS5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgYXBwLmhpZGUgPSBmYWxzZTsgLy8gU2hvdyBmb3JtXHJcbiAgICAgICAgICAgICRzY29wZS5hbGVydCA9ICdhbGVydCBhbGVydC1zdWNjZXNzJzsgLy8gU2V0IHN1Y2Nlc3MgbWVzc2FnZSBjbGFzc1xyXG4gICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9ICfsg4jroZzsmrQg67mE67CA67KI7Zi466W8IOyeheugpe2VtOyjvOyEuOyalC4nOyAvLyBMZXQgdXNlciBrbm93IHRoZXkgY2FuIGVudGVyIG5ldyBwYXNzd29yZFxyXG4gICAgICAgICAgICAkc2NvcGUudXNlcm5hbWUgPSBkYXRhLmRhdGEudXNlclswXS51c2VybmFtZTsgLy8gU2F2ZSB1c2VybmFtZSBpbiBzY29wZSBmb3IgdXNlIGluIHNhdmVQYXNzd29yZCgpIGZ1bmN0aW9uXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ2FsZXJ0IGFsZXJ0LWRhbmdlcic7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7IC8vIEdyYWIgZXJyb3IgbWVzc2FnZSBmcm9tIEpTT04gb2JqZWN0XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gc2F2ZSB1c2VyJ3MgbmV3IHBhc3N3b3JkIHRvIGRhdGFiYXNlXHJcbiAgICBhcHAuc2F2ZVBhc3N3b3JkID0gZnVuY3Rpb24ocmVnRGF0YSwgdmFsaWQsIGNvbmZpcm1lZCkge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlOyAvLyBDbGVhciBlcnJvck1zZyB3aGVuIHVzZXIgc3VibWl0c1xyXG4gICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTsgLy8gRGlzYWJsZSBmb3JtIHdoaWxlIHByb2Nlc3NpbmdcclxuICAgICAgICBhcHAubG9hZGluZyA9IHRydWU7IC8vIEVuYWJsZSBsb2FkaW5nIGljb25cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgZm9ybSBpcyB2YWxpZCBhbmQgcGFzc3dvcmRzIG1hdGNoXHJcbiAgICAgICAgaWYgKHZhbGlkICYmIGNvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICBhcHAucmVnRGF0YS51c2VybmFtZSA9ICRzY29wZS51c2VybmFtZTsgLy8gR3JhYiB1c2VybmFtZSBmcm9tICRzY29wZVxyXG5cclxuICAgICAgICAgICAgLy8gUnVuIGZ1bmN0aW9uIHRvIHNhdmUgdXNlcidzIG5ldyBwYXNzd29yZCB0byBkYXRhYmFzZVxyXG4gICAgICAgICAgICBVc2VyLnNhdmVQYXNzd29yZChhcHAucmVnRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBhcHAubG9hZGluZyA9IGZhbHNlOyAvLyBTdG9wIGxvYWRpbmcgaWNvblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcGFzc3dvcmQgd2FzIHNhdmVkIHRvIGRhdGFiYXNlXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxlcnQgPSAnYWxlcnQgYWxlcnQtc3VjY2Vzcyc7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtmZTrqbTsnLzroZwg7J2064+Z7ZWp64uI64ukLic7IC8vIEdyYWIgc3VjY2VzcyBtZXNzYWdlIGZyb20gSlNPTiBvYmplY3QgYW5kIHJlZGlyZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVkaXJlY3QgdG8gbG9naW4gcGFnZSBhZnRlciAyMDAwIG1pbGxpc2Vjb25kcyAoMiBzZWNvbmRzKVxyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ2FsZXJ0IGFsZXJ0LWRhbmdlcic7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTsgLy8gRW5hYmxlIGZvcm0gdG8gYWxsb3cgdXNlciB0byByZXN1Ym1pdFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlOyAvLyBHcmFiIGVycm9yIG1lc3NhZ2UgZnJvbSBKU09OIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuYWxlcnQgPSAnYWxlcnQgYWxlcnQtZGFuZ2VyJzsgLy8gU2V0IHN1Y2Nlc3MgbWVzc2FnZSBjbGFzc1xyXG4gICAgICAgICAgICBhcHAubG9hZGluZyA9IGZhbHNlOyAvLyBTdG9wIGxvYWRpbmcgaWNvblxyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTsgLy8gRW5hYmxlIGZvcm0gdG8gYWxsb3cgdXNlciB0byByZXN1Ym1pdFxyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSAn7Jis67CU66W4IOygleuztOulvCDsnoXroKXtlbTso7zshLjsmpQuJzsgLy8gTGV0IHVzZXIga25vdyBmb3JtIGlzIG5vdCB2YWxpZFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgndXNlckNvbnRyb2xsZXJzJyxbJ3VzZXJTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcigncmVnQ3RybCcsIGZ1bmN0aW9uICggJGh0dHAsICRsb2NhdGlvbiwgJHRpbWVvdXQsIFVzZXIsIEF1dGgsICRzdGF0ZSkge1xyXG4gICAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG4gICAgICB0aGlzLnJlZ1N0ZXAxID0gZnVuY3Rpb24ocmVnRGF0YSl7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgaWYoIXJlZ0RhdGEpe1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gJ+yVveq0gOyXkCDrj5nsnZjtlbTslbzrp4wg7ZqM7JuQ6rCA7J6F7J2EIOynhO2Wie2VoCDsiJgg7J6I7Iq164uI64ukLic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmKChyZWdEYXRhLnRlcm1zKSAmJiAocmVnRGF0YS5wcml2YWN5KSkge1xyXG4gICAgICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSAn7JW96rSA7JeQIOyEseqzteyggeycvOuhnCDrj5nsnZjtlZjshajsirXri4jri6QuJztcclxuICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5yZWdpc3RlclN0ZXAyJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gJ+yVveq0gOyXkCDrj5nsnZjtlbTslbzrp4wg7ZqM7JuQ6rCA7J6F7J2EIOynhO2Wie2VoCDsiJgg7J6I7Iq164uI64ukLic7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9O1xyXG5cclxuICAgIC8vIO2ajOybkOqwgOyehVxyXG4gICAgICB0aGlzLnJlZ1N0ZXAyID0gZnVuY3Rpb24ocmVnRGF0YSwgdmFsaWQsIGNvbmZpcm1lZCl7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAkc3RhdGUuZ28oJ2FwcC5yZWdpc3RlclN0ZXAzJyk7XHJcbiAgICAgICAgLy8gaWYodmFsaWQgJiYgY29uZmlybWVkKXtcclxuICAgICAgICAvLyAgIFVzZXIuY3JlYXRlKGFwcC5yZWdEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIC8vICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgLy8gICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIC8vICAgICAgIEF1dGgubG9naW4oYXBwLnJlZ0RhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgLy8gICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgLy8gICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgLy8gICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgICAgLy8gICAgICAgICAgIH0sMTAwMCk7XHJcbiAgICAgICAgLy8gICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgIGlmKGRhdGEuZGF0YS5leHBpcmVkKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZXhwaXJlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAvLyAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAvLyAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgIH0pO1xyXG4gICAgICAgIC8vICAgICB9ZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgIH0pO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlOyAvLyBJZiBlcnJvciBvY2N1cnMsIHJlbW92ZSBkaXNhYmxlIGxvY2sgZnJvbSBmb3JtXHJcbiAgICAgICAgLy8gICAgICBhcHAubG9hZGluZyA9IGZhbHNlOyAvLyBTdG9wIGJvb3RzdHJhcCBsb2FkaW5nIGljb25cclxuICAgICAgICAvLyAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7KCV67O066W8IOyeheugpe2VtOyjvOyEuOyalC4nOyAvLyBEaXNwbGF5IGVycm9yIGlmIHZhbGlkIHJldHVybnMgZmFsc2VcclxuICAgICAgICAvLyB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyDtmozsm5DqsIDsnoVcclxuICAgICAgICB0aGlzLnJlZ1N0ZXAzID0gZnVuY3Rpb24ocmVnRGF0YSwgdmFsaWQsIGNvbmZpcm1lZCl7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICBpZih2YWxpZCAmJiBjb25maXJtZWQpe1xyXG4gICAgICAgICAgICBVc2VyLmNyZWF0ZShhcHAucmVnRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIEF1dGgubG9naW4oYXBwLnJlZ0RhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuZXhwaXJlZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwaXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7IC8vIElmIGVycm9yIG9jY3VycywgcmVtb3ZlIGRpc2FibGUgbG9jayBmcm9tIGZvcm1cclxuICAgICAgICAgICAgICAgYXBwLmxvYWRpbmcgPSBmYWxzZTsgLy8gU3RvcCBib290c3RyYXAgbG9hZGluZyBpY29uXHJcbiAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7KCV67O066W8IOyeheugpe2VtOyjvOyEuOyalC4nOyAvLyBEaXNwbGF5IGVycm9yIGlmIHZhbGlkIHJldHVybnMgZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdjb21wYW55SW50cm9kdWNlJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9tYWluL2NvbXBhbnlJbnRyb2R1Y2UudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdjb21wYW55UHJpdmFjeUluZm9ybWF0aW9uJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIE5hbWVDdHJsID0gdGhpcztcclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL2NvbXBhbnlQcml2YWN5SW5mb3JtYXRpb24udHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdwcml2YWN5JywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9tYWluL3ByaXZhY3kudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCd0ZXJtcycsIFtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogWyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwID0gdGhpcztcclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvbWFpbi90ZXJtcy50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwQ3RybCA9IGN0cmxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ3VzZXJRdWlja01lbnUnLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgTmFtZUN0cmwgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9jb21wYW55SW5mb3JtYXRpb24vdXNlclF1aWNrTWVudS50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2NvbnRlbnQnLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYWluL2NvbnRlbnQudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdmb290ZXInLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL21haW4vZm9vdGVyLnRwbC5odG1sJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHBDdHJsID0gY3RybHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgnaGVhZGVyJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9tYWluL2hlYWRlci50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwQ3RybCA9IGN0cmxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmRpcmVjdGl2ZSgnZmlsZU1vZGVsJyxmdW5jdGlvbigkcGFyc2Upe1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKXtcclxuICAgICAgdmFyIHBhcnNlZEZpbGUgPSAkcGFyc2UoYXR0cnMuZmlsZU1vZGVsKTtcclxuICAgICAgdmFyIHBhcnNlZGZpbGVTZXR0ZXIgPSBwYXJzZWRGaWxlLmFzc2lnbjtcclxuXHJcbiAgICAgIGVsZW1lbnQuYmluZCgnY2hhbmdlJyxmdW5jdGlvbigpe1xyXG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xyXG4gICAgICAgICAgcGFyc2VkZmlsZVNldHRlcihzY29wZSwgZWxlbWVudFswXS5maWxlc1swXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmRpcmVjdGl2ZSgnbWF0Y2gnLGZ1bmN0aW9uKCl7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICBjb250cm9sbGVyOmZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgICAgICRzY29wZS5kb0NvbmZpcm0gPSBmdW5jdGlvbih2YWx1ZXMpe1xyXG5cclxuICAgICAgICAkc2NvcGUuY29uZmlybWVkID0gZmFsc2U7XHJcbiAgICAgICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24oZWxlKXtcclxuICAgICAgICAgIGlmKCRzY29wZS5jb25maXJtID09IGVsZSl7XHJcbiAgICAgICAgICAgICRzY29wZS5jb25maXJtZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuY29uZmlybWVkID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKXtcclxuICAgICAgYXR0cnMuJG9ic2VydmUoJ21hdGNoJywgZnVuY3Rpb24oKXtcclxuICAgICAgICBzY29wZS5tYXRjaGVzID0gSlNPTi5wYXJzZShhdHRycy5tYXRjaCk7XHJcbiAgICAgICAgc2NvcGUuZG9Db25maXJtKHNjb3BlLm1hdGNoZXMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNjb3BlLiR3YXRjaCgnY29uZmlybScsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgc2NvcGUubWF0Y2hlcyA9IEpTT04ucGFyc2UoYXR0cnMubWF0Y2gpO1xyXG4gICAgICAgIHNjb3BlLmRvQ29uZmlybShzY29wZS5tYXRjaGVzKTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pO1xyXG4iXX0=
