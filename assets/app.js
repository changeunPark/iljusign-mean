angular.module("app",["ui.router","ui.bootstrap","menuControllers","userControllers","mainControllers","emailControllers","managementControllers","itemControllers","typeControllers","orderControllers","uiCropper","bannerController","galleryServices","bootstrapLightbox","boardController"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptors")}]);var app=angular.module("app");app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,a){t.otherwise("/"),a.hashPrefix(""),a.html5Mode(!0),e.state("app",{url:"/",views:{"bodyContent@":{templateUrl:"/main/home.html"}}}).state("app.registerStep1",{url:"register/step1",views:{"bodyContent@":{templateUrl:"/users/register/registerStep1.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.registerStep2",{url:"register/step2",views:{"bodyContent@":{templateUrl:"/users/register/registerStep2.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.registerStep3",{url:"register/step3",views:{"bodyContent@app":{templateUrl:"/users/register/registerStep3.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.login",{url:"login",views:{"bodyContent@":{templateUrl:"/users/login/login.html"}}}).state("app.board",{url:"board",views:{"bodyContent@":{templateUrl:"/categoryes/board/home.html"}}}).state("app.writeArticle",{url:"board/writeAtricle",views:{"bodyContent@":{templateUrl:"/categoryes/board/writeArticle.html",controller:"createBoardController",controllerAs:"createBoardCtrl"}}}).state("app.gallery",{url:"gallery",views:{"bodyContent@":{templateUrl:"/categoryes/gallery/home.html"}}}).state("app.user",{url:"user",views:{"bodyContent@":{templateUrl:"/users/partial/user.html"}}}).state("app.commerceDetail",{url:"commerce-detail",views:{"bodyContent@":{templateUrl:"/users/partial/commerceDetail.html"}}}).state("app.basket",{url:"basket",views:{"bodyContent@":{templateUrl:"/users/partial/basket.html",controller:"basketCtrl",controllerAs:"basket"}}}).state("app.category",{url:"category=:category_id",views:{"subMenu@app":{templateUrl:"/menues/subMenu.html",controller:"subMenuCtrl",controllerAs:"subMenu"},"bodyContent@":{templateUrl:"/categoryes/items/home.html",controller:"getTypeItemsCtrl",controllerAs:"getTypeItems"}}}).state("app.category.item_type",{url:"/item_type=:type_code",views:{"bodyContent@":{templateUrl:"/categoryes/items/home.html",controller:"getTypeItemsCtrl",controllerAs:"getTypeItems"}}}).state("app.category.item_type.show",{url:"/item:item_id",views:{"bodyContent@":{templateUrl:"/categoryes/items/item.html",controller:"getTypeItemCtrl",controllerAs:"getTypeItem"}}}).state("app.category.show",{url:"/item:item_id",views:{"bodyContent@":{templateUrl:"/categoryes/items/item.html",controller:"getTypeItemCtrl",controllerAs:"getTypeItem"}}}).state("app.makeOrder",{url:"makeOrder",views:{"bodyContent@":{templateUrl:"/order/makeOrder.html",controller:"readOrderCtrl",controllerAs:"readOrder"}}}).state("app.confirmOrder",{url:"confirmOrder",views:{"bodyContent@":{templateUrl:"/order/confirmOrder.html",controller:"readOrderCtrl",controllerAs:"readOrderCtrl"}}}).state("resetusername",{url:"/resetusername",templateUrl:"/users/reset/username.html",controller:"usernameCtrl",controllerAs:"username"}).state("resetpassword",{url:"/resetpassword",templateUrl:"/users/reset/password.html",controller:"passwordCtrl",controllerAs:"password"}).state("reset",{url:"/reset/:token",templateUrl:"/users/reset/newpassword.html",controller:"resetCtrl",controllerAs:"reset"}).state("activate",{url:"/activate/:token",templateUrl:"/users/activation/activate.html",controller:"emailCtrl",controllerAs:"email"}).state("resend",{url:"/resend",templateUrl:"/users/activation/resend.html",controller:"resendCtrl",controllerAs:"resend"}).state("app.intro",{url:"intro",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/companyIntroduce.tpl.html",authenticated:!1}}}).state("app.terms",{url:"terms",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/terms.tpl.html",authenticated:!1}}}).state("app.privacy",{url:"privacy",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/privacy.tpl.html",authenticated:!1}}}).state("app.adminOrderStatus",{url:"adminOrderStatus",views:{"adminContent@":{templateUrl:"/management/partial/orderStatus.html"}}}).state("app.adminMembers",{url:"adminMembers",views:{"adminContent@":{templateUrl:"/management/partial/members.html"}}}).state("app.adminCategory",{url:"adminCategory",views:{"adminContent@":{templateUrl:"/management/partial/category.html",controller:"mainMenuCtrl",controllerAs:"mainMenu"}}}).state("app.adminTypeAndItems",{url:"adminTypeAndItems",views:{"adminContent@":{templateUrl:"/management/partial/typeAndItems.html"}}}).state("app.adminGallery",{url:"adminGallery",views:{"adminContent@":{templateUrl:"/management/partial/gallery.html",controller:"uploadgalleryCtrl",controllerAs:"uploadGallery"}}}).state("app.adminLaboratory",{url:"adminLaboratory",views:{"adminContent@":{templateUrl:"/directives/admin/adminLaboratory.tpl.html"}}}).state("app.management",{url:"management",views:{"adminContent@app":{templateUrl:"/management/home.html"},"menu@app.management":{templateUrl:"/management/menu.html"}}}).state("app.management.typeAndItems.update",{url:"/updateType:item_type",views:{"contents@app.management":{templateUrl:"/management/partial/update/type.html",controller:"updateTypeCtrl",controllerAs:"updateType"}}}).state("app.management.typeAndItems.updateItemType",{url:"/updateItem:item_id",views:{"contents@app.management":{templateUrl:"/management/partial/update/itemType.html",controller:"updateItemTypeCtrl",controllerAs:"updateItemType"}}}).state("app.management.typeAndItems.updateItem",{url:"/update/item:item_id",views:{"contents@app.management":{templateUrl:"/management/partial/update/item.html",controller:"updateItemCtrl",controllerAs:"updateItem"}}}).state("app.management.typeAndItems.readItem",{url:":item_id",views:{"contents@app.management":{templateUrl:"/management/partial/read/item.html",controller:"readItemCtrl",controllerAs:"readItem"}}})}]),app.run(["$rootScope","User","$state",function(e,t,a){e.$on("$stateChangeStart",function(e,t,a,r,n,i){}),e.$on("$stateChangeError",function(e,t,r,n,i,s){a.go("app")})}]),angular.module("app").directive("adminUsers",[function(){return{restrict:"E",controller:[function(){}],controllerAs:"NameCtrl",templateUrl:"/directives/adminUsers.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("banner",["$http",function(e){return{restrict:"E",controller:[function(){}],controllerAs:"bannerCtrl",templateUrl:"/directives/banner.tpl.html",link:function(t,a,r,n){var i=n;e.get("/api/banner").then(function(e){e.data.success?i.bannerData=e.data.bannerData:console.log("불러오지 못하였습니다.")})}}}]).controller("CarouselCtrl",["$scope",function(e){function t(e){for(var t=0,a=n.length;t<a;t++)n[t].id=e.pop()}function a(){for(var e=[],t=0;t<i;++t)e[t]=t;return r(e)}function r(e){var t,a,r=e.length;if(r)for(;--r;)a=Math.floor(Math.random()*(r+1)),t=e[a],e[a]=e[r],e[r]=t;return e}e.myInterval=2500,e.noWrapSlides=!1,e.active=0;var n=e.slides=[],i=0;e.addSlide=function(){n.length;n.push({image:["/images/items/banner/1.jpg","/images/items/banner/2.jpg","/images/items/banner/3.jpg"][n.length%3],id:i++})},e.randomize=function(){t(a())};for(var s=0;s<3;s++)e.addSlide()}]),angular.module("app").directive("board",["$http",function(e){return{restrict:"E",controller:[function(){}],controllerAs:"boardCtrl",templateUrl:"/directives/board.tpl.html",link:function(t,a,r,n){var i=n;e.get("/api/board").then(function(e){e.data.success&&(i.boardData=e.data.boardData)})}}}]),angular.module("app").directive("galleryContent",["gallery","Lightbox",function(e,t){return{restrict:"E",controller:[function(){}],controllerAs:"galleryCtrl",templateUrl:"/directives/gallery.tpl.html",link:function(a,r,n,i){var s=i;e.getContent().then(function(e){e.data.success?s.galleryData=e.data.galleryData:s.errorMsg=e.data.message}),s.openLightboxModal=function(e){t.openModal(s.galleryData,e)}}}}]).controller("uploadgalleryCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadImage=function(t){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var n=new FormData;n.title=t,n.append("myfile",i.file.upload),a.patch("/api/gallery/",n,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(i.imagePath=t.data.image_path,e.$emit("UNLOAD"),r.alert(t.data.message),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})},this.uploadGallery=function(e){galleryData={thumbUrl:i.imagePath,url:i.imagePath,caption:e},a.post("/api/gallery",galleryData).then(function(e){e.data.success?n.reload():i.errorMsg=e.data.message})}}]),angular.module("app").directive("menuItem",["Menu",function(e){return{restrict:"E",controller:[function(){}],controllerAs:"menuItemCtrl",templateUrl:"/directives/menuItem.tpl.html",link:function(t,a,r,n){var i=n;e.readMainMenu().then(function(e){e.data.success?i.mainMenues=e.data.result:i.errorMsg=e.data.message})}}}]),angular.module("adminServices",[]).factory("Admin",["$http",function(e){return adminFactory={},adminFactory.deleteItem=function(t){return e.delete("/api/item/"+t)},adminFactory.readAristCrop=function(t){return e.post("/api/createCropImage",t)},adminFactory.createAristPhoto=function(t){return e.post("/api/artistProfiles",t)},adminFactory.createItem=function(t){return e.post("/api/item",t)},adminFactory.readItems=function(){return e.get("/api/item")},adminFactory.readItem=function(t){return e.get("/api/item/"+t)},adminFactory.updateItemType=function(t){return e.put("/api/itemType",t)},adminFactory.readUpdateItemType=function(t){return e.get("/api/itemType/"+t)},adminFactory.readItemType=function(){return e.get("/api/itemType")},adminFactory.deleteType=function(t){return e.delete("/api/type/"+t)},adminFactory.readUpdateType=function(t){return e.get("/api/type/"+t)},adminFactory.updateUpdateType=function(t){return e.put("/api/type",t)},adminFactory.createType=function(t){return e.post("/api/type",t)},adminFactory.readType=function(){return e.get("/api/type")},adminFactory}]),angular.module("authServices",[]).factory("Auth",["$http","AuthToken",function(e,t){var a={};return a.getUser=function(){if(t.getToken())return e.post("/api/me");$q.reject({message:"User has no token"})},a.login=function(a){return e.post("/api/authenticate",a).then(function(e){return t.setToken(e.data.token),e})},a.isLoggedIn=function(){return!!t.getToken()},a.logout=function(){t.setToken()},a}]).factory("AuthToken",["$window",function(e){var t={};return t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token",t)},t.getToken=function(){return e.localStorage.getItem("token")},t}]).factory("AuthInterceptors",["AuthToken",function(e){var t={};return t.request=function(t){var a=e.getToken();return a&&(t.headers["x-access-token"]=a),t},t}]),angular.module("galleryServices",[]).factory("gallery",["$http",function(e){return galleryFactory={},galleryFactory.getContent=function(){return e.get("/api/gallery")},galleryFactory}]),angular.module("menuServices",[]).factory("Menu",["$http",function(e){return menuFactory={},menuFactory.deleteMenu=function(t){return e.delete("/api/menu/"+t)},menuFactory.updateMenu=function(t){return e.put("/api/menu/",t)},menuFactory.createMenu=function(t){return e.post("/api/menu",t)},menuFactory.readMainMenu=function(){return e.get("/api/menu")},menuFactory.readSubMenu=function(t){return e.get("/api/menu/"+t)},menuFactory}]),angular.module("orderServices",[]).factory("Order",["$http",function(e){return orderFactory={},orderFactory.updateDelivery=function(t){return e.put("/api/delivery/"+t.user_id,t)},orderFactory.createDelivery=function(t){return e.post("/api/delivery",t)},orderFactory.deleteBasket=function(t){return e.delete("/api/basket/"+t)},orderFactory.readBasket=function(){return e.get("/api/basket")},orderFactory.createBasket=function(t){return e.post("/api/basket",t)},orderFactory.deleteOrder=function(t){return e.delete("/api/makeOrder/"+t)},orderFactory.readOrder=function(t){return e.get("/api/makeOrder/"+t)},orderFactory.readOrderAndDeli=function(){return e.get("/api/makeOrder")},orderFactory.createOrder=function(t){return e.post("/api/makeOrder",t)},orderFactory}]),angular.module("userServices",[]).factory("User",["$http",function(e){return userFactory={},userFactory.getPermission=function(){return e.get("/api/permission")},userFactory.create=function(t){return e.post("/api/users",t)},userFactory.activeAccount=function(t){return e.put("/api/activate/"+t)},userFactory.checkCredentials=function(t){return e.post("/api/resend",t)},userFactory.resendLink=function(t){return e.put("/api/resend",t)},userFactory.sendUsername=function(t){return e.get("/api/resetusername/"+t)},userFactory.sendPassword=function(t){return e.put("/api/resetpassword",t)},userFactory.resetPassword=function(t){return e.get("/api/resetpassword/"+t)},userFactory.savePassword=function(t){return e.put("/api/savepassword",t)},userFactory.renewSession=function(t){return e.get("/api/renewToken/"+t)},userFactory}]),angular.module("bannerController",[]).controller("uploadBannerCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadBanner=function(){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var t=new FormData;t.append("myfile",i.file.upload),a.post("/api/banner/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(e.$emit("UNLOAD"),r.alert(t.data.message),n.reload(),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})}}]).controller("getBannerCtrl",["$http",function(e){var t=this;e.get("/api/banner").then(function(e){e.data.success?t.bannerData=e.data.bannerData:console.log("불러오지 못하였습니다.")})}]),angular.module("itemControllers",["orderServices"]).filter("sumByKey",function(){return function(e,t){var a=e instanceof Array?e.length:0;if(void 0===t||0===a)return a;for(var r=0;a--;)r+=e[a][t[0]]*e[a][t[1]];return r}}).controller("getTypeItemsCtrl",["$stateParams","$http",function(e,t){var a=this,r=e.category_id;if(e.type_code){var n=e.type_code;t.get("/api/item_type/"+r,{params:{type_code:n}}).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}else t.get("/api/item_type/"+r).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}]).controller("getTypeItemCtrl",["Admin","$stateParams","$window","$state","Order",function(e,t,a,r,n){var s=this,o=t.item_id;s.optionItem=!1,s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,s.optionList=[],this.addItem=function(e){0===e.id?a.alert("옵션을 선택해주세요."):(s.optionItem=!0,s.optionList.push({kind:e.name,price:e.id,amount:1}))},this.createBasket=function(e){var t={item_id:e.item_id};n.createBasket(t).then(function(e){e.data.success,a.alert(e.data.message)})},this.createOrder=function(e){var t={item_id:e.item_id,amount:e.amount,kind_of:e.kind_of,price:e.price};n.createOrder(t).then(function(e){e.data.success?(s.successMsg=e.data.message,r.go("app.makeOrder")):s.errorMsg=e.data})},e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]),angular.module("managementControllers",["adminServices","menuServices","orderServices"]).controller("readItemsCtrl",["Admin","$state",function(e,t){var a=this;e.readItems().then(function(e){a.errorMsg=!1,e.data.success?a.itemsData=e.data.result:a.errorMsg=e.data.message}),this.deleteItem=function(r){a.errorMsg=!1;var n=r.item_id;e.deleteItem(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("readItemCtrl",["Admin","$stateParams","$scope","Order","$window",function(e,t,a,r,n){var s=this,o=t.item_id;s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,s.data.selectedOption={id:r[0]},i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]).controller("updateItemCtrl",["Admin","$stateParams","$scope","$http","$timeout","$state","$window","Menu",function(e,t,a,r,n,s,o,d){function l(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var c=this,u=t.item_id;c.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},d.readMainMenu().then(function(e){if(c.errorMsg=!1,e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)c.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else c.errorMsg=e.data.message}),this.readMenu=function(e){if(c.errorMsg=!1,c.readMenuStatus=!1,0===e.id)o.alert("카테고리를 선택해주세요.");else{var t=e.id;r.get("/api/menu/"+t).then(function(e){if(e.data.success)if(0===e.data.result.length)c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},o.alert("등록된 상품이 없습니다.");else{c.readMenuStatus=!0,c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)c.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}else c.errorMsg=e.data.message})}},e.readItem(u).then(function(e){console.log(e),e.data.success?(c.itemData=e.data.result,c.data.selectedOption={id:c.itemData.category_id}):c.errorMsg=e.data.message}),this.updateItem=function(e){if(c.errorMsg=!1,c.readMenuStatus)if(0===e.item_type||"0"===e.item_type)o.alert("상품 분류를 선택해주세요.!");else{var t={type:e.item_type,item_name:e.item_name};r.put("/api/item/"+u,t).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})}else updateData2={type:c.itemData.item_type_id,item_name:e.item_name},r.put("/api/item/"+u,updateData2).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.mainThumbnail={},c.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),c.mainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoImage/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.mainPhoto=!0,c.disabled=!1;var t={image:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.explainThumbnail={},c.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),c.explainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoExplain/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.explainPhoto=!0,c.disabled=!1;var t={explain:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},c.myImage="",c.myCroppedImage="";var m=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),c.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",m),this.readCropImage=function(t){if(a.$emit("LOAD"),c.thumbnail=!1,c.disabled=!0,""===t.base64Url||null===t.base64Url||void 0===t.base64Url)c.disabled=!1;else{a.$emit("UNLOAD");var n=l(a.myCroppedImage);e.readAristCrop(n).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.thumbnail=!0,c.disabled=!1;var t={thumbnail:e.data.filePath};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)})}else a.$emit("UNLOAD"),c.disabled=!1})}}}]).controller("createItemCtrl",["$http","$timeout","$scope","Admin","$state","$window","Menu",function(e,t,a,r,n,s,o){function d(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var l=this;l.kindList=[],l.type_tiny=[],l.type_price=[],this.addLine=function(e){e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?s.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?s.alert("옵션 가격을 입력해주세요."):(l.kindList.push({kind:e.kindValue,price:e.kindPrice}),l.type_tiny.push(e.kindValue),l.type_price.push(e.kindPrice)):s.alert("정확한 값을 입력해주세요.")},l.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},l.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},o.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)l.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else l.errorMsg=e.data.message}),this.readMenu=function(t){if(0===t.id)s.alert("카테고리를 선택해주세요.");else{var a=t.id;e.get("/api/menu/"+a).then(function(e){if(e.data.success)if(0===e.data.result.length)l.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},s.alert("등록된 상품이 없습니다.");else{l.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)l.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}})}},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),l.mainThumbnail={},l.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),l.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),l.mainPhoto=!1,l.disabled=!0;var t=new FormData;t.append("myfile",l.file.upload),e.post("/api/createPhotoImage/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),l.mainPhoto=!0,l.disabled=!1,l.mainImagePath=e.data.item_path,l.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),l.disabled=!1,l.file={})})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),l.explainThumbnail={},l.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),l.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),l.explainPhoto=!1,l.disabled=!0;var t=new FormData;t.append("myfile",l.file.upload),e.post("/api/createPhotoExplain/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),l.explainPhoto=!0,l.disabled=!1,l.explainImagePath=e.data.item_path,l.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),l.disabled=!1,l.file={})})},l.myImage="",l.myCroppedImage="";var c=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),l.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",c),this.readCropImage=function(e){if(a.$emit("LOAD"),l.thumbnail=!1,l.disabled=!0,""===e.base64Url||null===e.base64Url||void 0===e.base64Url)l.disabled=!1;else{a.$emit("UNLOAD");var t=d(a.myCroppedImage);r.readAristCrop(t).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),l.thumbnail=!0,l.disabled=!1,l.thumbnailPath=e.data.filePath):(a.$emit("UNLOAD"),l.disabled=!1)})}},this.createPhoto=function(e){a.$emit("LOAD"),void 0===e||null===e||""===e?(s.alert("빈칸을 모두 입력해주세요."),l.disabled=!1,a.$emit("UNLOAD")):"0"===l.data2.selectedOption.id?(a.$emit("UNLOAD"),l.disabled=!1,s.alert("상품 분류을 선택해주세요.")):void 0===e.title||null===e.title||""===e.title?(a.$emit("UNLOAD"),l.disabled=!1,s.alert("상품 제목를 입력해주세요.")):(l.uploadData={title:e.title,type:l.data2.selectedOption.id,kind:l.type_tiny.toString(),price:l.type_price.toString()},r.createItem(l.uploadData).then(function(e){e.data.success?(a.$emit("UNLOAD"),l.disabled=!0,s.alert(e.data.message),n.reload()):(a.$emit("UNLOAD"),l.disabled=!1,s.alert(e.data.message))}))}}]),angular.module("menuControllers",["menuServices"]).controller("mainMenuCtrl",["Menu","$state",function(e,t){var a=this;this.createMenu=function(r){if(a.errorMsg=!1,void 0===r)a.errorMsg="올바른 정보를 입력해주세요.";else{var n={name:r.name};e.createMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}},this.update=function(r){a.errorMsg=!1;var n={category_id:r.category_id,name:r.name};e.updateMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})},this.delete=function(r){a.errorMsg=!1;var n=r.category_id;e.deleteMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("subMenuCtrl",["Menu","$state","$stateParams","$http",function(e,t,a,r){var n=this,i=a.category_id;r.get("/api/category/"+i).then(function(e){e.data.success&&(n.subMenuDatas=e.data.result)})}]),angular.module("typeControllers",["adminServices","menuServices","orderServices"]).controller("updateItemTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_id;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateItemType(s).then(function(e){if(n.errorMsg=!1,e.data.success){t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id};var a={kind:n.updataData.kind.split(","),price:n.updataData.price.split(",")};for(n.optionDatas=[],i=0;i<a.kind.length;i++)n.optionDatas[i]={kind:a.kind[i],price:a.price[i]}}else n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})},this.updateitemType=function(e){var t=[],s=[];for(i=0;i<n.optionDatas.length;i++)t.push(n.optionDatas[i].kind),s.push(n.optionDatas[i].price);var o={item_id:e.item_id,item_name:e.item_name,price:s.toString(),kind:t.toString()};a.updateItemType(o).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readItemTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyItemType=function(a){var r={type:a.item_type_id,title:a.item_name,kind:a.kind.toString(),price:a.price.toString()};e.createItem(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_id;e.deleteItem(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readItemType().then(function(e){if(e.data.success){r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(a=0;a<t.length;a++)n.data.availableOptions[a+1]={name:t[a].name,id:t[a].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result;for(var t=[],a=0;a<e.data.result.length;a++)t[a]={kind:n.typeDatas[a].kind.split(","),price:n.typeDatas[a].price.split(",")},n.typeDatas[a].kind=t[a].kind,n.typeDatas[a].price=t[a].price}else n.errorMsg=e.data.message})}]).controller("updateTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_type;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateType(s).then(function(e){n.errorMsg=!1,e.data.success?(t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id}):n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyType=function(a){var r={category:a.category_id,type_description:a.type_description,type_code:a.type_code};e.createType(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_type;e.deleteType(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readType().then(function(e){e.data.success?(r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result):n.errorMsg=e.data.message})}]).controller("createTypeCtrl",["Admin","$state","Menu","$window",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}
}else n.errorMsg=e.data.message}),this.createType=function(a){n.errorMsg=!1,n.typeData={category:n.data.selectedOption.id,type_description:a.type_description,type_code:a.type_code},e.createType(n.typeData).then(function(e){e.data.success?(n.success=e.data.message,t.reload()):n.errorMsg=e.data.message})},n.kindList=[],n.type_tiny=[],n.type_price=[],this.addLine=function(e){e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?r.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?r.alert("옵션 가격을 입력해주세요."):(n.kindList.push({kind:e.kindValue,price:e.kindPrice}),n.type_tiny.push(e.kindValue),n.type_price.push(e.kindPrice)):r.alert("정확한 값을 입력해주세요.")}}]),angular.module("mainControllers",["authServices","userServices"]).controller("mainCtrl",["Auth","$timeout","$location","$state","$rootScope","$scope","$window","$interval","User","AuthToken",function(e,t,a,r,n,i,s,o,d,l){var c=this;c.loadme=!1,i.$on("LOAD",function(){i.loading=!0}),i.$on("UNLOAD",function(){i.loading=!1}),n.$on("$stateChangeStart",function(){u?e.isLoggedIn()?(c.isLoggedIn=!0,c.loadme=!0,e.getUser().then(function(e){c.user=e.data,c.loadme=!0,d.getPermission().then(function(e){e.data.success?"admin"===e.data.permission?(c.authorized=!0,c.permission=!0,c.loadme=!0):"artist"===e.data.permission?(c.permission=!0,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0)})})):(c.user=!1,c.isLoggedIn=!1,c.loadme=!0):u()});var u=function(){if(e.isLoggedIn()){c.checkSession=!0;var t=o(function(){var e=s.localStorage.getItem("token");if(null===e)o.cancel(t);else{self.parseJwt=function(e){var t=e.split(".")[1],a=t.replace("-","+").replace("_","/");return JSON.parse(s.atob(a))};var a=self.parseJwt(e),r=Math.floor(Date.now()/1e3);a.exp-r<=5&&(m("expired"),o.cancel(t))}},2e3)}};u(),c.renewSession=function(){c.choiceMade=!0,d.renewSession(c.user.username).then(function(e){e.data.success?(l.setToken(e.data.token),u(),p("expired")):(c.ModalBody=e.data.message,p("expired"))})},c.endSession=function(){c.choiceMade=!0,p("expired"),t(function(){m("logout")},500)};var m=function(a){c.choiceMade=!1,c.modalHeader=void 0,c.modalBody=void 0,c.hideButton=!1,"expired"===a?(c.modalHeader="Timeout Warning",c.modalBody="Your session will expired in 5 minutes. Would you like to renew your session?",$("#myModal").modal({backdrop:"static"})):"logout"===a?(c.hideButton=!0,c.modalHeader="로그아웃",$("#myModal").modal({backdrop:"static"}),t(function(){e.logout(),c.isLoggedIn=!1,c.authorized=!1,c.permission=!1,c.disabled=!1,c.successMsg=!1,p("logout"),r.reload()},1e3)):"login"===a&&$("#login").modal({backdrop:"static"}),t(function(){c.choiceMade||p("logout")},2e3)},p=function(e){"expired"===e?$("#myModal").modal("hide"):"logout"===e?$("#myModal").modal("hide"):"login"===e&&$("#login").modal("hide")};this.doLogin=function(a,n){c.errorMsg=!1,c.expired=!1,c.disabled=!0,n?e.login(c.loginData).then(function(e){e.data.success?(c.successMsg=e.data.message,t(function(){c.loginData=null,c.isLoggedIn=!0,u(),r.go("app")},1e3)):e.data.expired?(c.expired=!0,c.disabled=!0,c.errorMsg=e.data.message):(c.disabled=!1,c.errorMsg=e.data.message)}):(c.disabled=!1,c.loading=!1,c.errorMsg="올바른 정보를 입력해주세요.")},c.logout=function(){m("logout")},c.resend=function(){p("login"),t(function(){r.go("resend"),c.expired=!1},500)},c.resetusername=function(){p("login"),t(function(){r.go("resetusername")},500)},c.resetpassword=function(){p("login"),t(function(){r.go("resetpassword")},500)}}]),angular.module("orderControllers",["orderServices"]).controller("readOrderCtrl",["$stateParams","$state","$window","Order","$scope",function(e,t,a,r,n){var s=this,o=n.main.user.user_id;s.getItemFail=!1,s.cashReceipt=!0,s.cashReceipt?s.getCashReceipt=!0:s.getCashReceipt=!1,this.readAddress=function(){daum.postcode.load(function(){s.addressDetail="",new daum.Postcode({oncomplete:function(e){s.deliData={sigungu_code:e.sigunguCode,jibun_address:e.jibunAddress,road_address:e.roadAddress}}}).open()})},r.readOrderAndDeli().then(function(e){if(s.errorMsg=!1,e.data.success)if(0===e.data.result.length)s.delivery=!1,r.readOrder(o).then(function(e){var t=[];for(s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]});else{var t=[];for(s.delivery=!0,s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]}else s.errorMsg=e.data.message}),this.confirmOrder=function(e){var t="";s.delivery?void 0===e.daliData?console.log("변경사항 없음"):(t=e.daliData,r.updateDelivery(t).then(function(e){})):(t=e.daliData,e.receiptData,r.createDelivery(t).then(function(e){}))},this.delete=function(e){s.errorMsg=!1;var a=e.item_id;r.deleteOrder(a).then(function(e){e.data.success?(s.successMsg=e.data.message,t.reload()):s.errorMsg=e.data.message})}}]).controller("basketCtrl",["Order","$window","$state",function(e,t,a){var r=this;r.amount=1,r.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},this.delete=function(t){r.errorMsg=!1;var n=t.basket_id;e.deleteBasket(n).then(function(e){e.data.success?(r.successMsg=e.data.message,a.reload()):r.errorMsg=e.data.message})},this.makeBasket=function(){},e.readBasket().then(function(e){if(r.errorMsg=!1,e.data.success){r.basketData=e.data.result;var t,a=[],n=[];for(t=0;t<r.basketData.length;t++)a[t]=r.basketData[t].kind.split(","),n[t]=r.basketData[t].price.split(",");for(t=0;t<a.length;t++)for(r.data[t]={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},j=0;j<a[t].length;j++)r.data[t].availableOptions[j+1]={name:a[t][j],id:Number(n[t][j])}}else r.errorMsg=e.data.message})}]),angular.module("emailControllers",["userServices"]).controller("emailCtrl",["$stateParams","User","$timeout","$state",function(e,t,a,r){var n=this;t.activeAccount(e.token).then(function(e){n.successMsg=!1,n.errorMsg=!1,e.data.success?(n.disabled=!0,n.successMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3)):(n.errorMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3))})}]).controller("resendCtrl",["User","$timeout","$state",function(e,t,a){app=this,this.checkCredentials=function(r){app.successMsg=!1,app.errorMsg=!1,app.disabled=!0,e.checkCredentials(this.loginData).then(function(r){r.data.success?e.resendLink(app.loginData).then(function(e){e.data.success&&(app.disabled=!0,app.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3))}):(app.disabled=!1,app.errorMsg=r.data.message)})}}]).controller("usernameCtrl",["User","$timeout","$state",function(e,t,a){var r=this;this.sendUsername=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendUsername(r.userData.email).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 이메일 주소가 아닙니다.")}}]).controller("passwordCtrl",["User","$timeout","$state",function(e,t,a){var r=this;r.sendPassword=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendPassword(r.resetData).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 아이디가 아닙니다.")}}]).controller("resetCtrl",["$stateParams","$scope","User","$timeout","$state",function(e,t,a,r,n){var i=this;i.hide=!0,a.resetPassword(e.token).then(function(e){e.data.success?(i.hide=!1,t.alert="alert alert-success",i.successMsg="새로운 비밀번호를 입력해주세요.",t.username=e.data.user[0].username):(t.alert="alert alert-danger",i.errorMsg=e.data.message)}),i.savePassword=function(e,s,o){i.errorMsg=!1,i.successMsg=!1,i.disabled=!0,i.loading=!0,s&&o?(i.regData.username=t.username,a.savePassword(i.regData).then(function(e){i.loading=!1,e.data.success?(t.alert="alert alert-success",i.successMsg=e.data.message+"...메인 화면으로 이동합니다.",r(function(){n.go("app")},2e3)):(t.alert="alert alert-danger",i.disabled=!1,i.errorMsg=e.data.message)})):(t.alert="alert alert-danger",i.loading=!1,i.disabled=!1,i.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("userControllers",["userServices"]).controller("regCtrl",["$http","$location","$timeout","User","Auth","$state",function(e,t,a,r,n,i){var s=this;this.regStep1=function(e){s.errorMsg=!1,e?e.terms&&e.privacy?(s.successMsg="약관에 성공적으로 동의하셨습니다.",s.disabled=!0,i.go("app.registerStep2")):(s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다.",s.disabled=!1):s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다."},this.regStep2=function(e,t,a){s.errorMsg=!1,s.disabled=!0,i.go("app.registerStep3")},this.regStep3=function(e,t,o){s.errorMsg=!1,s.disabled=!0,t&&o?r.create(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,n.login(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,a(function(){i.go("app")},1e3)):e.data.expired?(s.expired=!0,s.disabled=!0,s.errorMsg=e.data.message):(s.disabled=!1,s.errorMsg=e.data.message)})):(s.disabled=!1,s.errorMsg=e.data.message)}):(s.disabled=!1,s.loading=!1,s.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("app").directive("adminHeader",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/admin/adminHeader.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("adminLaboratory",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/admin/adminLaboratory.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,a,r){var n=e(r.fileModel),i=n.assign;a.bind("change",function(){t.$apply(function(){i(t,a[0].files[0])})})}}}]),angular.module("app").directive("match",function(){return{restrict:"A",controller:["$scope",function(e){e.doConfirm=function(t){e.confirmed=!1,t.forEach(function(t){e.confirm==t?e.confirmed=!0:e.confirmed=!1})}}],link:function(e,t,a){a.$observe("match",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)}),e.$watch("confirm",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)})}}}),angular.module("app").directive("companyIntroduce",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/companyIntroduce.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("companyPrivacyInformation",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/companyInformation/companyPrivacyInformation.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("privacy",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/privacy.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("terms",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/terms.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("userQuickMenu",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/companyInformation/userQuickMenu.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("content",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/main/content.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("footer",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/footer.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("header",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/header.tpl.html",link:function(e,t,a,r){}}}]),angular.module("bannerController",[]).controller("uploadBannerCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadBanner=function(){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var t=new FormData;t.append("myfile",i.file.upload),a.post("/api/banner/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(e.$emit("UNLOAD"),r.alert(t.data.message),n.reload(),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})}}]).controller("getBannerCtrl",["$http",function(e){var t=this;e.get("/api/banner").then(function(e){e.data.success?t.bannerData=e.data.bannerData:console.log("불러오지 못하였습니다.")})}]),angular.module("boardController",[]).controller("createBoardController",["$http",function(e){this.doWrite=function(t){e.post("/api/board",t).then(function(e){console.log(e)})}}]),angular.module("galleryController",[]).controller("uploadgalleryCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadImage=function(t){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var n=new FormData;n.title=t,n.append("myfile",i.file.upload),a.patch("/api/gallery/",n,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(i.imagePath=t.data.image_path,e.$emit("UNLOAD"),r.alert(t.data.message),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})},this.uploadGallery=function(e){galleryData={title:e,imagePath:i.imagePath},a.post("/api/gallery",galleryData).then(function(e){})}}]).controller("getGalleryCtrl",["$http",function(e){var t=this;e.get("/api/gallery").then(function(e){e.data.success?(t.galleryData=e.data.galleryData,console.log(t.galleryData)):console.log("불러오지 못하였습니다.")})}]),angular.module("itemControllers",["orderServices"]).filter("sumByKey",function(){return function(e,t){var a=e instanceof Array?e.length:0;if(void 0===t||0===a)return a;for(var r=0;a--;)r+=e[a][t[0]]*e[a][t[1]];return r}}).controller("getTypeItemsCtrl",["$stateParams","$http",function(e,t){var a=this,r=e.category_id;if(e.type_code){var n=e.type_code;t.get("/api/item_type/"+r,{params:{type_code:n}}).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}else t.get("/api/item_type/"+r).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}]).controller("getTypeItemCtrl",["Admin","$stateParams","$window","$state","Order",function(e,t,a,r,n){var s=this,o=t.item_id;s.optionItem=!1,s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,s.optionList=[],this.addItem=function(e){0===e.id?a.alert("옵션을 선택해주세요."):(s.optionItem=!0,s.optionList.push({kind:e.name,price:e.id,amount:1}))},this.createBasket=function(e){var t={item_id:e.item_id};n.createBasket(t).then(function(e){e.data.success,a.alert(e.data.message)})},this.createOrder=function(e){var t={item_id:e.item_id,amount:e.amount,kind_of:e.kind_of,price:e.price};n.createOrder(t).then(function(e){e.data.success?(s.successMsg=e.data.message,r.go("app.makeOrder")):s.errorMsg=e.data})},e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]),angular.module("managementControllers",["adminServices","menuServices","orderServices"]).controller("readItemsCtrl",["Admin","$state",function(e,t){var a=this;e.readItems().then(function(e){a.errorMsg=!1,e.data.success?a.itemsData=e.data.result:a.errorMsg=e.data.message}),this.deleteItem=function(r){a.errorMsg=!1;var n=r.item_id;e.deleteItem(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("readItemCtrl",["Admin","$stateParams","$scope","Order","$window",function(e,t,a,r,n){var s=this,o=t.item_id;s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,s.data.selectedOption={id:r[0]},i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]).controller("updateItemCtrl",["Admin","$stateParams","$scope","$http","$timeout","$state","$window","Menu",function(e,t,a,r,n,s,o,d){function l(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var c=this,u=t.item_id;c.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},d.readMainMenu().then(function(e){if(c.errorMsg=!1,e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)c.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else c.errorMsg=e.data.message}),this.readMenu=function(e){if(c.errorMsg=!1,c.readMenuStatus=!1,0===e.id)o.alert("카테고리를 선택해주세요.");else{var t=e.id;r.get("/api/menu/"+t).then(function(e){if(e.data.success)if(0===e.data.result.length)c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},o.alert("등록된 상품이 없습니다.");else{c.readMenuStatus=!0,c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)c.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}else c.errorMsg=e.data.message})}},e.readItem(u).then(function(e){console.log(e),e.data.success?(c.itemData=e.data.result,c.data.selectedOption={id:c.itemData.category_id}):c.errorMsg=e.data.message}),this.updateItem=function(e){if(c.errorMsg=!1,c.readMenuStatus)if(0===e.item_type||"0"===e.item_type)o.alert("상품 분류를 선택해주세요.!");else{var t={type:e.item_type,item_name:e.item_name};r.put("/api/item/"+u,t).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})}else updateData2={type:c.itemData.item_type_id,item_name:e.item_name},r.put("/api/item/"+u,updateData2).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.mainThumbnail={},c.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),c.mainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoImage/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.mainPhoto=!0,c.disabled=!1;var t={image:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.explainThumbnail={},c.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),c.explainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoExplain/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.explainPhoto=!0,c.disabled=!1;var t={explain:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},c.myImage="",c.myCroppedImage="";var m=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),c.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",m),this.readCropImage=function(t){if(a.$emit("LOAD"),c.thumbnail=!1,c.disabled=!0,""===t.base64Url||null===t.base64Url||void 0===t.base64Url)c.disabled=!1;else{a.$emit("UNLOAD");var n=l(a.myCroppedImage);e.readAristCrop(n).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.thumbnail=!0,c.disabled=!1;var t={thumbnail:e.data.filePath};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)})}else a.$emit("UNLOAD"),c.disabled=!1})}}}]).controller("createItemCtrl",["$http","$timeout","$scope","Admin","$state","$window","Menu",function(e,t,a,r,n,s,o){function d(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var l=this;l.kindList=[],l.type_tiny=[],l.type_price=[],this.addLine=function(e){e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?s.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?s.alert("옵션 가격을 입력해주세요."):(l.kindList.push({kind:e.kindValue,price:e.kindPrice}),l.type_tiny.push(e.kindValue),l.type_price.push(e.kindPrice)):s.alert("정확한 값을 입력해주세요.")},l.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},l.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},o.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)l.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else l.errorMsg=e.data.message}),this.readMenu=function(t){if(0===t.id)s.alert("카테고리를 선택해주세요.");else{var a=t.id;e.get("/api/menu/"+a).then(function(e){if(e.data.success)if(0===e.data.result.length)l.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},s.alert("등록된 상품이 없습니다.");else{l.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)l.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}})}},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),l.mainThumbnail={},l.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),l.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),l.mainPhoto=!1,l.disabled=!0;var t=new FormData;t.append("myfile",l.file.upload),e.post("/api/createPhotoImage/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),l.mainPhoto=!0,l.disabled=!1,l.mainImagePath=e.data.item_path,l.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),l.disabled=!1,l.file={})})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),l.explainThumbnail={},l.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),l.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),l.explainPhoto=!1,l.disabled=!0;var t=new FormData;t.append("myfile",l.file.upload),e.post("/api/createPhotoExplain/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),l.explainPhoto=!0,l.disabled=!1,l.explainImagePath=e.data.item_path,l.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),l.disabled=!1,l.file={})})},l.myImage="",l.myCroppedImage="";var c=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),l.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",c),this.readCropImage=function(e){if(a.$emit("LOAD"),l.thumbnail=!1,l.disabled=!0,""===e.base64Url||null===e.base64Url||void 0===e.base64Url)l.disabled=!1;else{a.$emit("UNLOAD");var t=d(a.myCroppedImage);r.readAristCrop(t).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),l.thumbnail=!0,l.disabled=!1,l.thumbnailPath=e.data.filePath):(a.$emit("UNLOAD"),l.disabled=!1)})}},this.createPhoto=function(e){a.$emit("LOAD"),void 0===e||null===e||""===e?(s.alert("빈칸을 모두 입력해주세요."),l.disabled=!1,a.$emit("UNLOAD")):"0"===l.data2.selectedOption.id?(a.$emit("UNLOAD"),l.disabled=!1,s.alert("상품 분류을 선택해주세요.")):void 0===e.title||null===e.title||""===e.title?(a.$emit("UNLOAD"),l.disabled=!1,s.alert("상품 제목를 입력해주세요.")):(l.uploadData={title:e.title,type:l.data2.selectedOption.id,kind:l.type_tiny.toString(),price:l.type_price.toString()},r.createItem(l.uploadData).then(function(e){e.data.success?(a.$emit("UNLOAD"),l.disabled=!0,s.alert(e.data.message),n.reload()):(a.$emit("UNLOAD"),l.disabled=!1,s.alert(e.data.message))}))}}]),angular.module("menuControllers",["menuServices"]).controller("mainMenuCtrl",["Menu","$state",function(e,t){var a=this;this.createMenu=function(r){if(a.errorMsg=!1,void 0===r)a.errorMsg="올바른 정보를 입력해주세요.";else{var n={name:r.name};e.createMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}},this.update=function(r){a.errorMsg=!1;var n={category_id:r.category_id,name:r.name};e.updateMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})},this.delete=function(r){a.errorMsg=!1;var n=r.category_id;e.deleteMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("subMenuCtrl",["Menu","$state","$stateParams","$http",function(e,t,a,r){var n=this,i=a.category_id;r.get("/api/category/"+i).then(function(e){e.data.success&&(n.subMenuDatas=e.data.result)})}]),angular.module("typeControllers",["adminServices","menuServices","orderServices"]).controller("updateItemTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_id;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateItemType(s).then(function(e){if(n.errorMsg=!1,e.data.success){t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id};var a={kind:n.updataData.kind.split(","),price:n.updataData.price.split(",")};for(n.optionDatas=[],i=0;i<a.kind.length;i++)n.optionDatas[i]={kind:a.kind[i],price:a.price[i]}}else n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})},this.updateitemType=function(e){var t=[],s=[];for(i=0;i<n.optionDatas.length;i++)t.push(n.optionDatas[i].kind),s.push(n.optionDatas[i].price);var o={item_id:e.item_id,item_name:e.item_name,price:s.toString(),kind:t.toString()};a.updateItemType(o).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readItemTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyItemType=function(a){var r={type:a.item_type_id,title:a.item_name,kind:a.kind.toString(),price:a.price.toString()};e.createItem(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_id;e.deleteItem(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readItemType().then(function(e){if(e.data.success){r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(a=0;a<t.length;a++)n.data.availableOptions[a+1]={name:t[a].name,id:t[a].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result;for(var t=[],a=0;a<e.data.result.length;a++)t[a]={kind:n.typeDatas[a].kind.split(","),price:n.typeDatas[a].price.split(",")},n.typeDatas[a].kind=t[a].kind,n.typeDatas[a].price=t[a].price}else n.errorMsg=e.data.message})}]).controller("updateTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_type;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateType(s).then(function(e){n.errorMsg=!1,e.data.success?(t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id}):n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyType=function(a){var r={category:a.category_id,type_description:a.type_description,type_code:a.type_code};e.createType(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_type;e.deleteType(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readType().then(function(e){e.data.success?(r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result):n.errorMsg=e.data.message})}]).controller("createTypeCtrl",["Admin","$state","Menu","$window",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),this.createType=function(a){n.errorMsg=!1,n.typeData={category:n.data.selectedOption.id,type_description:a.type_description,type_code:a.type_code},e.createType(n.typeData).then(function(e){e.data.success?(n.success=e.data.message,t.reload()):n.errorMsg=e.data.message})},n.kindList=[],n.type_tiny=[],n.type_price=[],this.addLine=function(e){
e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?r.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?r.alert("옵션 가격을 입력해주세요."):(n.kindList.push({kind:e.kindValue,price:e.kindPrice}),n.type_tiny.push(e.kindValue),n.type_price.push(e.kindPrice)):r.alert("정확한 값을 입력해주세요.")}}]),angular.module("mainControllers",["authServices","userServices"]).controller("mainCtrl",["Auth","$timeout","$location","$state","$rootScope","$scope","$window","$interval","User","AuthToken",function(e,t,a,r,n,i,s,o,d,l){var c=this;!function(){var e,t="N/A",a=navigator.userAgent.toLowerCase();"Microsoft Internet Explorer"==navigator.appName?e="msie ":a.search("trident")>-1?e="trident/.*rv:":a.search("edge/")>-1&&(e="edge/"),null!=new RegExp(e+"([0-9]{1,})(\\.{0,}[0-9]{0,1})").exec(a)&&(t=RegExp.$1+RegExp.$2),t<10&&confirm("인터넷 익스플로러 9 버전 이상 또는 크롬 브라우저에 최적화되어 있습니다. \n다운로드후 사용하시겠습니까?")&&(location.href="https://www.google.co.kr/chrome/browser/desktop/index.html")}(),c.loadme=!1,i.$on("LOAD",function(){i.loading=!0}),i.$on("UNLOAD",function(){i.loading=!1}),n.$on("$stateChangeStart",function(){u?e.isLoggedIn()?(c.isLoggedIn=!0,c.loadme=!0,e.getUser().then(function(e){c.user=e.data,c.loadme=!0,d.getPermission().then(function(e){e.data.success?"admin"===e.data.permission?(c.authorized=!0,c.loadme=!0):"artist"===e.data.permission?(c.permission=!0,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0)})})):(c.user=!1,c.isLoggedIn=!1,c.loadme=!0):u()});var u=function(){if(e.isLoggedIn()){c.checkSession=!0;var t=o(function(){var e=s.localStorage.getItem("token");if(null===e)o.cancel(t);else{self.parseJwt=function(e){var t=e.split(".")[1],a=t.replace("-","+").replace("_","/");return JSON.parse(s.atob(a))};var a=self.parseJwt(e),r=Math.floor(Date.now()/1e3);a.exp-r<=5&&(m("expired"),o.cancel(t))}},2e3)}};u(),c.renewSession=function(){c.choiceMade=!0,d.renewSession(c.user.username).then(function(e){e.data.success?(l.setToken(e.data.token),u(),p("expired")):(c.ModalBody=e.data.message,p("expired"))})},c.endSession=function(){c.choiceMade=!0,p("expired"),t(function(){m("logout")},500)};var m=function(a){c.choiceMade=!1,c.modalHeader=void 0,c.modalBody=void 0,c.hideButton=!1,"expired"===a?(c.modalHeader="Timeout Warning",c.modalBody="Your session will expired in 5 minutes. Would you like to renew your session?",$("#myModal").modal({backdrop:"static"})):"logout"===a?(c.hideButton=!0,c.modalHeader="로그아웃",$("#myModal").modal({backdrop:"static"}),t(function(){e.logout(),c.isLoggedIn=!1,c.authorized=!1,c.permission=!1,c.disabled=!1,c.successMsg=!1,p("logout"),r.reload()},1e3)):"login"===a&&$("#login").modal({backdrop:"static"}),t(function(){c.choiceMade||p("logout")},2e3)},p=function(e){"expired"===e?$("#myModal").modal("hide"):"logout"===e?$("#myModal").modal("hide"):"login"===e&&$("#login").modal("hide")};this.doLogin=function(a,n){c.errorMsg=!1,c.expired=!1,c.disabled=!0,n?e.login(c.loginData).then(function(e){e.data.success?(c.successMsg=e.data.message,t(function(){c.loginData=null,c.isLoggedIn=!0,u(),r.go("app")},1e3)):e.data.expired?(c.expired=!0,c.disabled=!0,c.errorMsg=e.data.message):(c.disabled=!1,c.errorMsg=e.data.message)}):(c.disabled=!1,c.loading=!1,c.errorMsg="올바른 정보를 입력해주세요.")},c.logout=function(){m("logout")},c.resend=function(){p("login"),t(function(){r.go("resend"),c.expired=!1},500)},c.resetusername=function(){p("login"),t(function(){r.go("resetusername")},500)},c.resetpassword=function(){p("login"),t(function(){r.go("resetpassword")},500)}}]),angular.module("orderControllers",["orderServices"]).controller("readOrderCtrl",["$stateParams","$state","$window","Order","$scope",function(e,t,a,r,n){var s=this,o=n.main.user.user_id;s.getItemFail=!1,s.cashReceipt=!0,s.cashReceipt?s.getCashReceipt=!0:s.getCashReceipt=!1,this.readAddress=function(){daum.postcode.load(function(){s.addressDetail="",new daum.Postcode({oncomplete:function(e){s.deliData={sigungu_code:e.sigunguCode,jibun_address:e.jibunAddress,road_address:e.roadAddress}}}).open()})},r.readOrderAndDeli().then(function(e){if(s.errorMsg=!1,e.data.success)if(0===e.data.result.length)s.delivery=!1,r.readOrder(o).then(function(e){var t=[];for(s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]});else{var t=[];for(s.delivery=!0,s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]}else s.errorMsg=e.data.message}),this.confirmOrder=function(e){var t="";s.delivery?void 0===e.daliData?console.log("변경사항 없음"):(t=e.daliData,r.updateDelivery(t).then(function(e){})):(t=e.daliData,e.receiptData,r.createDelivery(t).then(function(e){}))},this.delete=function(e){s.errorMsg=!1;var a=e.item_id;r.deleteOrder(a).then(function(e){e.data.success?(s.successMsg=e.data.message,t.reload()):s.errorMsg=e.data.message})}}]).controller("basketCtrl",["Order","$window","$state",function(e,t,a){var r=this;r.amount=1,r.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},this.delete=function(t){r.errorMsg=!1;var n=t.basket_id;e.deleteBasket(n).then(function(e){e.data.success?(r.successMsg=e.data.message,a.reload()):r.errorMsg=e.data.message})},this.makeBasket=function(){},e.readBasket().then(function(e){if(r.errorMsg=!1,e.data.success){r.basketData=e.data.result;var t,a=[],n=[];for(t=0;t<r.basketData.length;t++)a[t]=r.basketData[t].kind.split(","),n[t]=r.basketData[t].price.split(",");for(t=0;t<a.length;t++)for(r.data[t]={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},j=0;j<a[t].length;j++)r.data[t].availableOptions[j+1]={name:a[t][j],id:Number(n[t][j])}}else r.errorMsg=e.data.message})}]),angular.module("emailControllers",["userServices"]).controller("emailCtrl",["$stateParams","User","$timeout","$state",function(e,t,a,r){var n=this;t.activeAccount(e.token).then(function(e){n.successMsg=!1,n.errorMsg=!1,e.data.success?(n.disabled=!0,n.successMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3)):(n.errorMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3))})}]).controller("resendCtrl",["User","$timeout","$state",function(e,t,a){app=this,this.checkCredentials=function(r){app.successMsg=!1,app.errorMsg=!1,app.disabled=!0,e.checkCredentials(this.loginData).then(function(r){r.data.success?e.resendLink(app.loginData).then(function(e){e.data.success&&(app.disabled=!0,app.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3))}):(app.disabled=!1,app.errorMsg=r.data.message)})}}]).controller("usernameCtrl",["User","$timeout","$state",function(e,t,a){var r=this;this.sendUsername=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendUsername(r.userData.email).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 이메일 주소가 아닙니다.")}}]).controller("passwordCtrl",["User","$timeout","$state",function(e,t,a){var r=this;r.sendPassword=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendPassword(r.resetData).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 아이디가 아닙니다.")}}]).controller("resetCtrl",["$stateParams","$scope","User","$timeout","$state",function(e,t,a,r,n){var i=this;i.hide=!0,a.resetPassword(e.token).then(function(e){e.data.success?(i.hide=!1,t.alert="alert alert-success",i.successMsg="새로운 비밀번호를 입력해주세요.",t.username=e.data.user[0].username):(t.alert="alert alert-danger",i.errorMsg=e.data.message)}),i.savePassword=function(e,s,o){i.errorMsg=!1,i.successMsg=!1,i.disabled=!0,i.loading=!0,s&&o?(i.regData.username=t.username,a.savePassword(i.regData).then(function(e){i.loading=!1,e.data.success?(t.alert="alert alert-success",i.successMsg=e.data.message+"...메인 화면으로 이동합니다.",r(function(){n.go("app")},2e3)):(t.alert="alert alert-danger",i.disabled=!1,i.errorMsg=e.data.message)})):(t.alert="alert alert-danger",i.loading=!1,i.disabled=!1,i.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("userControllers",["userServices"]).controller("regCtrl",["$http","$location","$timeout","User","Auth","$state",function(e,t,a,r,n,i){var s=this;this.regStep1=function(e){s.errorMsg=!1,e?e.terms&&e.privacy?(s.successMsg="약관에 성공적으로 동의하셨습니다.",s.disabled=!0,i.go("app.registerStep2")):(s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다.",s.disabled=!1):s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다."},this.regStep2=function(e,t,a){s.errorMsg=!1,s.disabled=!0,i.go("app.registerStep3")},this.regStep3=function(e,t,o){s.errorMsg=!1,s.disabled=!0,t&&o?r.create(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,n.login(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,a(function(){i.go("app")},1e3)):e.data.expired?(s.expired=!0,s.disabled=!0,s.errorMsg=e.data.message):(s.disabled=!1,s.errorMsg=e.data.message)})):(s.disabled=!1,s.errorMsg=e.data.message)}):(s.disabled=!1,s.loading=!1,s.errorMsg="올바른 정보를 입력해주세요.")}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlLmpzIiwiZGlyZWN0aXZlcy9hZG1pblVzZXJzLmpzIiwiZGlyZWN0aXZlcy9iYW5uZXIuanMiLCJkaXJlY3RpdmVzL2JvYXJkLmpzIiwiZGlyZWN0aXZlcy9nYWxsZXJ5LmpzIiwiZGlyZWN0aXZlcy9tZW51SXRlbS5qcyIsInNlcnZpY2VzL2FkbWluU2VydmljZXMuanMiLCJzZXJ2aWNlcy9hdXRoU2VydmljZXMuanMiLCJzZXJ2aWNlcy9nYWxsZXJ5U2VydmljZXMuanMiLCJzZXJ2aWNlcy9tZW51U2VydmljZXMuanMiLCJzZXJ2aWNlcy9vcmRlclNlcnZpY2VzLmpzIiwic2VydmljZXMvdXNlclNlcnZpY2VzLmpzIiwiY29udHJvbGxlcnMvYWRtaW4vYmFubmVyQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2FkbWluL2l0ZW1Db250cm9sbGVycy5qcyIsImNvbnRyb2xsZXJzL2FkbWluL21hbmFnZW1lbnRDb250cm9sbGVycy5qcyIsImNvbnRyb2xsZXJzL2FkbWluL21lbnVDb250cm9sbGVycy5qcyIsImNvbnRyb2xsZXJzL2FkbWluL3R5cGVDb250cm9sbGVycy5qcyIsImNvbnRyb2xsZXJzL21haW4vbWFpbkNvbnRyb2xsZXJzLmpzIiwiY29udHJvbGxlcnMvbWFpbi9vcmRlckNvbnRyb2xsZXJzLmpzIiwiY29udHJvbGxlcnMvdXNlci9lbWFpbEN0cmwuanMiLCJjb250cm9sbGVycy91c2VyL3VzZXJDdHJsLmpzIiwiZGlyZWN0aXZlcy9hZG1pbi9hZG1pbkhlYWRlci5qcyIsImRpcmVjdGl2ZXMvYWRtaW4vYWRtaW5MYWJvcmF0b3J5LmpzIiwiZGlyZWN0aXZlcy9hdHRyaWJ1dGUvZmlsZU1vZGVsLmpzIiwiZGlyZWN0aXZlcy9hdHRyaWJ1dGUvbWF0Y2hQYXNzd29yZC5qcyIsImRpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL2NvbXBhbnlJbnRyb2R1Y2UuanMiLCJkaXJlY3RpdmVzL2NvbXBhbnlJbmZvcm1hdGlvbi9jb21wYW55UHJpdmFjeUluZm9ybWF0aW9uLmpzIiwiZGlyZWN0aXZlcy9jb21wYW55SW5mb3JtYXRpb24vcHJpdmFjeS5qcyIsImRpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL3Rlcm1zLmpzIiwiZGlyZWN0aXZlcy9jb21wYW55SW5mb3JtYXRpb24vdXNlclF1aWNrTWVudS5qcyIsImRpcmVjdGl2ZXMvbWFpbi9jb250ZW50LmpzIiwiZGlyZWN0aXZlcy9tYWluL2Zvb3Rlci5qcyIsImRpcmVjdGl2ZXMvbWFpbi9oZWFkZXIuanMiLCJjb250b3JvbGxlcnMvYWRtaW4vYmFubmVyQ29udHJvbGxlci5qcyIsImNvbnRvcm9sbGVycy9hZG1pbi9ib2FyZENvbnRyb2xsZXIuanMiLCJjb250b3JvbGxlcnMvYWRtaW4vZ2FsbGVyeUNvbnRyb2xsZXIuanMiLCJjb250b3JvbGxlcnMvYWRtaW4vaXRlbUNvbnRyb2xsZXJzLmpzIiwiY29udG9yb2xsZXJzL2FkbWluL21hbmFnZW1lbnRDb250cm9sbGVycy5qcyIsImNvbnRvcm9sbGVycy9hZG1pbi9tZW51Q29udHJvbGxlcnMuanMiLCJjb250b3JvbGxlcnMvYWRtaW4vdHlwZUNvbnRyb2xsZXJzLmpzIiwiY29udG9yb2xsZXJzL21haW4vbWFpbkNvbnRyb2xsZXJzLmpzIiwiY29udG9yb2xsZXJzL21haW4vb3JkZXJDb250cm9sbGVycy5qcyIsImNvbnRvcm9sbGVycy91c2VyL2VtYWlsQ3RybC5qcyIsImNvbnRvcm9sbGVycy91c2VyL3VzZXJDdHJsLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkaHR0cFByb3ZpZGVyIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsImFwcCIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJoYXNoUHJlZml4IiwiaHRtbDVNb2RlIiwic3RhdGUiLCJ1cmwiLCJ2aWV3cyIsImJvZHlDb250ZW50QCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJvZHlDb250ZW50QGFwcCIsInN1Yk1lbnVAYXBwIiwiYXV0aGVudGljYXRlZCIsImFkbWluQ29udGVudEAiLCJhZG1pbkNvbnRlbnRAYXBwIiwibWVudUBhcHAubWFuYWdlbWVudCIsImNvbnRlbnRzQGFwcC5tYW5hZ2VtZW50IiwicnVuIiwiJHJvb3RTY29wZSIsIlVzZXIiLCIkc3RhdGUiLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJvcHRpb25zIiwiZXJyb3IiLCJnbyIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwiY3RybHMiLCIkaHR0cCIsImFwcEN0cmwiLCJnZXQiLCJ0aGVuIiwicmVzdWx0IiwiZGF0YSIsInN1Y2Nlc3MiLCJiYW5uZXJEYXRhIiwiY29uc29sZSIsImxvZyIsIiRzY29wZSIsImFzc2lnbk5ld0luZGV4ZXNUb1NsaWRlcyIsImluZGV4ZXMiLCJpIiwibCIsInNsaWRlcyIsImxlbmd0aCIsImlkIiwicG9wIiwiZ2VuZXJhdGVJbmRleGVzQXJyYXkiLCJjdXJySW5kZXgiLCJzaHVmZmxlIiwiYXJyYXkiLCJ0bXAiLCJjdXJyZW50IiwidG9wIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibXlJbnRlcnZhbCIsIm5vV3JhcFNsaWRlcyIsImFjdGl2ZSIsImFkZFNsaWRlIiwiaW1hZ2UiLCJyYW5kb21pemUiLCJib2FyZEN0cmwiLCJib2FyZERhdGEiLCJnYWxsZXJ5IiwiTGlnaHRib3giLCJnYWxsZXJ5Q3RybCIsImdldENvbnRlbnQiLCJnYWxsZXJ5RGF0YSIsImVycm9yTXNnIiwibWVzc2FnZSIsIm9wZW5MaWdodGJveE1vZGFsIiwiaW5kZXgiLCJvcGVuTW9kYWwiLCIkdGltZW91dCIsIiR3aW5kb3ciLCJ0aGlzIiwiZmlsZSIsInJlYWRJbWFnZSIsImZpbGVzIiwiJGVtaXQiLCJuYW1lIiwibWF0Y2giLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWQiLCJlIiwiZXhwbGFpblRodW1ibmFpbCIsImRhdGFVcmwiLCJ0YXJnZXQiLCJ1cGxvYWRJbWFnZSIsIml0ZW1UaXRsZSIsImV4cGxhaW5QaG90byIsImRpc2FibGVkIiwiZmQiLCJGb3JtRGF0YSIsInRpdGxlIiwiYXBwZW5kIiwidXBsb2FkIiwicGF0Y2giLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaWRlbnRpdHkiLCJoZWFkZXJzIiwiQ29udGVudC1UeXBlIiwidW5kZWZpbmVkIiwiaW1hZ2VQYXRoIiwiaW1hZ2VfcGF0aCIsImFsZXJ0IiwidXBsb2FkR2FsbGVyeSIsInRodW1iVXJsIiwiY2FwdGlvbiIsInBvc3QiLCJyZWxvYWQiLCJNZW51IiwibWVudUl0ZW1DdHJsIiwicmVhZE1haW5NZW51IiwibWFpbk1lbnVlcyIsImZhY3RvcnkiLCJhZG1pbkZhY3RvcnkiLCJkZWxldGVJdGVtIiwiaXRlbV9pZCIsImRlbGV0ZSIsInJlYWRBcmlzdENyb3AiLCJibG9iIiwiY3JlYXRlQXJpc3RQaG90byIsInBob3RvRGF0YSIsImNyZWF0ZUl0ZW0iLCJpdGVtRGF0YSIsInJlYWRJdGVtcyIsInJlYWRJdGVtIiwidXBkYXRlSXRlbVR5cGUiLCJ1cGRhdGVEYXRhIiwicHV0IiwicmVhZFVwZGF0ZUl0ZW1UeXBlIiwicmVhZEl0ZW1UeXBlIiwiZGVsZXRlVHlwZSIsIml0ZW1fdHlwZV9pZCIsInJlYWRVcGRhdGVUeXBlIiwiaXRlbV90eXBlIiwidXBkYXRlVXBkYXRlVHlwZSIsImNyZWF0ZVR5cGUiLCJ0eXBlRGF0YSIsInJlYWRUeXBlIiwiQXV0aFRva2VuIiwiYXV0aEZhY3RvcnkiLCJnZXRVc2VyIiwiZ2V0VG9rZW4iLCIkcSIsInJlamVjdCIsImxvZ2luIiwibG9naW5EYXRhIiwic2V0VG9rZW4iLCJ0b2tlbiIsImlzTG9nZ2VkSW4iLCJsb2dvdXQiLCJhdXRoVG9rZW5GYWN0b3J5IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJnZXRJdGVtIiwiYXV0aEludGVyY2VwdG9yc0ZhY3RvcnkiLCJyZXF1ZXN0IiwiZ2FsbGVyeUZhY3RvcnkiLCJtZW51RmFjdG9yeSIsImRlbGV0ZU1lbnUiLCJjYXRlZ29yeV9pZCIsInVwZGF0ZU1lbnUiLCJjcmVhdGVNZW51IiwibWVudURhdGEiLCJyZWFkU3ViTWVudSIsIm1haW5NZW51VHlwZSIsIm9yZGVyRmFjdG9yeSIsInVwZGF0ZURlbGl2ZXJ5IiwiZGVsaURhdGEiLCJ1c2VyX2lkIiwiY3JlYXRlRGVsaXZlcnkiLCJkZWxldGVCYXNrZXQiLCJiYXNrZXRfaWQiLCJyZWFkQmFza2V0IiwiY3JlYXRlQmFza2V0IiwiYmFza2V0RGF0YSIsImRlbGV0ZU9yZGVyIiwicmVhZE9yZGVyIiwicmVhZE9yZGVyQW5kRGVsaSIsImNyZWF0ZU9yZGVyIiwib3JkZXJEYXRhIiwidXNlckZhY3RvcnkiLCJnZXRQZXJtaXNzaW9uIiwiY3JlYXRlIiwicmVnRGF0YSIsImFjdGl2ZUFjY291bnQiLCJjaGVja0NyZWRlbnRpYWxzIiwicmVzZW5kTGluayIsInVzZXJuYW1lIiwic2VuZFVzZXJuYW1lIiwidXNlckRhdGEiLCJzZW5kUGFzc3dvcmQiLCJyZXNldERhdGEiLCJyZXNldFBhc3N3b3JkIiwic2F2ZVBhc3N3b3JkIiwicmVuZXdTZXNzaW9uIiwidXBsb2FkQmFubmVyIiwiZmlsdGVyIiwiaW5wdXQiLCJwcm9wZXJ0eSIsIkFycmF5IiwidG90YWwiLCIkc3RhdGVQYXJhbXMiLCJ0eXBlX2NvZGUiLCJwYXJhbXMiLCJpdGVtc0RhdGEiLCJBZG1pbiIsIk9yZGVyIiwib3B0aW9uSXRlbSIsImF2YWlsYWJsZU9wdGlvbnMiLCJzZWxlY3RlZE9wdGlvbiIsImFtb3VudCIsIm9wdGlvbkxpc3QiLCJhZGRJdGVtIiwia2luZCIsInByaWNlIiwia2luZF9vZiIsInN1Y2Nlc3NNc2ciLCJzcGxpdCIsInRlbXAiLCJOdW1iZXIiLCJkZWNvZGVCYXNlNjRJbWFnZSIsImRhdGFTdHJpbmciLCJtYXRjaGVzIiwiRXJyb3IiLCJ0eXBlIiwiZGF0YTIiLCJyZWFkTWVudSIsInJlYWRNZW51U3RhdHVzIiwidHlwZV9kZXNjcmlwdGlvbiIsInVwZGF0ZUl0ZW0iLCJpdGVtX25hbWUiLCJ1cGRhdGVEYXRhMiIsIm1haW5QaG90b0NoYW5nZWQiLCJtYWluVGh1bWJuYWlsIiwicmVhZFBob3RvIiwibWFpblBob3RvIiwiaXRlbV9wYXRoIiwiZXhwbGFpblBob3RvQ2hhbmdlZCIsInJlYWRQaG90b0V4cGxhaW4iLCJleHBsYWluIiwibXlJbWFnZSIsIm15Q3JvcHBlZEltYWdlIiwiaGFuZGxlRmlsZVNlbGVjdCIsImV2dCIsImN1cnJlbnRUYXJnZXQiLCJyZWFkZXIiLCIkYXBwbHkiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvbiIsInJlYWRDcm9wSW1hZ2UiLCJ0aHVtYm5haWwiLCJiYXNlNjRVcmwiLCJmaWxlUGF0aCIsImtpbmRMaXN0IiwidHlwZV90aW55IiwidHlwZV9wcmljZSIsImFkZExpbmUiLCJraW5kRGF0YSIsImtpbmRWYWx1ZSIsImtpbmRQcmljZSIsIm1haW5JbWFnZVBhdGgiLCJleHBsYWluSW1hZ2VQYXRoIiwidGh1bWJuYWlsUGF0aCIsImNyZWF0ZVBob3RvIiwidXBsb2FkRGF0YSIsInRvU3RyaW5nIiwidXBkYXRlIiwiZGVsZXRlRGF0YSIsInN1Yk1lbnVEYXRhcyIsInVwZGF0YURhdGEiLCJzcGxpdE9wdGlvbkRhdGFzIiwib3B0aW9uRGF0YXMiLCJ1cGRhdGVUeXBlIiwidXBkYXRlaXRlbVR5cGUiLCJraW5kQXJyYXkiLCJwcmljZUFycmF5IiwiY29weUl0ZW1UeXBlIiwidHlwZURhdGFzIiwia2luZERhdGFzIiwiY29weVR5cGUiLCJjYXRlZ29yeSIsIkF1dGgiLCIkbG9jYXRpb24iLCIkaW50ZXJ2YWwiLCJsb2FkbWUiLCJsb2FkaW5nIiwiY2hlY2tTZXNzaW9uIiwidXNlciIsInBlcm1pc3Npb24iLCJhdXRob3JpemVkIiwiaW50ZXJ2YWwiLCJjYW5jZWwiLCJzZWxmIiwicGFyc2VKd3QiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsImV4cGlyZVRpbWUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiZXhwIiwic2hvd01vZGFsIiwiY2hvaWNlTWFkZSIsImhpZGVNb2RhbCIsIk1vZGFsQm9keSIsImVuZFNlc3Npb24iLCJvcHRpb24iLCJtb2RhbEhlYWRlciIsIm1vZGFsQm9keSIsImhpZGVCdXR0b24iLCIkIiwibW9kYWwiLCJiYWNrZHJvcCIsImRvTG9naW4iLCJ2YWxpZCIsImV4cGlyZWQiLCJyZXNlbmQiLCJyZXNldHVzZXJuYW1lIiwicmVzZXRwYXNzd29yZCIsIm1haW4iLCJnZXRJdGVtRmFpbCIsImNhc2hSZWNlaXB0IiwiZ2V0Q2FzaFJlY2VpcHQiLCJyZWFkQWRkcmVzcyIsImRhdW0iLCJwb3N0Y29kZSIsImxvYWQiLCJhZGRyZXNzRGV0YWlsIiwiUG9zdGNvZGUiLCJvbmNvbXBsZXRlIiwic2lndW5ndV9jb2RlIiwic2lndW5ndUNvZGUiLCJqaWJ1bl9hZGRyZXNzIiwiamlidW5BZGRyZXNzIiwicm9hZF9hZGRyZXNzIiwicm9hZEFkZHJlc3MiLCJvcGVuIiwiZGVsaXZlcnkiLCJpdGVtUHJpY2UiLCJhbGxJdGVtUHJpY2UiLCJjb25maXJtT3JkZXIiLCJkYWxpRGF0YSIsInJlY2VpcHREYXRhIiwibWFrZUJhc2tldCIsImoiLCJlbWFpbCIsImhpZGUiLCJjb25maXJtZWQiLCJyZWdTdGVwMSIsInJlZ1N0ZXAyIiwicmVnU3RlcDMiLCIkcGFyc2UiLCJwYXJzZWRGaWxlIiwiZmlsZU1vZGVsIiwicGFyc2VkZmlsZVNldHRlciIsImFzc2lnbiIsImJpbmQiLCJkb0NvbmZpcm0iLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiZWxlIiwiY29uZmlybSIsIiRvYnNlcnZlIiwiJHdhdGNoIiwiZG9Xcml0ZSIsIndvcmQiLCJ2ZXJzaW9uIiwiYWdlbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImFwcE5hbWUiLCJzZWFyY2giLCJSZWdFeHAiLCJleGVjIiwiJDEiLCIkMiIsImxvY2F0aW9uIiwiaHJlZiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQUNBLGVBQ0Esa0JBQ0Esa0JBQ0Esa0JBQ0EsbUJBQ0Esd0JBQ0Esa0JBQ0Esa0JBQ0EsbUJBQ0EsWUFDQSxtQkFDQSxrQkFDQSxvQkFDQSxvQkFDQUMsUUFBQSxnQkFBQSxTQUFBQyxHQUNBQSxFQUFBQyxhQUFBQyxLQUFBLHNCQ2pCQSxJQUFBQyxLQUFBTixRQUFBQyxPQUFBLE1BQ0FLLEtBQUFKLFFBQUEsaUJBQUEscUJBQUEsb0JBQUEsU0FBQUssRUFBQUMsRUFBQUMsR0FDQUQsRUFBQUUsVUFBQSxLQUNBRCxFQUFBRSxXQUFBLElBQ0FGLEVBQUFHLFdBQUEsR0FFQUwsRUFBQU0sTUFBQSxPQUNBQyxJQUFBLElBQ0FDLE9BQ0FDLGdCQUNBQyxZQUFBLHNCQUlBSixNQUFBLHFCQUVBQyxJQUFBLGlCQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSxxQ0FDQUMsV0FBQSxVQUNBQyxhQUFBLGVBS0FOLE1BQUEscUJBRUFDLElBQUEsaUJBQ0FDLE9BQ0FDLGdCQUNBQyxZQUFBLHFDQUNBQyxXQUFBLFVBQ0FDLGFBQUEsZUFLQU4sTUFBQSxxQkFFQUMsSUFBQSxpQkFDQUMsT0FDQUssbUJBQ0FILFlBQUEscUNBQ0FDLFdBQUEsVUFDQUMsYUFBQSxlQUtBTixNQUFBLGFBQ0FDLElBQUEsUUFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEsOEJBS0FKLE1BQUEsYUFDQUMsSUFBQSxRQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSxrQ0FJQUosTUFBQSxvQkFDQUMsSUFBQSxxQkFDQUMsT0FDQUMsZ0JBQ0FDLFlBQUEsc0NBQ0FDLFdBQUEsd0JBQ0FDLGFBQUEsc0JBS0FOLE1BQUEsZUFDQUMsSUFBQSxVQUNBQyxPQUNBQyxnQkFDQUMsWUFBQSxvQ0FLQUosTUFBQSxZQUNBQyxJQUFBLE9BQ0FDLE9BQ0FDLGdCQUNBQyxZQUFB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RUFBQUEsS0FBQXNDLFFBQ0EyTixFQUFBM0ksTUFBQXBLLEVBQUE0TSxTQUFBaEssS0FBQSxTQUFBRSxHQUNBQSxFQUFBQSxLQUFBQyxTQUNBL0MsRUFBQTRHLFVBQUEsRUFDQTVHLEVBQUE2TyxXQUFBL0wsRUFBQUEsS0FBQXNDLFFBQ0FJLEVBQUEsV0FDQWhFLEVBQUFTLEdBQUEsUUFDQSxNQUVBYSxFQUFBQSxLQUFBc1MsU0FDQXBWLEVBQUFvVixTQUFBLEVBQ0FwVixFQUFBNEcsVUFBQSxFQUNBNUcsRUFBQW1GLFNBQUFyQyxFQUFBQSxLQUFBc0MsVUFFQXBGLEVBQUE0RyxVQUFBLEVBQ0E1RyxFQUFBbUYsU0FBQXJDLEVBQUFBLEtBQUFzQyxhQUtBcEYsRUFBQTRHLFVBQUEsRUFDQTVHLEVBQUFtRixTQUFBckMsRUFBQUEsS0FBQXNDLFlBS0FwRixFQUFBNEcsVUFBQSxFQUNBNUcsRUFBQW1ULFNBQUEsRUFDQW5ULEVBQUFtRixTQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLFtcclxuICAgICd1aS5yb3V0ZXInLFxyXG4gICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAnbWVudUNvbnRyb2xsZXJzJyxcclxuICAgICd1c2VyQ29udHJvbGxlcnMnLFxyXG4gICAgJ21haW5Db250cm9sbGVycycsXHJcbiAgICAnZW1haWxDb250cm9sbGVycycsXHJcbiAgICAnbWFuYWdlbWVudENvbnRyb2xsZXJzJyxcclxuICAgICdpdGVtQ29udHJvbGxlcnMnLFxyXG4gICAgJ3R5cGVDb250cm9sbGVycycsXHJcbiAgICAnb3JkZXJDb250cm9sbGVycycsXHJcbiAgICAndWlDcm9wcGVyJyxcclxuICAgICdiYW5uZXJDb250cm9sbGVyJyxcclxuICAgICdnYWxsZXJ5U2VydmljZXMnLFxyXG4gICAgJ2Jvb3RzdHJhcExpZ2h0Ym94JyxcclxuICAgICdib2FyZENvbnRyb2xsZXInXHJcbl0pLmNvbmZpZyhmdW5jdGlvbigkaHR0cFByb3ZpZGVyKXtcclxuICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdBdXRoSW50ZXJjZXB0b3JzJyk7XHJcbn0pO1xyXG4iLCJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpO1xyXG5hcHAuY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xyXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnJyk7XHJcbiAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2FwcCcsIHtcclxuICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFpbi9ob21lLmh0bWwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLnJlZ2lzdGVyU3RlcDEnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdyZWdpc3Rlci9zdGVwMScsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL3JlZ2lzdGVyL3JlZ2lzdGVyU3RlcDEuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZWdDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVnaXN0ZXInXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5yZWdpc3RlclN0ZXAyJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAncmVnaXN0ZXIvc3RlcDInLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9yZWdpc3Rlci9yZWdpc3RlclN0ZXAyLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVnQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3JlZ2lzdGVyJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAucmVnaXN0ZXJTdGVwMycsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJ3JlZ2lzdGVyL3N0ZXAzJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QGFwcCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdXNlcnMvcmVnaXN0ZXIvcmVnaXN0ZXJTdGVwMy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlZ0N0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdyZWdpc3RlcidcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmxvZ2luJywge1xyXG4gICAgICAgICAgICB1cmw6ICdsb2dpbicsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL2xvZ2luL2xvZ2luLmh0bWwnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5ib2FyZCcsIHtcclxuICAgICAgICAgICAgdXJsOiAnYm9hcmQnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jYXRlZ29yeWVzL2JvYXJkL2hvbWUuaHRtbCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdhcHAud3JpdGVBcnRpY2xlJywge1xyXG4gICAgICAgICAgICB1cmw6ICdib2FyZC93cml0ZUF0cmljbGUnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jYXRlZ29yeWVzL2JvYXJkL3dyaXRlQXJ0aWNsZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnY3JlYXRlQm9hcmRDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjcmVhdGVCb2FyZEN0cmwnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5nYWxsZXJ5Jywge1xyXG4gICAgICAgICAgICB1cmw6ICdnYWxsZXJ5JyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvY2F0ZWdvcnllcy9nYWxsZXJ5L2hvbWUuaHRtbCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLnVzZXInLCB7XHJcbiAgICAgICAgICAgIHVybDogJ3VzZXInLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9wYXJ0aWFsL3VzZXIuaHRtbCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuY29tbWVyY2VEZXRhaWwnLCB7XHJcbiAgICAgICAgICAgIHVybDogJ2NvbW1lcmNlLWRldGFpbCcsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL3BhcnRpYWwvY29tbWVyY2VEZXRhaWwuaHRtbCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuYmFza2V0Jywge1xyXG4gICAgICAgICAgICB1cmw6ICdiYXNrZXQnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9wYXJ0aWFsL2Jhc2tldC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnYmFza2V0Q3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYmFza2V0J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuY2F0ZWdvcnknLCB7XHJcbiAgICAgICAgICAgIHVybDogJ2NhdGVnb3J5PTpjYXRlZ29yeV9pZCcsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnc3ViTWVudUBhcHAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWVudWVzL3N1Yk1lbnUuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N1Yk1lbnVDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdzdWJNZW51J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvY2F0ZWdvcnllcy9pdGVtcy9ob21lLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdnZXRUeXBlSXRlbXNDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdnZXRUeXBlSXRlbXMnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmNhdGVnb3J5Lml0ZW1fdHlwZScsIHtcclxuICAgICAgICAgICAgdXJsOiAnL2l0ZW1fdHlwZT06dHlwZV9jb2RlJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvY2F0ZWdvcnllcy9pdGVtcy9ob21lLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdnZXRUeXBlSXRlbXNDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdnZXRUeXBlSXRlbXMnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmNhdGVnb3J5Lml0ZW1fdHlwZS5zaG93Jywge1xyXG4gICAgICAgICAgICB1cmw6ICcvaXRlbTppdGVtX2lkJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvY2F0ZWdvcnllcy9pdGVtcy9pdGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdnZXRUeXBlSXRlbUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2dldFR5cGVJdGVtJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuY2F0ZWdvcnkuc2hvdycsIHtcclxuICAgICAgICAgICAgdXJsOiAnL2l0ZW06aXRlbV9pZCcsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2NhdGVnb3J5ZXMvaXRlbXMvaXRlbS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZ2V0VHlwZUl0ZW1DdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdnZXRUeXBlSXRlbSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLm1ha2VPcmRlcicsIHtcclxuICAgICAgICAgICAgdXJsOiAnbWFrZU9yZGVyJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvb3JkZXIvbWFrZU9yZGVyLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZWFkT3JkZXJDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdyZWFkT3JkZXInXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5jb25maXJtT3JkZXInLCB7XHJcbiAgICAgICAgICAgIHVybDogJ2NvbmZpcm1PcmRlcicsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAnYm9keUNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL29yZGVyL2NvbmZpcm1PcmRlci5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVhZE9yZGVyQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVhZE9yZGVyQ3RybCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgncmVzZXR1c2VybmFtZScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9yZXNldHVzZXJuYW1lJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL3Jlc2V0L3VzZXJuYW1lLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJuYW1lQ3RybCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd1c2VybmFtZSdcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdyZXNldHBhc3N3b3JkJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Jlc2V0cGFzc3dvcmQnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdXNlcnMvcmVzZXQvcGFzc3dvcmQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncGFzc3dvcmRDdHJsJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ3Jlc2V0JyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Jlc2V0Lzp0b2tlbicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9yZXNldC9uZXdwYXNzd29yZC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZXNldEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVzZXQnXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FjdGl2YXRlJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2FjdGl2YXRlLzp0b2tlbicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy91c2Vycy9hY3RpdmF0aW9uL2FjdGl2YXRlLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2VtYWlsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdlbWFpbCdcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdyZXNlbmQnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcmVzZW5kJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3VzZXJzL2FjdGl2YXRpb24vcmVzZW5kLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Jlc2VuZEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVzZW5kJ1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuaW50cm8nLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdpbnRybycsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL2NvbXBhbnlJbnRyb2R1Y2UudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAudGVybXMnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICd0ZXJtcycsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdib2R5Q29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL3Rlcm1zLnRwbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLnByaXZhY3knLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdwcml2YWN5JyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2JvZHlDb250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9jb21wYW55SW5mb3JtYXRpb24vcHJpdmFjeS50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAvLyDqtIDrpqzsnpAg7Y6Y7J207KeAXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmFkbWluT3JkZXJTdGF0dXMnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdhZG1pbk9yZGVyU3RhdHVzJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2FkbWluQ29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21hbmFnZW1lbnQvcGFydGlhbC9vcmRlclN0YXR1cy5odG1sJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuYWRtaW5NZW1iZXJzJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnYWRtaW5NZW1iZXJzJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2FkbWluQ29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21hbmFnZW1lbnQvcGFydGlhbC9tZW1iZXJzLmh0bWwnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5hZG1pbkNhdGVnb3J5JyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnYWRtaW5DYXRlZ29yeScsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdhZG1pbkNvbnRlbnRAJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L3BhcnRpYWwvY2F0ZWdvcnkuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluTWVudUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdtYWluTWVudSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLmFkbWluVHlwZUFuZEl0ZW1zJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnYWRtaW5UeXBlQW5kSXRlbXMnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnYWRtaW5Db250ZW50QCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFuYWdlbWVudC9wYXJ0aWFsL3R5cGVBbmRJdGVtcy5odG1sJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuYWRtaW5HYWxsZXJ5JyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnYWRtaW5HYWxsZXJ5JyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2FkbWluQ29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21hbmFnZW1lbnQvcGFydGlhbC9nYWxsZXJ5Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXBsb2FkZ2FsbGVyeUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd1cGxvYWRHYWxsZXJ5J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAuYWRtaW5MYWJvcmF0b3J5JyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnYWRtaW5MYWJvcmF0b3J5JyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2FkbWluQ29udGVudEAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvYWRtaW4vYWRtaW5MYWJvcmF0b3J5LnRwbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5tYW5hZ2VtZW50JyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnbWFuYWdlbWVudCcsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdhZG1pbkNvbnRlbnRAYXBwJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L2hvbWUuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdtZW51QGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L21lbnUuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5tYW5hZ2VtZW50LnR5cGVBbmRJdGVtcy51cGRhdGUnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvdXBkYXRlVHlwZTppdGVtX3R5cGUnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGVudHNAYXBwLm1hbmFnZW1lbnQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21hbmFnZW1lbnQvcGFydGlhbC91cGRhdGUvdHlwZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VwZGF0ZVR5cGVDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndXBkYXRlVHlwZSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC5zdGF0ZSgnYXBwLm1hbmFnZW1lbnQudHlwZUFuZEl0ZW1zLnVwZGF0ZUl0ZW1UeXBlJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3VwZGF0ZUl0ZW06aXRlbV9pZCcsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50c0BhcHAubWFuYWdlbWVudCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvbWFuYWdlbWVudC9wYXJ0aWFsL3VwZGF0ZS9pdGVtVHlwZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VwZGF0ZUl0ZW1UeXBlQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3VwZGF0ZUl0ZW1UeXBlJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLnN0YXRlKCdhcHAubWFuYWdlbWVudC50eXBlQW5kSXRlbXMudXBkYXRlSXRlbScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy91cGRhdGUvaXRlbTppdGVtX2lkJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRzQGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L3BhcnRpYWwvdXBkYXRlL2l0ZW0uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1cGRhdGVJdGVtQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3VwZGF0ZUl0ZW0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAuc3RhdGUoJ2FwcC5tYW5hZ2VtZW50LnR5cGVBbmRJdGVtcy5yZWFkSXRlbScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogJzppdGVtX2lkJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRzQGFwcC5tYW5hZ2VtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYW5hZ2VtZW50L3BhcnRpYWwvcmVhZC9pdGVtLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVhZEl0ZW1DdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVhZEl0ZW0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxufSk7XHJcblxyXG5hcHAucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCBVc2VyLCAkc3RhdGUpIHtcclxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgb3B0aW9ucykge1xyXG4gICAgfSk7XHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XHJcbiAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgIH0pO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5kaXJlY3RpdmUoJ2FkbWluVXNlcnMnLCBbZnVuY3Rpb24gKCkge1xyXG4gICByZXR1cm4ge1xyXG4gICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgLy8gIHJlcXVpcmU6IFsnYWRtaW5Vc2VycyddLFxyXG4gICAgICAgY29udHJvbGxlcjogW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICAgICB2YXIgTmFtZUN0cmwgPSB0aGlzO1xyXG4gICAgICAgfV0sXHJcbiAgICAgICBjb250cm9sbGVyQXM6ICdOYW1lQ3RybCcsXHJcbiAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL2FkbWluVXNlcnMudHBsLmh0bWwnLFxyXG4gICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAvL1xyXG4gICAgICAgfVxyXG4gICB9O1xyXG59XSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgnYmFubmVyJywgWyckaHR0cCcsIGZ1bmN0aW9uICgkaHR0cCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdiYW5uZXJDdHJsJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9iYW5uZXIudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL2Jhbm5lcicpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwQ3RybC5iYW5uZXJEYXRhID0gcmVzdWx0LmRhdGEuYmFubmVyRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuu2iOufrOyYpOyngCDrqrvtlZjsmIDsirXri4jri6QuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKVxyXG5cclxuLmNvbnRyb2xsZXIoJ0Nhcm91c2VsQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuICAgICRzY29wZS5teUludGVydmFsID0gMjUwMDtcclxuICAgICRzY29wZS5ub1dyYXBTbGlkZXMgPSBmYWxzZTtcclxuICAgICRzY29wZS5hY3RpdmUgPSAwO1xyXG4gICAgdmFyIHNsaWRlcyA9ICRzY29wZS5zbGlkZXMgPSBbXTtcclxuICAgIHZhciBjdXJySW5kZXggPSAwO1xyXG5cclxuICAgICRzY29wZS5hZGRTbGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuZXdXaWR0aCA9IDYwMCArIHNsaWRlcy5sZW5ndGggKyAxO1xyXG4gICAgICAgIHNsaWRlcy5wdXNoKHtcclxuICAgICAgICAgICAgaW1hZ2U6IFsnL2ltYWdlcy9pdGVtcy9iYW5uZXIvMS5qcGcnLCcvaW1hZ2VzL2l0ZW1zL2Jhbm5lci8yLmpwZycsICcvaW1hZ2VzL2l0ZW1zL2Jhbm5lci8zLmpwZyddW3NsaWRlcy5sZW5ndGggJSAzXSxcclxuICAgICAgICAgICAgaWQ6IGN1cnJJbmRleCsrXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5yYW5kb21pemUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5kZXhlcyA9IGdlbmVyYXRlSW5kZXhlc0FycmF5KCk7XHJcbiAgICAgICAgYXNzaWduTmV3SW5kZXhlc1RvU2xpZGVzKGluZGV4ZXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xyXG4gICAgICAgICRzY29wZS5hZGRTbGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJhbmRvbWl6ZSBsb2dpYyBiZWxvd1xyXG5cclxuICAgIGZ1bmN0aW9uIGFzc2lnbk5ld0luZGV4ZXNUb1NsaWRlcyhpbmRleGVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzbGlkZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHNsaWRlc1tpXS5pZCA9IGluZGV4ZXMucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSW5kZXhlc0FycmF5KCkge1xyXG4gICAgICAgIHZhciBpbmRleGVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJySW5kZXg7ICsraSkge1xyXG4gICAgICAgICAgICBpbmRleGVzW2ldID0gaTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNodWZmbGUoaW5kZXhlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NjI4MDIjOTYyODkwXHJcbiAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgdmFyIHRtcCwgY3VycmVudCwgdG9wID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAodG9wKSB7XHJcbiAgICAgICAgICAgIHdoaWxlICgtLXRvcCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh0b3AgKyAxKSk7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSBhcnJheVtjdXJyZW50XTtcclxuICAgICAgICAgICAgICAgIGFycmF5W2N1cnJlbnRdID0gYXJyYXlbdG9wXTtcclxuICAgICAgICAgICAgICAgIGFycmF5W3RvcF0gPSB0bXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdib2FyZCcsIFsnJGh0dHAnLCBmdW5jdGlvbiAoJGh0dHApIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdib2FyZEN0cmwnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL2JvYXJkLnRwbC5odG1sJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBib2FyZEN0cmwgPSBjdHJscztcclxuXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvYm9hcmQnKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9hcmRDdHJsLmJvYXJkRGF0YSA9IHJlc3VsdC5kYXRhLmJvYXJkRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2dhbGxlcnlDb250ZW50JywgWydnYWxsZXJ5JywgJ0xpZ2h0Ym94JywgZnVuY3Rpb24gKGdhbGxlcnksIExpZ2h0Ym94KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBOYW1lQ3RybCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdnYWxsZXJ5Q3RybCcsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvZ2FsbGVyeS50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgdmFyIGdhbGxlcnlDdHJsID0gY3RybHM7XHJcblxyXG4gICAgICAgICAgICAgICAgZ2FsbGVyeS5nZXRDb250ZW50KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeUN0cmwuZ2FsbGVyeURhdGEgPSByZXN1bHQuZGF0YS5nYWxsZXJ5RGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5Q3RybC5lcnJvck1zZyA9IHJlc3VsdC5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZ2FsbGVyeUN0cmwub3BlbkxpZ2h0Ym94TW9kYWwgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBMaWdodGJveC5vcGVuTW9kYWwoZ2FsbGVyeUN0cmwuZ2FsbGVyeURhdGEsIGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pXHJcbiAgICAuY29udHJvbGxlcigndXBsb2FkZ2FsbGVyeUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdGltZW91dCwgJGh0dHAsICR3aW5kb3csICRzdGF0ZSkge1xyXG4gICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZmlsZSA9IHt9O1xyXG5cclxuLy8g7J6R7ZKIIOyEpOuqhSDsnbTrr7jsp4Ag7JeF66Gc65OcIOuQmOyXiOuKlOyngCDrs7Tsl6zso7zquLBcclxuICAgICAgICB0aGlzLnJlYWRJbWFnZSA9IGZ1bmN0aW9uIChmaWxlcykge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0ubmFtZS5tYXRjaCgvXFwuKHBuZ3xqcGVnfGpwZykkLykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbC5kYXRhVXJsID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbi8vIOyeke2SiCDshKTrqoUgIOydtOuvuOyngCDsl4XroZzrk5ztlbTshJwg6rK966GcIOyggOyepVxyXG4gICAgICAgIHRoaXMudXBsb2FkSW1hZ2UgPSBmdW5jdGlvbiAoaXRlbVRpdGxlKSB7XHJcbi8vIOyeke2SiCDshKTrqoUgIOyXheuhnOuTnCDsl6zrtoBcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICAgIGFwcC5leHBsYWluUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgIGZkLnRpdGxlID0gaXRlbVRpdGxlO1xyXG4gICAgICAgICAgICBmZC5hcHBlbmQoJ215ZmlsZScsIGFwcC5maWxlLnVwbG9hZCk7XHJcbiAgICAgICAgICAgICRodHRwLnBhdGNoKCcvYXBpL2dhbGxlcnkvJywgZmQsIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmltYWdlUGF0aCA9IGRhdGEuZGF0YS5pbWFnZV9wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5QaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy51cGxvYWRHYWxsZXJ5ID0gZnVuY3Rpb24gKHRpdGxlKSB7XHJcbiAgICAgICAgICAgIGdhbGxlcnlEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgdGh1bWJVcmw6IGFwcC5pbWFnZVBhdGgsXHJcbiAgICAgICAgICAgICAgICB1cmw6IGFwcC5pbWFnZVBhdGgsXHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uOiB0aXRsZVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9nYWxsZXJ5JywgZ2FsbGVyeURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IHJlc3VsdC5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdtZW51SXRlbScsIFsnTWVudScsIGZ1bmN0aW9uIChNZW51KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbWVudUl0ZW1DdHJsJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9tZW51SXRlbS50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVudUl0ZW1DdHJsID0gY3RybHM7XHJcbiAgICAgICAgICAgICAgICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51SXRlbUN0cmwubWFpbk1lbnVlcyA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVudUl0ZW1DdHJsLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhZG1pblNlcnZpY2VzJyxbXSlcclxuLmZhY3RvcnkoJ0FkbWluJywgZnVuY3Rpb24oJGh0dHApe1xyXG4gIGFkbWluRmFjdG9yeSA9IHt9O1xyXG5cclxuICBhZG1pbkZhY3RvcnkuZGVsZXRlSXRlbSA9IGZ1bmN0aW9uKGl0ZW1faWQpe1xyXG4gICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9pdGVtLycraXRlbV9pZCk7XHJcbiAgfTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LnJlYWRBcmlzdENyb3AgPSBmdW5jdGlvbihibG9iKXtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NyZWF0ZUNyb3BJbWFnZScsIGJsb2IpO1xyXG4gIH07XHJcbiAgLy8gQXJ0aXN0LmNyZWF0ZVBob3RvKHBob3RvRGF0YSlcclxuICBhZG1pbkZhY3RvcnkuY3JlYXRlQXJpc3RQaG90byA9IGZ1bmN0aW9uKHBob3RvRGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9hcnRpc3RQcm9maWxlcycsIHBob3RvRGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LmNyZWF0ZUl0ZW0gPSBmdW5jdGlvbihpdGVtRGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9pdGVtJywgaXRlbURhdGEpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5yZWFkSXRlbXMgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9pdGVtJyk7XHJcbiAgfTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LnJlYWRJdGVtID0gZnVuY3Rpb24oaXRlbV9pZCl7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2l0ZW0vJytpdGVtX2lkKTtcclxuICB9O1xyXG5cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PSB0eXBlU2VydmljZXMg7IOd7ISxID09PT09PT09PT09PT09PT09PT09PT09PT09PSAvL1xyXG5cclxuXHJcbiAgYWRtaW5GYWN0b3J5LnVwZGF0ZUl0ZW1UeXBlID0gZnVuY3Rpb24odXBkYXRlRGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL2l0ZW1UeXBlJywgdXBkYXRlRGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LnJlYWRVcGRhdGVJdGVtVHlwZSA9IGZ1bmN0aW9uKGl0ZW1faWQpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9pdGVtVHlwZS8nK2l0ZW1faWQpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5yZWFkSXRlbVR5cGUgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9pdGVtVHlwZScpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5kZWxldGVUeXBlID0gZnVuY3Rpb24oaXRlbV90eXBlX2lkKXtcclxuICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvdHlwZS8nK2l0ZW1fdHlwZV9pZCk7XHJcbiAgfTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LnJlYWRVcGRhdGVUeXBlID0gZnVuY3Rpb24oaXRlbV90eXBlKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdHlwZS8nK2l0ZW1fdHlwZSk7XHJcbiAgfTtcclxuXHJcbiAgYWRtaW5GYWN0b3J5LnVwZGF0ZVVwZGF0ZVR5cGUgPSBmdW5jdGlvbih1cGRhdGVEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvdHlwZScsIHVwZGF0ZURhdGEpO1xyXG4gIH07XHJcblxyXG4gIGFkbWluRmFjdG9yeS5jcmVhdGVUeXBlID0gZnVuY3Rpb24odHlwZURhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdHlwZScsIHR5cGVEYXRhKTtcclxuICB9O1xyXG5cclxuICBhZG1pbkZhY3RvcnkucmVhZFR5cGUgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS90eXBlJyk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGFkbWluRmFjdG9yeTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhdXRoU2VydmljZXMnLFtdKVxyXG5cclxuLmZhY3RvcnkoJ0F1dGgnLCBmdW5jdGlvbigkaHR0cCwgQXV0aFRva2VuKXtcclxuICAgIHZhciBhdXRoRmFjdG9yeSA9IHt9O1xyXG4vLyBBdXRoLmdldFVzZXIoKTtcclxuICAgIGF1dGhGYWN0b3J5LmdldFVzZXIgPSBmdW5jdGlvbigpe1xyXG4gICAgICBpZihBdXRoVG9rZW4uZ2V0VG9rZW4oKSl7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbWUnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkcS5yZWplY3Qoe21lc3NhZ2U6J1VzZXIgaGFzIG5vIHRva2VuJ30pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuLy8gQXV0aC5sb2dpbihsb2dpbkRhdGEpO1xyXG4gICAgYXV0aEZhY3RvcnkubG9naW4gPSBmdW5jdGlvbihsb2dpbkRhdGEpe1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9hdXRoZW50aWNhdGUnLCBsb2dpbkRhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgQXV0aFRva2VuLnNldFRva2VuKGRhdGEuZGF0YS50b2tlbik7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbi8vIEF1dGguaXNMb2dnZWRJbigpO1xyXG4gICAgYXV0aEZhY3RvcnkuaXNMb2dnZWRJbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgIGlmKEF1dGhUb2tlbi5nZXRUb2tlbigpKXtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4vLyBBdXRoLmxvZ291dCgpO1xyXG4gICAgYXV0aEZhY3RvcnkubG9nb3V0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgQXV0aFRva2VuLnNldFRva2VuKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGF1dGhGYWN0b3J5O1xyXG59KVxyXG5cclxuLmZhY3RvcnkoJ0F1dGhUb2tlbicsIGZ1bmN0aW9uKCR3aW5kb3cpe1xyXG4gIHZhciBhdXRoVG9rZW5GYWN0b3J5ID0ge307XHJcblxyXG4gIC8vIEF1dGhUb2tlbi5zZXRUb2tlbih0b2tlbik7XHJcbiAgYXV0aFRva2VuRmFjdG9yeS5zZXRUb2tlbiA9IGZ1bmN0aW9uKHRva2VuKXtcclxuICAgIGlmKHRva2VuKXtcclxuICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW4nLCB0b2tlbik7XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuJywgdG9rZW4pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4vLyBBdXRoVG9rZW4uZ2V0VG9rZW4oKTtcclxuICBhdXRoVG9rZW5GYWN0b3J5LmdldFRva2VuID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpO1xyXG4gIH07XHJcbiAgcmV0dXJuIGF1dGhUb2tlbkZhY3Rvcnk7XHJcbn0pXHJcblxyXG4uZmFjdG9yeSgnQXV0aEludGVyY2VwdG9ycycsIGZ1bmN0aW9uKEF1dGhUb2tlbil7XHJcbiAgdmFyIGF1dGhJbnRlcmNlcHRvcnNGYWN0b3J5ID0ge307XHJcblxyXG4gIGF1dGhJbnRlcmNlcHRvcnNGYWN0b3J5LnJlcXVlc3QgPSBmdW5jdGlvbihjb25maWcpe1xyXG4gICAgdmFyIHRva2VuID0gQXV0aFRva2VuLmdldFRva2VuKCk7XHJcblxyXG4gICAgaWYodG9rZW4pIGNvbmZpZy5oZWFkZXJzWyd4LWFjY2Vzcy10b2tlbiddID0gdG9rZW47XHJcblxyXG4gICAgcmV0dXJuIGNvbmZpZztcclxuICB9O1xyXG4gIHJldHVybiBhdXRoSW50ZXJjZXB0b3JzRmFjdG9yeTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdnYWxsZXJ5U2VydmljZXMnLFtdKVxyXG4gICAgLmZhY3RvcnkoJ2dhbGxlcnknLCBmdW5jdGlvbigkaHR0cCl7XHJcbiAgICAgICAgZ2FsbGVyeUZhY3RvcnkgPSB7fTtcclxuXHJcbiAgICAgICAgLy9nYWxsZXJ5LmdldENvbnRlbnQoKTtcclxuICAgICAgICBnYWxsZXJ5RmFjdG9yeS5nZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2dhbGxlcnknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdhbGxlcnlGYWN0b3J5O1xyXG4gICAgfSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdtZW51U2VydmljZXMnLFtdKVxyXG4uZmFjdG9yeSgnTWVudScsIGZ1bmN0aW9uKCRodHRwKXtcclxuICBtZW51RmFjdG9yeSA9IHt9O1xyXG5cclxuICBtZW51RmFjdG9yeS5kZWxldGVNZW51ID0gZnVuY3Rpb24oY2F0ZWdvcnlfaWQpe1xyXG4gICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9tZW51LycrY2F0ZWdvcnlfaWQpO1xyXG4gIH07XHJcblxyXG4gIG1lbnVGYWN0b3J5LnVwZGF0ZU1lbnUgPSBmdW5jdGlvbih1cGRhdGVEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvbWVudS8nLCB1cGRhdGVEYXRhKTtcclxuICB9O1xyXG5cclxuICBtZW51RmFjdG9yeS5jcmVhdGVNZW51ID0gZnVuY3Rpb24obWVudURhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbWVudScsIG1lbnVEYXRhKTtcclxuICB9O1xyXG5cclxuICBtZW51RmFjdG9yeS5yZWFkTWFpbk1lbnUgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9tZW51Jyk7XHJcbiAgfTtcclxuICBtZW51RmFjdG9yeS5yZWFkU3ViTWVudSA9ICBmdW5jdGlvbihtYWluTWVudVR5cGUpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9tZW51LycrbWFpbk1lbnVUeXBlKTtcclxuICB9O1xyXG4gIHJldHVybiBtZW51RmFjdG9yeTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdvcmRlclNlcnZpY2VzJyxbXSlcclxuLmZhY3RvcnkoJ09yZGVyJywgZnVuY3Rpb24oJGh0dHApe1xyXG4gIG9yZGVyRmFjdG9yeSA9IHt9O1xyXG4gIFxyXG4gIG9yZGVyRmFjdG9yeS51cGRhdGVEZWxpdmVyeSA9IGZ1bmN0aW9uKGRlbGlEYXRhKXtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvZGVsaXZlcnkvJytkZWxpRGF0YS51c2VyX2lkLCBkZWxpRGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgb3JkZXJGYWN0b3J5LmNyZWF0ZURlbGl2ZXJ5ID0gZnVuY3Rpb24oZGVsaURhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvZGVsaXZlcnknLGRlbGlEYXRhKTtcclxuICB9O1xyXG5cclxuICBvcmRlckZhY3RvcnkuZGVsZXRlQmFza2V0ID0gZnVuY3Rpb24oYmFza2V0X2lkKXtcclxuICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvYmFza2V0LycrYmFza2V0X2lkKTtcclxuICB9O1xyXG5cclxuICBvcmRlckZhY3RvcnkucmVhZEJhc2tldD0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvYmFza2V0Jyk7XHJcbiAgfTtcclxuXHJcbiAgb3JkZXJGYWN0b3J5LmNyZWF0ZUJhc2tldCA9IGZ1bmN0aW9uKGJhc2tldERhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvYmFza2V0JywgYmFza2V0RGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgb3JkZXJGYWN0b3J5LmRlbGV0ZU9yZGVyID0gZnVuY3Rpb24oaXRlbV9pZCl7XHJcbiAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL21ha2VPcmRlci8nK2l0ZW1faWQpO1xyXG4gIH07XHJcblxyXG4gIG9yZGVyRmFjdG9yeS5yZWFkT3JkZXIgPSBmdW5jdGlvbih1c2VyX2lkKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWFrZU9yZGVyLycrdXNlcl9pZCk7XHJcbiAgfTtcclxuXHJcbiAgb3JkZXJGYWN0b3J5LnJlYWRPcmRlckFuZERlbGkgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9tYWtlT3JkZXInKTtcclxuICB9O1xyXG5cclxuICBvcmRlckZhY3RvcnkuY3JlYXRlT3JkZXIgPSBmdW5jdGlvbihvcmRlckRhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbWFrZU9yZGVyJyxvcmRlckRhdGEpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBvcmRlckZhY3Rvcnk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgndXNlclNlcnZpY2VzJyxbXSlcclxuLmZhY3RvcnkoJ1VzZXInLCBmdW5jdGlvbigkaHR0cCl7XHJcbiAgdXNlckZhY3RvcnkgPSB7fTtcclxuXHJcbiAgdXNlckZhY3RvcnkuZ2V0UGVybWlzc2lvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Blcm1pc3Npb24nKTtcclxuICB9O1xyXG4vLyBVc2VyLmNyZWF0ZShyZWdEYXRhKVxyXG4gIHVzZXJGYWN0b3J5LmNyZWF0ZSA9IGZ1bmN0aW9uKHJlZ0RhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCByZWdEYXRhKTtcclxuICB9O1xyXG5cclxuLy8gVXNlci5hY3RpdmVBY2NvdW50KHRva2VuKTtcclxuICB1c2VyRmFjdG9yeS5hY3RpdmVBY2NvdW50ID0gZnVuY3Rpb24odG9rZW4pe1xyXG4gICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS9hY3RpdmF0ZS8nK3Rva2VuKTtcclxuICB9O1xyXG5cclxuLy8gVXNlci5jaGVja0NyZWRlbnRpYWxzKGxvZ2luRGF0YSk7XHJcbiAgdXNlckZhY3RvcnkuY2hlY2tDcmVkZW50aWFscyA9IGZ1bmN0aW9uKGxvZ2luRGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9yZXNlbmQnLCBsb2dpbkRhdGEpO1xyXG4gIH07XHJcblxyXG4vLyBVc2VyLnJlc2VuZExpbmsodXNlcm5hbWUpXHJcbiAgdXNlckZhY3RvcnkucmVzZW5kTGluayA9IGZ1bmN0aW9uKHVzZXJuYW1lKXtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvcmVzZW5kJywgdXNlcm5hbWUpO1xyXG4gIH07XHJcblxyXG4vLyBVc2VyLnNlbmRVc2VybmFtZSh1c2VyRGF0YSk7XHJcbiAgdXNlckZhY3Rvcnkuc2VuZFVzZXJuYW1lID0gZnVuY3Rpb24odXNlckRhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9yZXNldHVzZXJuYW1lLycrdXNlckRhdGEpO1xyXG4gIH07XHJcblxyXG4vLyBVc2VyLnNlbmRQYXNzd29yZChyZXNldERhdGEpO1xyXG4gIHVzZXJGYWN0b3J5LnNlbmRQYXNzd29yZCA9IGZ1bmN0aW9uKHJlc2V0RGF0YSl7XHJcbiAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL3Jlc2V0cGFzc3dvcmQnLCByZXNldERhdGEpO1xyXG4gIH07XHJcblxyXG4vLyBVc2VyLnJlc2V0UGFzc3dvcmQodG9rZW4pO1xyXG4gIHVzZXJGYWN0b3J5LnJlc2V0UGFzc3dvcmQgPSBmdW5jdGlvbih0b2tlbil7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Jlc2V0cGFzc3dvcmQvJyt0b2tlbik7XHJcbiAgfTtcclxuXHJcblxyXG4vLyBVc2VyLnNhdmVQYXNzd29yZChyZWdEYXRhKVxyXG4gIHVzZXJGYWN0b3J5LnNhdmVQYXNzd29yZCA9IGZ1bmN0aW9uKHJlZ0RhdGEpe1xyXG4gICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS9zYXZlcGFzc3dvcmQnLCByZWdEYXRhKTtcclxuICB9O1xyXG5cclxuLy8gIFVzZXIucmVuZXdTZXNzaW9uKHVzZXJuYW1lKVxyXG4gIHVzZXJGYWN0b3J5LnJlbmV3U2Vzc2lvbiA9IGZ1bmN0aW9uKHVzZXJuYW1lKXtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcmVuZXdUb2tlbi8nKyB1c2VybmFtZSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIHJldHVybiB1c2VyRmFjdG9yeTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdiYW5uZXJDb250cm9sbGVyJywgW10pXHJcbi5jb250cm9sbGVyKCd1cGxvYWRCYW5uZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCR0aW1lb3V0LCRodHRwLCAkd2luZG93LCAkc3RhdGUpe1xyXG52YXIgYXBwID0gdGhpcztcclxudGhpcy5maWxlID0ge307XHJcblxyXG4vLyDsnpHtkogg7ISk66qFIOydtOuvuOyngCDsl4XroZzrk5wg65CY7JeI64qU7KeAIOuztOyXrOyjvOq4sFxyXG50aGlzLnJlYWRJbWFnZSA9IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCAmJiBmaWxlc1swXS5uYW1lLm1hdGNoKC9cXC4ocG5nfGpwZWd8anBnKSQvKSkge1xyXG4gICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1swXTtcclxuICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbC5kYXRhVXJsID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbi8vIOyeke2SiCDshKTrqoUgIOydtOuvuOyngCDsl4XroZzrk5ztlbTshJwg6rK966GcIOyggOyepVxyXG50aGlzLnVwbG9hZEJhbm5lciA9IGZ1bmN0aW9uKCl7XHJcbi8vIOyeke2SiCDshKTrqoUgIOyXheuhnOuTnCDsl6zrtoBcclxuICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICBhcHAuZXhwbGFpblBob3RvID0gZmFsc2U7XHJcbiAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICBmZC5hcHBlbmQoJ215ZmlsZScsIGFwcC5maWxlLnVwbG9hZCk7XHJcbiAgICAkaHR0cC5wb3N0KCcvYXBpL2Jhbm5lci8nLCBmZCx7XHJcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG4gICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWR9XHJcbiAgfSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgYXBwLmV4cGxhaW5QaG90byA9IHRydWU7XHJcbiAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pXHJcblxyXG4uY29udHJvbGxlcignZ2V0QmFubmVyQ3RybCcsIGZ1bmN0aW9uKCRodHRwKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuXHJcbiAgJGh0dHAuZ2V0KCcvYXBpL2Jhbm5lcicpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcclxuICAgIGlmKHJlc3VsdC5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIGFwcC5iYW5uZXJEYXRhID0gcmVzdWx0LmRhdGEuYmFubmVyRGF0YTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi67aI65+s7Jik7KeAIOuqu+2VmOyYgOyKteuLiOuLpC5cIik7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG4iLCIgIGFuZ3VsYXIubW9kdWxlKCdpdGVtQ29udHJvbGxlcnMnLFsnb3JkZXJTZXJ2aWNlcyddKVxyXG4gIC5maWx0ZXIoJ3N1bUJ5S2V5JywgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBwcm9wZXJ0eSkge1xyXG4gICAgdmFyIGkgPSBpbnB1dCBpbnN0YW5jZW9mIEFycmF5ID8gaW5wdXQubGVuZ3RoIDogMDtcclxuLy8gaWYgcHJvcGVydHkgaXMgbm90IGRlZmluZWQsIHJldHVybnMgbGVuZ3RoIG9mIGFycmF5XHJcbi8vIGlmIGFycmF5IGhhcyB6ZXJvIGxlbmd0aCBvciBpZiBpdCBpcyBub3QgYW4gYXJyYXksIHJldHVybiB6ZXJvXHJcbiAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAndW5kZWZpbmVkJyB8fCBpID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGk7XHJcbi8vIHRlc3QgaWYgcHJvcGVydHkgaXMgbnVtYmVyIHNvIGl0IGNhbiBiZSBjb3VudGVkXHJcbiAgICB9XHJcbiAgICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHRvdGFsID0gMDtcclxuICAgICAgICB3aGlsZSAoaS0tKVxyXG4gICAgICAgICAgICB0b3RhbCArPSAoaW5wdXRbaV1bcHJvcGVydHlbMF1dICogaW5wdXRbaV1bcHJvcGVydHlbMV1dKTtcclxuICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICB9XHJcbn07XHJcbn0pXHJcbi5jb250cm9sbGVyKCdnZXRUeXBlSXRlbXNDdHJsJywgZnVuY3Rpb24gKCRzdGF0ZVBhcmFtcywgJGh0dHApIHtcclxuICB2YXIgYXBwID0gdGhpcztcclxuXHJcbiAgdmFyIGNhdGVnb3J5X2lkID0gJHN0YXRlUGFyYW1zLmNhdGVnb3J5X2lkO1xyXG4gIGlmKCEkc3RhdGVQYXJhbXMudHlwZV9jb2RlKXtcclxuICAgICRodHRwLmdldCgnL2FwaS9pdGVtX3R5cGUvJytjYXRlZ29yeV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5yZXN1bHQubGVuZ3RoID09PSAwICl7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSAn65Ox66Gd65CcIOyDge2SiOydtCDsl4bsirXri4jri6QuJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLml0ZW1zRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIHR5cGVfY29kZSA9ICAkc3RhdGVQYXJhbXMudHlwZV9jb2RlO1xyXG4gICAgJGh0dHAuZ2V0KCcvYXBpL2l0ZW1fdHlwZS8nK2NhdGVnb3J5X2lkLFxyXG4gICAgeyAgcGFyYW1zOiB7dHlwZV9jb2RlIDogdHlwZV9jb2RlIH19XHJcbiAgKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnJlc3VsdC5sZW5ndGggPT09IDAgKXtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9ICfrk7HroZ3rkJwg7IOB7ZKI7J20IOyXhuyKteuLiOuLpC4nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuaXRlbXNEYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn0pXHJcblxyXG4uY29udHJvbGxlcignZ2V0VHlwZUl0ZW1DdHJsJywgZnVuY3Rpb24oQWRtaW4sICRzdGF0ZVBhcmFtcywgJHdpbmRvdywgJHN0YXRlLCBPcmRlcil7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgdmFyIGl0ZW1faWQgPSAkc3RhdGVQYXJhbXMuaXRlbV9pZDtcclxuICBhcHAub3B0aW9uSXRlbSA9IGZhbHNlO1xyXG5cclxuICBhcHAuZGF0YSA9IHtcclxuICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgIHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgIF0sXHJcbiAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgIH07XHJcblxyXG4gICBhcHAuYW1vdW50ID0gMTtcclxuXHJcbiAgIGFwcC5vcHRpb25MaXN0ID0gW107XHJcbiAgIHRoaXMuYWRkSXRlbSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGlmKGRhdGEuaWQgPT09IDApe1xyXG4gICAgICAgICR3aW5kb3cuYWxlcnQoJ+yYteyFmOydhCDshKDtg53tlbTso7zshLjsmpQuJyk7XHJcbiAgICAgfSBlbHNlIHtcclxuICAgICAgIGFwcC5vcHRpb25JdGVtID0gdHJ1ZTtcclxuICAgICAgIGFwcC5vcHRpb25MaXN0LnB1c2goXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAga2luZDogZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICAgcHJpY2U6IGRhdGEuaWQsXHJcbiAgICAgICAgICAgICBhbW91bnQ6IDFcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICk7XHJcblxyXG4gICAgIH1cclxuICAgfTtcclxuXHJcbiAgdGhpcy5jcmVhdGVCYXNrZXQgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIHZhciBiYXNrZXREYXRhID0ge1xyXG4gICAgICBpdGVtX2lkOiBkYXRhLml0ZW1faWQsXHJcbiAgICB9O1xyXG4gICAgT3JkZXIuY3JlYXRlQmFza2V0KGJhc2tldERhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jcmVhdGVPcmRlciA9IGZ1bmN0aW9uKGRhdGEpe1xyXG5cclxuICAgIHZhciBvcmRlckRhdGEgPSB7XHJcbiAgICAgIGl0ZW1faWQ6IGRhdGEuaXRlbV9pZCxcclxuICAgICAgYW1vdW50OiBkYXRhLmFtb3VudCxcclxuICAgICAga2luZF9vZjogZGF0YS5raW5kX29mLFxyXG4gICAgICBwcmljZTogZGF0YS5wcmljZVxyXG4gICAgfTtcclxuXHJcbiAgICBPcmRlci5jcmVhdGVPcmRlcihvcmRlckRhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICRzdGF0ZS5nbygnYXBwLm1ha2VPcmRlcicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgfTtcclxuXHJcbiAgQWRtaW4ucmVhZEl0ZW0oaXRlbV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgdmFyIGtpbmQgPSBkYXRhLmRhdGEucmVzdWx0LmtpbmQuc3BsaXQoJywnKTtcclxuICAgICAgdmFyIHRlbXAgPSBkYXRhLmRhdGEucmVzdWx0LnByaWNlLnNwbGl0KCcsJyk7XHJcbiAgICAgIHZhciBwcmljZSA9IFtdO1xyXG4gICAgICBmb3IoaT0wO2k8dGVtcC5sZW5ndGg7aSsrKXtcclxuICAgICAgICBwcmljZVtpXSA9IE51bWJlcih0ZW1wW2ldKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXBwLml0ZW1EYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuXHJcbiAgICAgIGZvcihpPTA7IGk8cHJpY2UubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgIG5hbWU6IGtpbmRbaV0sXHJcbiAgICAgICAgICBpZDogcHJpY2VbaV1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnbWFuYWdlbWVudENvbnRyb2xsZXJzJywgWydhZG1pblNlcnZpY2VzJywgJ21lbnVTZXJ2aWNlcycsICdvcmRlclNlcnZpY2VzJ10pXHJcblxyXG4uY29udHJvbGxlcigncmVhZEl0ZW1zQ3RybCcsIGZ1bmN0aW9uKEFkbWluLCAkc3RhdGUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIEFkbWluLnJlYWRJdGVtcygpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgYXBwLml0ZW1zRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdGhpcy5kZWxldGVJdGVtID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIHZhciBpdGVtX2lkID0gZGF0YS5pdGVtX2lkO1xyXG4gICAgQWRtaW4uZGVsZXRlSXRlbShpdGVtX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbn0pXHJcblxyXG4uY29udHJvbGxlcigncmVhZEl0ZW1DdHJsJywgZnVuY3Rpb24oQWRtaW4sICRzdGF0ZVBhcmFtcywgJHNjb3BlLCBPcmRlciwgJHdpbmRvdyl7XHJcblxyXG4gICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICB2YXIgaXRlbV9pZCA9ICRzdGF0ZVBhcmFtcy5pdGVtX2lkO1xyXG4gICAgYXBwLmRhdGEgPSB7XHJcbiAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICBdLFxyXG4gICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgfTtcclxuXHJcbiAgICAgYXBwLmFtb3VudCA9IDE7XHJcblxyXG4gICAgQWRtaW4ucmVhZEl0ZW0oaXRlbV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIHZhciBraW5kID0gZGF0YS5kYXRhLnJlc3VsdC5raW5kLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgdmFyIHRlbXAgPSBkYXRhLmRhdGEucmVzdWx0LnByaWNlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgdmFyIHByaWNlID0gW107XHJcbiAgICAgICAgZm9yKGk9MDtpPHRlbXAubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICBwcmljZVtpXSA9IE51bWJlcih0ZW1wW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXBwLml0ZW1EYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICBhcHAuZGF0YS5zZWxlY3RlZE9wdGlvbiA9IHtcclxuICAgICAgICAgIGlkIDogcHJpY2VbMF1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmb3IoaT0wOyBpPHByaWNlLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgbmFtZToga2luZFtpXSxcclxuICAgICAgICAgICAgaWQ6IHByaWNlW2ldXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbn0pXHJcblxyXG5cclxuXHJcblxyXG4uY29udHJvbGxlcigndXBkYXRlSXRlbUN0cmwnLCBmdW5jdGlvbihBZG1pbiwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRodHRwLCAkdGltZW91dCwgICRzdGF0ZSwgJHdpbmRvdywgTWVudSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgdmFyIGl0ZW1faWQgPSAkc3RhdGVQYXJhbXMuaXRlbV9pZDtcclxuXHJcbiAgICAgICAgIGFwcC5kYXRhID0ge1xyXG4gICAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIGFwcC5kYXRhMiA9IHtcclxuICAgICAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAgICAgIHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgIGlkOiB0eXBlW2ldLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5yZWFkTWVudSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXBwLnJlYWRNZW51U3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuaWQgPT09IDApe1xyXG4gICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5X2lkID0gZGF0YS5pZDtcclxuICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvbWVudS8nK2NhdGVnb3J5X2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgLy8g7LSI6riw7ZmUIOyLnO2CtFxyXG4gICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEucmVzdWx0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRhdGEyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KCfrk7HroZ3rkJwg7IOB7ZKI7J20IOyXhuyKteuLiOuLpC4nKTtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAucmVhZE1lbnVTdGF0dXMgPSB0cnVlO1xyXG4gICAgLy8g7LSI6riw7ZmUIOyLnOy8nOyVvO2VmOuKlOuNsCDslrTrlrvqsowg7ZWg6rmM7JqUXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRhdGEyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmRhdGEyLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS50eXBlX2Rlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdHlwZVtpXS5pdGVtX3R5cGVfaWRcclxuICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG5cclxuICBBZG1pbi5yZWFkSXRlbShpdGVtX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIGFwcC5pdGVtRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgIGFwcC5kYXRhLnNlbGVjdGVkT3B0aW9uID0ge1xyXG4gICAgICAgIGlkIDogYXBwLml0ZW1EYXRhLmNhdGVnb3J5X2lkXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuXHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHRoaXMudXBkYXRlSXRlbSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBpZihhcHAucmVhZE1lbnVTdGF0dXMpe1xyXG4gICAgICBpZihkYXRhLml0ZW1fdHlwZSA9PT0gMCB8fCBkYXRhLml0ZW1fdHlwZSA9PT0gJzAnKXtcclxuICAgICAgICAkd2luZG93LmFsZXJ0KCfsg4Htkogg67aE66WY66W8IOyEoO2Dne2VtOyjvOyEuOyalC4hJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHVwZGF0ZURhdGEgPSB7XHJcbiAgICAgICAgICB0eXBlOiBkYXRhLml0ZW1fdHlwZSxcclxuICAgICAgICAgIGl0ZW1fbmFtZTogZGF0YS5pdGVtX25hbWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICAkaHR0cC5wdXQoJy9hcGkvaXRlbS8nK2l0ZW1faWQsIHVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVwZGF0ZURhdGEyID0ge1xyXG4gICAgICAgICAgdHlwZTogYXBwLml0ZW1EYXRhLml0ZW1fdHlwZV9pZCxcclxuICAgICAgICAgIGl0ZW1fbmFtZTogZGF0YS5pdGVtX25hbWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICAkaHR0cC5wdXQoJy9hcGkvaXRlbS8nK2l0ZW1faWQsIHVwZGF0ZURhdGEyKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuXHJcbn07XHJcblxyXG5cclxuICAvLyDtjIzsnbzsnZgg6rK966Gc66eMIOyggOyepe2VmOq4sCDrqZTsnbgg7J2066+47KeAIOunjOuTpOq4sFxyXG4gICAgICB0aGlzLmZpbGUgPSB7fTtcclxuICAvLyDrqZTsnbgg7J6R7ZKI7J2066+47KeAIOyXheuhnOuTnCDrkJjsl4jripTsp4Ag67O07Jes7KO86riwXHJcbiAgICAgIHRoaXMubWFpblBob3RvQ2hhbmdlZCA9IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCAmJiBmaWxlc1swXS5uYW1lLm1hdGNoKC9cXC4ocG5nfGpwZWd8anBnKSQvKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1swXTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAubWFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAubWFpblRodW1ibmFpbC5kYXRhVXJsID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICBhcHAubWFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgLy8g66mU7J24IOyeke2SiCDsnbTrr7jsp4Ag7JeF66Gc65Oc7ZW07IScIOqyveuhnCDsoIDsnqVcclxuICAgICAgdGhpcy5yZWFkUGhvdG8gPSBmdW5jdGlvbigpe1xyXG4gIC8vIOuplOyduCDsnbTrr7jsp4Ag7JeF66Gc65OcIOyXrOu2gFxyXG4gICAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgIGFwcC5tYWluUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIGZkLmFwcGVuZCgnbXlmaWxlJywgYXBwLmZpbGUudXBsb2FkKTtcclxuICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvY3JlYXRlUGhvdG9JbWFnZS8nLCBmZCx7XHJcbiAgICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG4gICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWR9XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGFwcC5tYWluUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgaW1hZ2U6IGRhdGEuZGF0YS5pdGVtX3BhdGhcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJGh0dHAucHV0KCcvYXBpL2l0ZW0vJytpdGVtX2lkLCB1cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgLy8g7J6R7ZKIIOyEpOuqhSDsnbTrr7jsp4Ag7JeF66Gc65OcIOuQmOyXiOuKlOyngCDrs7Tsl6zso7zquLBcclxuICAgICAgdGhpcy5leHBsYWluUGhvdG9DaGFuZ2VkID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwICYmIGZpbGVzWzBdLm5hbWUubWF0Y2goL1xcLihwbmd8anBlZ3xqcGcpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsLmRhdGFVcmwgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAvLyDsnpHtkogg7ISk66qFICDsnbTrr7jsp4Ag7JeF66Gc65Oc7ZW07IScIOqyveuhnCDsoIDsnqVcclxuICAgICAgdGhpcy5yZWFkUGhvdG9FeHBsYWluID0gZnVuY3Rpb24oKXtcclxuICAvLyDsnpHtkogg7ISk66qFICDsl4XroZzrk5wg7Jes67aAXHJcbiAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgYXBwLmV4cGxhaW5QaG90byA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgZmQuYXBwZW5kKCdteWZpbGUnLCBhcHAuZmlsZS51cGxvYWQpO1xyXG4gICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9jcmVhdGVQaG90b0V4cGxhaW4vJywgZmQse1xyXG4gICAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcclxuICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkfVxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBhcHAuZXhwbGFpblBob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciB1cGRhdGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgIGV4cGxhaW46IGRhdGEuZGF0YS5pdGVtX3BhdGhcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJGh0dHAucHV0KCcvYXBpL2l0ZW0vJytpdGVtX2lkLCB1cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAvLyDsjbjrhKTsnbwg7J2066+47KeAIOunjOuTpOq4sFxyXG4gICAgICAgIGFwcC5teUltYWdlPScnO1xyXG4gICAgICAgIGFwcC5teUNyb3BwZWRJbWFnZT0nJztcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUZpbGVTZWxlY3Q9ZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgIHZhciBmaWxlPWV2dC5jdXJyZW50VGFyZ2V0LmZpbGVzWzBdO1xyXG4gICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICBhcHAubXlJbWFnZT1ldnQudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlsZUlucHV0JykpLm9uKCdjaGFuZ2UnLGhhbmRsZUZpbGVTZWxlY3QpO1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIGRlY29kZUJhc2U2NEltYWdlKGRhdGFTdHJpbmcpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBkYXRhU3RyaW5nLm1hdGNoKC9eZGF0YTooW0EtWmEtei0rXFwvXSspO2Jhc2U2NCwoLispJC8pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoICE9PSAzKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCBzdHJpbmcnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB2YXIgZmlsZSA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGUgOiBtYXRjaGVzWzFdLFxyXG4gICAgICAgICAgICAgICAgZGF0YSA6IG1hdGNoZXNbMl1cclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gIC8vIOyNuOuEpOydvCDsnbTrr7jsp4Ag66Gc7Lus65SU7Iqk7YGs7JeQIOyggOyepSDtm4Qg7KCA7J6lIOychOy5mCDqsIDsoLjsmKTquLBcclxuICAgICAgICAgIHRoaXMucmVhZENyb3BJbWFnZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgICAgYXBwLnRodW1ibmFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihkYXRhLmJhc2U2NFVybCA9PT0gJycgfHwgZGF0YS5iYXNlNjRVcmwgPT09IG51bGwgfHwgZGF0YS5iYXNlNjRVcmwgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gZGVjb2RlQmFzZTY0SW1hZ2UoJHNjb3BlLm15Q3JvcHBlZEltYWdlKTtcclxuICAgICAgICAgICAgICAgICAgQWRtaW4ucmVhZEFyaXN0Q3JvcChibG9iKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC50aHVtYm5haWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBkYXRhLmRhdGEuZmlsZVBhdGhcclxuICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5wdXQoJy9hcGkvaXRlbS8nK2l0ZW1faWQsIHVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcblxyXG5cclxufSlcclxuXHJcblxyXG5cclxuLmNvbnRyb2xsZXIoJ2NyZWF0ZUl0ZW1DdHJsJywgZnVuY3Rpb24gKCRodHRwLCAkdGltZW91dCwgJHNjb3BlLCBBZG1pbiwgJHN0YXRlLCAkd2luZG93LCBNZW51KSB7XHJcbiAgICB2YXIgYXBwID0gdGhpcztcclxuXHJcblxyXG4gICAgICBhcHAua2luZExpc3QgPSBbXTtcclxuICAgICAgYXBwLnR5cGVfdGlueSA9IFtdO1xyXG4gICAgICBhcHAudHlwZV9wcmljZSA9IFtdO1xyXG5cclxuICAgICAgdGhpcy5hZGRMaW5lID0gZnVuY3Rpb24oa2luZERhdGEpe1xyXG4gICAgICAgIGlmKCFraW5kRGF0YSl7XHJcbiAgICAgICAgICAkd2luZG93LmFsZXJ0KCfsoJXtmZXtlZwg6rCS7J2EIOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYoa2luZERhdGEua2luZFZhbHVlID09PSBudWxsIHx8IGtpbmREYXRhLmtpbmRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGtpbmREYXRhLmtpbmRWYWx1ZSA9PT0gJycpXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+yYteyFmOuqheydhCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYoa2luZERhdGEua2luZFByaWNlID09PSBudWxsIHx8IGtpbmREYXRhLmtpbmRQcmljZSA9PT0gdW5kZWZpbmVkIHx8IGtpbmREYXRhLmtpbmRQcmljZSA9PT0gJycpe1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KCfsmLXshZgg6rCA6rKp7J2EIOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcC5raW5kTGlzdC5wdXNoKFxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGtpbmQ6IGtpbmREYXRhLmtpbmRWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHByaWNlOiBraW5kRGF0YS5raW5kUHJpY2VcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGFwcC50eXBlX3RpbnkucHVzaChraW5kRGF0YS5raW5kVmFsdWUpO1xyXG4gICAgICAgICAgICBhcHAudHlwZV9wcmljZS5wdXNoKGtpbmREYXRhLmtpbmRQcmljZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfTtcclxuXHJcbiAgICAgYXBwLmRhdGEgPSB7XHJcbiAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgIF0sXHJcbiAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGFwcC5kYXRhMiA9IHtcclxuICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgXSxcclxuICAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS5uYW1lLFxyXG4gICAgICAgICAgICAgIGlkOiB0eXBlW2ldLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnJlYWRNZW51ID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5pZCA9PT0gMCl7XHJcbiAgICAgICAgICAkd2luZG93LmFsZXJ0KCfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgY2F0ZWdvcnlfaWQgPSBkYXRhLmlkO1xyXG4gICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL21lbnUvJytjYXRlZ29yeV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4vLyDstIjquLDtmZQg7Iuc7YK0XHJcbiAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnJlc3VsdC5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICAgICAgYXBwLmRhdGEyID0ge1xyXG4gICAgICAgICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgn65Ox66Gd65CcIOyDge2SiOydtCDsl4bsirXri4jri6QuJyk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuLy8g7LSI6riw7ZmUIOyLnOy8nOyVvO2VmOuKlOuNsCDslrTrlrvqsowg7ZWg6rmM7JqUXHJcbiAgICAgICAgICAgICAgICBhcHAuZGF0YTIgPSB7XHJcbiAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5kYXRhMi5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS50eXBlX2Rlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0eXBlW2ldLml0ZW1fdHlwZV9pZFxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG5cclxuLy8g7YyM7J287J2YIOqyveuhnOunjCDsoIDsnqXtlZjquLAg66mU7J24IOydtOuvuOyngCDrp4zrk6TquLBcclxuICAgIHRoaXMuZmlsZSA9IHt9O1xyXG4vLyDrqZTsnbgg7J6R7ZKI7J2066+47KeAIOyXheuhnOuTnCDrkJjsl4jripTsp4Ag67O07Jes7KO86riwXHJcbiAgICB0aGlzLm1haW5QaG90b0NoYW5nZWQgPSBmdW5jdGlvbihmaWxlcykge1xyXG4gICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCAmJiBmaWxlc1swXS5uYW1lLm1hdGNoKC9cXC4ocG5nfGpwZWd8anBnKSQvKSkge1xyXG4gICAgICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XHJcbiAgICAgICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLm1haW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5tYWluVGh1bWJuYWlsLmRhdGFVcmwgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgYXBwLm1haW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcblxyXG4vLyDrqZTsnbgg7J6R7ZKIIOydtOuvuOyngCDsl4XroZzrk5ztlbTshJwg6rK966GcIOyggOyepVxyXG4gICAgdGhpcy5yZWFkUGhvdG8gPSBmdW5jdGlvbigpe1xyXG4vLyDrqZTsnbgg7J2066+47KeAIOyXheuhnOuTnCDsl6zrtoBcclxuICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgIGFwcC5tYWluUGhvdG8gPSBmYWxzZTtcclxuICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgIGZkLmFwcGVuZCgnbXlmaWxlJywgYXBwLmZpbGUudXBsb2FkKTtcclxuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL2NyZWF0ZVBob3RvSW1hZ2UvJywgZmQse1xyXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXHJcbiAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWR9XHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgYXBwLm1haW5QaG90byA9IHRydWU7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5tYWluSW1hZ2VQYXRoID0gZGF0YS5kYXRhLml0ZW1fcGF0aDtcclxuICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4vLyDsnpHtkogg7ISk66qFIOydtOuvuOyngCDsl4XroZzrk5wg65CY7JeI64qU7KeAIOuztOyXrOyjvOq4sFxyXG4gICAgdGhpcy5leHBsYWluUGhvdG9DaGFuZ2VkID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0ubmFtZS5tYXRjaCgvXFwuKHBuZ3xqcGVnfGpwZykkLykpIHtcclxuICAgICAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbC5kYXRhVXJsID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgIGFwcC5leHBsYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG5cclxuLy8g7J6R7ZKIIOyEpOuqhSAg7J2066+47KeAIOyXheuhnOuTnO2VtOyEnCDqsr3roZwg7KCA7J6lXHJcbiAgICB0aGlzLnJlYWRQaG90b0V4cGxhaW4gPSBmdW5jdGlvbigpe1xyXG4vLyDsnpHtkogg7ISk66qFICDsl4XroZzrk5wg7Jes67aAXHJcbiAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICBhcHAuZXhwbGFpblBob3RvID0gZmFsc2U7XHJcbiAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICBmZC5hcHBlbmQoJ215ZmlsZScsIGFwcC5maWxlLnVwbG9hZCk7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9jcmVhdGVQaG90b0V4cGxhaW4vJywgZmQse1xyXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXHJcbiAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWR9XHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgYXBwLmV4cGxhaW5QaG90byA9IHRydWU7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5leHBsYWluSW1hZ2VQYXRoID0gZGF0YS5kYXRhLml0ZW1fcGF0aDtcclxuICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG5cclxuLy8g7I2464Sk7J28IOydtOuvuOyngCDrp4zrk6TquLBcclxuICAgICAgYXBwLm15SW1hZ2U9Jyc7XHJcbiAgICAgIGFwcC5teUNyb3BwZWRJbWFnZT0nJztcclxuXHJcbiAgICAgIHZhciBoYW5kbGVGaWxlU2VsZWN0PWZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgIHZhciBmaWxlPWV2dC5jdXJyZW50VGFyZ2V0LmZpbGVzWzBdO1xyXG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgIGFwcC5teUltYWdlPWV2dC50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgfTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZpbGVJbnB1dCcpKS5vbignY2hhbmdlJyxoYW5kbGVGaWxlU2VsZWN0KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGVjb2RlQmFzZTY0SW1hZ2UoZGF0YVN0cmluZykge1xyXG4gICAgICAgICAgdmFyIG1hdGNoZXMgPSBkYXRhU3RyaW5nLm1hdGNoKC9eZGF0YTooW0EtWmEtei0rXFwvXSspO2Jhc2U2NCwoLispJC8pO1xyXG5cclxuICAgICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCAhPT0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIGlucHV0IHN0cmluZycpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGZpbGUgPSB7XHJcbiAgICAgICAgICAgICAgdHlwZSA6IG1hdGNoZXNbMV0sXHJcbiAgICAgICAgICAgICAgZGF0YSA6IG1hdGNoZXNbMl1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbGU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuLy8g7I2464Sk7J28IOydtOuvuOyngCDroZzsu6zrlJTsiqTtgazsl5Ag7KCA7J6lIO2bhCDsoIDsnqUg7JyE7LmYIOqwgOyguOyYpOq4sFxyXG4gICAgICAgIHRoaXMucmVhZENyb3BJbWFnZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICBhcHAudGh1bWJuYWlsID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgaWYoZGF0YS5iYXNlNjRVcmwgPT09ICcnIHx8IGRhdGEuYmFzZTY0VXJsID09PSBudWxsIHx8IGRhdGEuYmFzZTY0VXJsID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBkZWNvZGVCYXNlNjRJbWFnZSgkc2NvcGUubXlDcm9wcGVkSW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgQWRtaW4ucmVhZEFyaXN0Q3JvcChibG9iKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAudGh1bWJuYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAudGh1bWJuYWlsUGF0aCA9IGRhdGEuZGF0YS5maWxlUGF0aDtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4vLyDsnpHqsIAg7J6R7ZKIIOyXheuhnOuTnFxyXG4gICAgICB0aGlzLmNyZWF0ZVBob3RvID0gZnVuY3Rpb24odXBsb2FkRGF0YSl7XHJcbiAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgaWYodXBsb2FkRGF0YSA9PT0gdW5kZWZpbmVkIHx8IHVwbG9hZERhdGEgPT09IG51bGwgfHwgdXBsb2FkRGF0YSA9PT0gJycpe1xyXG4gICAgICAgICAgJHdpbmRvdy5hbGVydCgn67mI7Lm47J2EIOuqqOuRkCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYoYXBwLmRhdGEyLnNlbGVjdGVkT3B0aW9uLmlkID09PSAnMCcpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgn7IOB7ZKIIOu2hOulmOydhCDshKDtg53tlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYodXBsb2FkRGF0YS50aXRsZSA9PT0gdW5kZWZpbmVkIHx8IHVwbG9hZERhdGEudGl0bGUgPT09ICBudWxsIHx8IHVwbG9hZERhdGEudGl0bGU9PT0gJycpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgn7IOB7ZKIIOygnOuqqeulvCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyAgIGVsc2UgaWYoYXBwLm1haW5JbWFnZVBhdGggPT09IHVuZGVmaW5lZCB8fCBhcHAubWFpbkltYWdlUGF0aCA9PT0gIG51bGwgfHwgYXBwLm1haW5JbWFnZVBhdGggPT09ICcnKXtcclxuICAgICAgICAgIC8vICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgIC8vICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAvLyAgICR3aW5kb3cuYWxlcnQoJ+yDge2SiCDsnbTrr7jsp4Drpbwg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgLy8gZWxzZSBpZihhcHAuZXhwbGFpbkltYWdlUGF0aCA9PT0gdW5kZWZpbmVkIHx8IGFwcC5leHBsYWluSW1hZ2VQYXRoID09PSBudWxsIHx8IGFwcC5leHBsYWluSW1hZ2VQYXRoID09PSAnJykge1xyXG4gICAgICAgICAgLy8gICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgLy8gICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIC8vICAgJHdpbmRvdy5hbGVydCgn7IOB7ZKIIOyEpOuqhSDsnbTrr7jsp4Drpbwg7JeF66Gc65Oc7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgLy8gfSBlbHNlIGlmKGFwcC50aHVtYm5haWxQYXRoID09PSB1bmRlZmluZWQgfHwgYXBwLnRodW1ibmFpbFBhdGggPT09IG51bGwgfHwgYXBwLnRodW1ibmFpbFBhdGggPT09ICcnKSB7XHJcbiAgICAgICAgICAvLyAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAvLyAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgLy8gICAkd2luZG93LmFsZXJ0KCfsjbjrhKTsnbwg7J2066+47KeA66W8IOyXheuhnOuTnO2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIC8vIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGFwcC51cGxvYWREYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHVwbG9hZERhdGEudGl0bGUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBhcHAuZGF0YTIuc2VsZWN0ZWRPcHRpb24uaWQsXHJcbiAgICAgICAgICAgICAgICAvLyB0aHVtYm5haWw6IGFwcC50aHVtYm5haWxQYXRoLFxyXG4gICAgICAgICAgICAgICAgLy8gZXhwbGFpbjogYXBwLmV4cGxhaW5JbWFnZVBhdGgsXHJcbiAgICAgICAgICAgICAgICAvLyBpbWFnZTogYXBwLm1haW5JbWFnZVBhdGgsXHJcbiAgICAgICAgICAgICAgICBraW5kOiBhcHAudHlwZV90aW55LnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICBwcmljZTogYXBwLnR5cGVfcHJpY2UudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgQWRtaW4uY3JlYXRlSXRlbShhcHAudXBsb2FkRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgfTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdtZW51Q29udHJvbGxlcnMnLFsnbWVudVNlcnZpY2VzJ10pXHJcbi5jb250cm9sbGVyKCdtYWluTWVudUN0cmwnLCBmdW5jdGlvbiAoTWVudSwgJHN0YXRlKSB7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG4gIHRoaXMuY3JlYXRlTWVudSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBpZihkYXRhID09PSB1bmRlZmluZWQpe1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSAn7Jis67CU66W4IOygleuztOulvCDsnoXroKXtlbTso7zshLjsmpQuJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBtZW51RGF0YSA9IHtcclxuICAgICAgICAgIG5hbWU6IGRhdGEubmFtZVxyXG4gICAgICB9O1xyXG4gICAgICBNZW51LmNyZWF0ZU1lbnUobWVudURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICB2YXIgdXBkYXRlRGF0YSA9IHtcclxuICAgICAgY2F0ZWdvcnlfaWQ6IGRhdGEuY2F0ZWdvcnlfaWQsXHJcbiAgICAgIG5hbWU6IGRhdGEubmFtZVxyXG4gICAgfTtcclxuICAgICAgTWVudS51cGRhdGVNZW51KHVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLmRlbGV0ZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICB2YXIgZGVsZXRlRGF0YSA9IGRhdGEuY2F0ZWdvcnlfaWQ7XHJcbiAgICBNZW51LmRlbGV0ZU1lbnUoZGVsZXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdzdWJNZW51Q3RybCcsIGZ1bmN0aW9uIChNZW51LCAkc3RhdGUsICRzdGF0ZVBhcmFtcywgJGh0dHApIHtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICB2YXIgY2F0ZWdvcnlfaWQgPSAkc3RhdGVQYXJhbXMuY2F0ZWdvcnlfaWQ7XHJcblxyXG4gICRodHRwLmdldCgnL2FwaS9jYXRlZ29yeS8nK2NhdGVnb3J5X2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBhcHAuc3ViTWVudURhdGFzID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ3R5cGVDb250cm9sbGVycycsIFsnYWRtaW5TZXJ2aWNlcycsICdtZW51U2VydmljZXMnLCAnb3JkZXJTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcigndXBkYXRlSXRlbVR5cGVDdHJsJywgZnVuY3Rpb24oJHN0YXRlUGFyYW1zLCBNZW51LCBBZG1pbiwgJHN0YXRlKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICB2YXIgaXRlbV9pZCA9ICRzdGF0ZVBhcmFtcy5pdGVtX2lkO1xyXG4gIGFwcC5kYXRhID0ge1xyXG4gICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICBdLFxyXG4gICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgIH07XHJcblxyXG5cclxuXHJcbiAgIEFkbWluLnJlYWRVcGRhdGVJdGVtVHlwZShpdGVtX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgIGlkOiB0eXBlW2ldLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgIGFwcC51cGRhdGFEYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICBhcHAuZGF0YS5zZWxlY3RlZE9wdGlvbiA9IHtcclxuICAgICAgICAgICAgIGlkIDogYXBwLnVwZGF0YURhdGEuY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICB2YXIgc3BsaXRPcHRpb25EYXRhcyA9IHtcclxuICAgICAgICAgICAgICAgICAgIGtpbmQ6IGFwcC51cGRhdGFEYXRhLmtpbmQuc3BsaXQoJywnKSxcclxuICAgICAgICAgICAgICAgICAgIHByaWNlOiBhcHAudXBkYXRhRGF0YS5wcmljZS5zcGxpdCgnLCcpXHJcbiAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIGFwcC5vcHRpb25EYXRhcyA9IFtdO1xyXG5cclxuICAgICAgICAgICBmb3IoaT0wOyBpIDwgc3BsaXRPcHRpb25EYXRhcy5raW5kLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgIGFwcC5vcHRpb25EYXRhc1tpXSA9IHtcclxuICAgICAgICAgICAgICAga2luZDogc3BsaXRPcHRpb25EYXRhcy5raW5kW2ldLFxyXG4gICAgICAgICAgICAgICBwcmljZTogIHNwbGl0T3B0aW9uRGF0YXMucHJpY2VbaV0sXHJcbiAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgIH1cclxuXHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuXHJcbiAgICAgICB9XHJcbiAgIH0pO1xyXG5cclxuICAgdGhpcy51cGRhdGVUeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgYXBwLnVwZGF0ZURhdGEgPSBkYXRhO1xyXG4gICAgIGFwcC51cGRhdGVEYXRhLmNhdGVnb3J5X2lkID0gYXBwLmRhdGEuc2VsZWN0ZWRPcHRpb24uaWQ7XHJcbiAgICAgQWRtaW4udXBkYXRlVXBkYXRlVHlwZShhcHAudXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfTtcclxuXHJcbiAgIHRoaXMudXBkYXRlaXRlbVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICB2YXIga2luZEFycmF5ID0gW107XHJcbiAgICAgdmFyIHByaWNlQXJyYXkgPSBbXTtcclxuICAgICBmb3IoaT0wO2k8YXBwLm9wdGlvbkRhdGFzLmxlbmd0aDtpKyspe1xyXG4gICAgICAga2luZEFycmF5LnB1c2goYXBwLm9wdGlvbkRhdGFzW2ldLmtpbmQpO1xyXG4gICAgICAgcHJpY2VBcnJheS5wdXNoKGFwcC5vcHRpb25EYXRhc1tpXS5wcmljZSk7XHJcbiAgICAgfVxyXG4gICAgIHZhciB1cGRhdGVEYXRhID0ge1xyXG4gICAgICAgaXRlbV9pZDogZGF0YS5pdGVtX2lkLFxyXG4gICAgICAgaXRlbV9uYW1lOiBkYXRhLml0ZW1fbmFtZSxcclxuICAgICAgIHByaWNlOiBwcmljZUFycmF5LnRvU3RyaW5nKCksXHJcbiAgICAgICBraW5kOiBraW5kQXJyYXkudG9TdHJpbmcoKVxyXG4gICAgIH07XHJcblxyXG4gICAgIEFkbWluLnVwZGF0ZUl0ZW1UeXBlKHVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG5cclxuXHJcblxyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3JlYWRJdGVtVHlwZUN0cmwnLCBmdW5jdGlvbihBZG1pbiwgJHN0YXRlLCAkd2luZG93LCBNZW51KXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICAgIGFwcC5kYXRhID0ge1xyXG4gICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICBdLFxyXG4gICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICB9O1xyXG5cclxuXHJcbiAgICAgdGhpcy5jb3B5SXRlbVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuXHJcbiAgICAgICB2YXIgaXRlbURhdGEgPSB7XHJcbiAgICAgICAgIHR5cGU6IGRhdGEuaXRlbV90eXBlX2lkLFxyXG4gICAgICAgICB0aXRsZTogZGF0YS5pdGVtX25hbWUsXHJcbiAgICAgICAgIGtpbmQ6IGRhdGEua2luZC50b1N0cmluZygpLFxyXG4gICAgICAgICBwcmljZTogZGF0YS5wcmljZS50b1N0cmluZygpXHJcblxyXG4gICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICBBZG1pbi5jcmVhdGVJdGVtKGl0ZW1EYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICAgdGhpcy5kZWxldGVUeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgdmFyIGl0ZW1faWQgPSBkYXRhLml0ZW1faWQ7XHJcbiAgICAgQWRtaW4uZGVsZXRlSXRlbShpdGVtX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfTtcclxuXHJcbi8vIOyDge2SiCDrtoTrpZjtkZxcclxuICBBZG1pbi5yZWFkSXRlbVR5cGUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS5uYW1lLFxyXG4gICAgICAgICAgICAgIGlkOiB0eXBlW2ldLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGFwcC50eXBlRGF0YXMgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICB2YXIga2luZERhdGFzID0gW107XHJcblxyXG4gICAgICBmb3IodmFyIGk9MDsgaTxkYXRhLmRhdGEucmVzdWx0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgIGtpbmREYXRhc1tpXSA9IHtcclxuICAgICAgICAgICAgICBraW5kOiBhcHAudHlwZURhdGFzW2ldLmtpbmQuc3BsaXQoJywnKSxcclxuICAgICAgICAgICAgICBwcmljZTogYXBwLnR5cGVEYXRhc1tpXS5wcmljZS5zcGxpdCgnLCcpXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgYXBwLnR5cGVEYXRhc1tpXS5raW5kID0ga2luZERhdGFzW2ldLmtpbmQ7XHJcbiAgICAgICAgICBhcHAudHlwZURhdGFzW2ldLnByaWNlID0ga2luZERhdGFzW2ldLnByaWNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pXHJcblxyXG5cclxuLy8g7IOB7ZKIIOu2hOulmO2RnFxyXG4uY29udHJvbGxlcigndXBkYXRlVHlwZUN0cmwnLCBmdW5jdGlvbigkc3RhdGVQYXJhbXMsIE1lbnUsIEFkbWluLCAkc3RhdGUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHZhciBpdGVtX3R5cGUgPSAkc3RhdGVQYXJhbXMuaXRlbV90eXBlO1xyXG4gIGFwcC5kYXRhID0ge1xyXG4gICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICBdLFxyXG4gICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgIH07XHJcblxyXG4gICBBZG1pbi5yZWFkVXBkYXRlVHlwZShpdGVtX3R5cGUpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICB9KTtcclxuICAgICAgICAgICBhcHAudXBkYXRhRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgYXBwLmRhdGEuc2VsZWN0ZWRPcHRpb24gPSB7XHJcbiAgICAgICAgICAgICBpZCA6IGFwcC51cGRhdGFEYXRhLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgfTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgICAgIH1cclxuICAgfSk7XHJcblxyXG4gICB0aGlzLnVwZGF0ZVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAudXBkYXRlRGF0YSA9IGRhdGE7XHJcbiAgICAgYXBwLnVwZGF0ZURhdGEuY2F0ZWdvcnlfaWQgPSBhcHAuZGF0YS5zZWxlY3RlZE9wdGlvbi5pZDtcclxuICAgICBBZG1pbi51cGRhdGVVcGRhdGVUeXBlKGFwcC51cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG59KVxyXG5cclxuLy8g7IOB7ZKIIOu2hOulmO2RnFxyXG4uY29udHJvbGxlcigncmVhZFR5cGVDdHJsJywgZnVuY3Rpb24oQWRtaW4sICRzdGF0ZSwgJHdpbmRvdywgTWVudSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICBhcHAuZGF0YSA9IHtcclxuICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgXSxcclxuICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgfTtcclxuXHJcbiAgICB0aGlzLmNvcHlUeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIHZhciB0eXBlRGF0YSA9IHtcclxuICAgICAgICBjYXRlZ29yeTogZGF0YS5jYXRlZ29yeV9pZCxcclxuICAgICAgICB0eXBlX2Rlc2NyaXB0aW9uOiBkYXRhLnR5cGVfZGVzY3JpcHRpb24sXHJcbiAgICAgICAgdHlwZV9jb2RlOiBkYXRhLnR5cGVfY29kZVxyXG4gICAgICB9O1xyXG4gICAgICBBZG1pbi5jcmVhdGVUeXBlKHR5cGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgdGhpcy5kZWxldGVUeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgdmFyIGl0ZW1fdHlwZV9pZCA9IGRhdGEuaXRlbV90eXBlO1xyXG4gICAgIEFkbWluLmRlbGV0ZVR5cGUoaXRlbV90eXBlX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfTtcclxuXHJcbi8vIOyDge2SiCDrtoTrpZjtkZxcclxuICBBZG1pbi5yZWFkVHlwZSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIE1lbnUucmVhZE1haW5NZW51KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICBmb3IoaT0wOyBpPHR5cGUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICBuYW1lOiB0eXBlW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uY2F0ZWdvcnlfaWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYXBwLnR5cGVEYXRhcyA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pXHJcblxyXG4vLyDsg4Htkogg67aE66WY7ZGcXHJcbi5jb250cm9sbGVyKCdjcmVhdGVUeXBlQ3RybCcsIGZ1bmN0aW9uKEFkbWluLCAkc3RhdGUsIE1lbnUsICR3aW5kb3cpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIGFwcC5kYXRhID0ge1xyXG4gICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICBdLFxyXG4gICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgIH07XHJcblxyXG4gICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgbmFtZTogdHlwZVtpXS5uYW1lLFxyXG4gICAgICAgICAgIGlkOiB0eXBlW2ldLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgIH07XHJcbiAgICAgICB9XHJcbiAgICAgfSBlbHNlIHtcclxuICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgIH1cclxuICAgfSk7XHJcblxyXG5cclxuICB0aGlzLmNyZWF0ZVR5cGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgYXBwLnR5cGVEYXRhID0ge1xyXG4gICAgICBjYXRlZ29yeTogYXBwLmRhdGEuc2VsZWN0ZWRPcHRpb24uaWQsXHJcbiAgICAgIHR5cGVfZGVzY3JpcHRpb246IGRhdGEudHlwZV9kZXNjcmlwdGlvbixcclxuICAgICAgdHlwZV9jb2RlOiBkYXRhLnR5cGVfY29kZVxyXG4gICAgfTtcclxuXHJcbiAgICBBZG1pbi5jcmVhdGVUeXBlKGFwcC50eXBlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIGFwcC5zdWNjZXNzID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgYXBwLmtpbmRMaXN0ID0gW107XHJcbiAgYXBwLnR5cGVfdGlueSA9IFtdO1xyXG4gIGFwcC50eXBlX3ByaWNlID0gW107XHJcblxyXG4gIHRoaXMuYWRkTGluZSA9IGZ1bmN0aW9uKGtpbmREYXRhKXtcclxuICAgIGlmKCFraW5kRGF0YSl7XHJcbiAgICAgICR3aW5kb3cuYWxlcnQoJ+ygle2Zle2VnCDqsJLsnYQg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYoa2luZERhdGEua2luZFZhbHVlID09PSBudWxsIHx8IGtpbmREYXRhLmtpbmRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGtpbmREYXRhLmtpbmRWYWx1ZSA9PT0gJycpXHJcbiAgICAgIHtcclxuICAgICAgICAkd2luZG93LmFsZXJ0KCfsmLXshZjrqoXsnYQg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICB9IGVsc2UgaWYoa2luZERhdGEua2luZFByaWNlID09PSBudWxsIHx8IGtpbmREYXRhLmtpbmRQcmljZSA9PT0gdW5kZWZpbmVkIHx8IGtpbmREYXRhLmtpbmRQcmljZSA9PT0gJycpe1xyXG4gICAgICAgICR3aW5kb3cuYWxlcnQoJ+yYteyFmCDqsIDqsqnsnYQg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5raW5kTGlzdC5wdXNoKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBraW5kOiBraW5kRGF0YS5raW5kVmFsdWUsXHJcbiAgICAgICAgICAgIHByaWNlOiBraW5kRGF0YS5raW5kUHJpY2VcclxuICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGFwcC50eXBlX3RpbnkucHVzaChraW5kRGF0YS5raW5kVmFsdWUpO1xyXG4gICAgICAgIGFwcC50eXBlX3ByaWNlLnB1c2goa2luZERhdGEua2luZFByaWNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ21haW5Db250cm9sbGVycycsWydhdXRoU2VydmljZXMnLCAndXNlclNlcnZpY2VzJ10pXHJcbi5jb250cm9sbGVyKCdtYWluQ3RybCcsIGZ1bmN0aW9uKEF1dGgsICR0aW1lb3V0LCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHNjb3BlLCAkd2luZG93LCAkaW50ZXJ2YWwsIFVzZXIsIEF1dGhUb2tlbil7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgYXBwLmxvYWRtZSA9IGZhbHNlO1xyXG4gICRzY29wZS4kb24oJ0xPQUQnLCBmdW5jdGlvbigpe1xyXG4gICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUuJG9uKCdVTkxPQUQnLCBmdW5jdGlvbigpe1xyXG4gICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICB9KTtcclxuXHJcbiAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24oKXtcclxuICAgIGlmKCFjaGVja1Nlc3Npb24pIHtcclxuICAgICAgY2hlY2tTZXNzaW9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZihBdXRoLmlzTG9nZ2VkSW4oKSl7XHJcbiAgICAgICAgYXBwLmlzTG9nZ2VkSW4gPSB0cnVlO1xyXG4gICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgIEF1dGguZ2V0VXNlcigpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICBhcHAudXNlciA9IGRhdGEuZGF0YTtcclxuICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgVXNlci5nZXRQZXJtaXNzaW9uKCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5wZXJtaXNzaW9uID09PSAnYWRtaW4nKXtcclxuICAgICAgICAgICAgICAgIGFwcC5hdXRob3JpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGFwcC5wZXJtaXNzaW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSBpZihkYXRhLmRhdGEucGVybWlzc2lvbiA9PT0gJ2FydGlzdCcpe1xyXG4gICAgICAgICAgICAgICAgYXBwLnBlcm1pc3Npb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYXBwLmxvYWRtZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFwcC5wZXJtaXNzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhcHAuYXV0aG9yaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYXBwLmxvYWRtZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGFwcC5wZXJtaXNzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgYXBwLmF1dGhvcml6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBhcHAubG9hZG1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLnVzZXIgPSBmYWxzZTtcclxuICAgICAgICBhcHAuaXNMb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHZhciBjaGVja1Nlc3Npb24gPSBmdW5jdGlvbigpe1xyXG4gICAgaWYoQXV0aC5pc0xvZ2dlZEluKCkpe1xyXG4gICAgICBhcHAuY2hlY2tTZXNzaW9uID0gdHJ1ZTtcclxuICAgICAgdmFyIGludGVydmFsID0gJGludGVydmFsKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIHRva2VuID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcclxuICAgICAgICBpZih0b2tlbiA9PT0gbnVsbCl7XHJcbiAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKGludGVydmFsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VsZi5wYXJzZUp3dCA9IGZ1bmN0aW9uKHRva2VuKXtcclxuICAgICAgICAgICAgdmFyIGJhc2U2NFVybCA9IHRva2VuLnNwbGl0KCcuJylbMV07XHJcbiAgICAgICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsJysnKS5yZXBsYWNlKCdfJywgJy8nKTtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJHdpbmRvdy5hdG9iKGJhc2U2NCkpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHZhciBleHBpcmVUaW1lID0gc2VsZi5wYXJzZUp3dCh0b2tlbik7XHJcbiAgICAgICAgICB2YXIgdGltZVN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICAgICAgICB2YXIgdGltZUNoZWNrID0gZXhwaXJlVGltZS5leHAgLSB0aW1lU3RhbXA7XHJcblxyXG4gICAgICAgICAgaWYodGltZUNoZWNrIDw9IDUpe1xyXG4gICAgICAgICAgICBzaG93TW9kYWwoJ2V4cGlyZWQnKTtcclxuICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChpbnRlcnZhbCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSwgMjAwMCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY2hlY2tTZXNzaW9uKCk7XHJcblxyXG5cclxuICAgIGFwcC5yZW5ld1Nlc3Npb24gPSBmdW5jdGlvbigpe1xyXG4gICAgICBhcHAuY2hvaWNlTWFkZSA9IHRydWU7XHJcbiAgICAgIFVzZXIucmVuZXdTZXNzaW9uKGFwcC51c2VyLnVzZXJuYW1lKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIEF1dGhUb2tlbi5zZXRUb2tlbihkYXRhLmRhdGEudG9rZW4pO1xyXG4gICAgICAgICAgY2hlY2tTZXNzaW9uKCk7XHJcbiAgICAgICAgICBoaWRlTW9kYWwoJ2V4cGlyZWQnKTtcclxuICAgICAgICB9IGVsc2V7XHJcbiAgICAgICAgICBhcHAuTW9kYWxCb2R5ID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICBoaWRlTW9kYWwoJ2V4cGlyZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcHAuZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgIGFwcC5jaG9pY2VNYWRlID0gdHJ1ZTtcclxuICAgICAgaGlkZU1vZGFsKCdleHBpcmVkJyk7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgc2hvd01vZGFsKCdsb2dvdXQnKTtcclxuICAgICAgfSw1MDApO1xyXG4gICAgfTtcclxuXHJcblxyXG4gIHZhciBzaG93TW9kYWwgPSBmdW5jdGlvbihvcHRpb24pe1xyXG4gICAgYXBwLmNob2ljZU1hZGUgPSBmYWxzZTtcclxuICAgIGFwcC5tb2RhbEhlYWRlciA9IHVuZGVmaW5lZDtcclxuICAgIGFwcC5tb2RhbEJvZHkgPSB1bmRlZmluZWQ7XHJcbiAgICBhcHAuaGlkZUJ1dHRvbiA9IGZhbHNlO1xyXG4vLyBjaGVjayB0b2tlbiBleHBpcmVkXHJcbiAgICBpZihvcHRpb24gPT09ICAnZXhwaXJlZCcgKXtcclxuICAgICAgYXBwLm1vZGFsSGVhZGVyID0gJ1RpbWVvdXQgV2FybmluZyc7XHJcbiAgICAgIGFwcC5tb2RhbEJvZHkgPSAnWW91ciBzZXNzaW9uIHdpbGwgZXhwaXJlZCBpbiA1IG1pbnV0ZXMuIFdvdWxkIHlvdSBsaWtlIHRvIHJlbmV3IHlvdXIgc2Vzc2lvbj8nO1xyXG4gICAgICAkKFwiI215TW9kYWxcIikubW9kYWwoe2JhY2tkcm9wOlwic3RhdGljXCJ9KTtcclxuICAgIH0gZWxzZSBpZihvcHRpb24gPT09ICdsb2dvdXQnKXtcclxuLy8gbG9nb3V0XHJcbiAgICAgIGFwcC5oaWRlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgYXBwLm1vZGFsSGVhZGVyID0gJ+uhnOq3uOyVhOybgyc7XHJcbiAgICAgICQoXCIjbXlNb2RhbFwiKS5tb2RhbCh7YmFja2Ryb3A6XCJzdGF0aWNcIn0pO1xyXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgIEF1dGgubG9nb3V0KCk7XHJcbiAgICAgICAgYXBwLmlzTG9nZ2VkSW4gPSBmYWxzZTtcclxuICAgICAgICBhcHAuYXV0aG9yaXplZCA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5wZXJtaXNzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaGlkZU1vZGFsKCdsb2dvdXQnKTtcclxuICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfSBlbHNlIGlmKG9wdGlvbiA9PT0gJ2xvZ2luJyl7XHJcbi8vIExvZ2luXHJcbiAgICAgICQoXCIjbG9naW5cIikubW9kYWwoe2JhY2tkcm9wOlwic3RhdGljXCJ9KTtcclxuICAgIH1cclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICBpZighYXBwLmNob2ljZU1hZGUpe1xyXG4gICAgICAgICAgaGlkZU1vZGFsKCdsb2dvdXQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIDIwMDApO1xyXG5cclxuICB9O1xyXG5cclxuICB2YXIgaGlkZU1vZGFsID0gZnVuY3Rpb24ob3B0aW9uKXtcclxuXHJcbiAgICBpZihvcHRpb24gPT09ICdleHBpcmVkJyl7XHJcbiAgICAgICQoXCIjbXlNb2RhbFwiKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgfSBlbHNlIGlmKG9wdGlvbiA9PT0gJ2xvZ291dCcpe1xyXG4gICAgICAkKFwiI215TW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcclxuICAgIH0gZWxzZSBpZihvcHRpb24gPT09ICdsb2dpbicpe1xyXG4gICAgICAkKFwiI2xvZ2luXCIpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcblxyXG4vLyDroZzqt7jsnbhcclxuICB0aGlzLmRvTG9naW4gPSBmdW5jdGlvbihsb2dpbkRhdGEsIHZhbGlkKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgYXBwLmV4cGlyZWQgPSBmYWxzZTtcclxuICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgaWYodmFsaWQpe1xyXG4gICAgICBBdXRoLmxvZ2luKGFwcC5sb2dpbkRhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGFwcC5sb2dpbkRhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICBhcHAuaXNMb2dnZWRJbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGNoZWNrU2Vzc2lvbigpO1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xyXG4gICAgICAgICAgfSwxMDAwKTtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICBpZihkYXRhLmRhdGEuZXhwaXJlZCl7XHJcbiAgICAgICAgICAgIGFwcC5leHBpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlOyAvLyBJZiBlcnJvciBvY2N1cnMsIHJlbW92ZSBkaXNhYmxlIGxvY2sgZnJvbSBmb3JtXHJcbiAgICAgIGFwcC5sb2FkaW5nID0gZmFsc2U7IC8vIFN0b3AgYm9vdHN0cmFwIGxvYWRpbmcgaWNvblxyXG4gICAgICBhcHAuZXJyb3JNc2cgPSAn7Jis67CU66W4IOygleuztOulvCDsnoXroKXtlbTso7zshLjsmpQuJzsgLy8gRGlzcGxheSBlcnJvciBpZiB2YWxpZCByZXR1cm5zIGZhbHNlXHJcbiAgICB9XHJcblxyXG4gIH07XHJcblxyXG5cclxuICBhcHAubG9nb3V0ID0gZnVuY3Rpb24oKXtcclxuICAgIHNob3dNb2RhbCgnbG9nb3V0Jyk7XHJcbiAgfTtcclxuXHJcbiAgYXBwLnJlc2VuZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICBoaWRlTW9kYWwoJ2xvZ2luJyk7XHJcbiAgICAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAkc3RhdGUuZ28oJ3Jlc2VuZCcpO1xyXG4gICAgICBhcHAuZXhwaXJlZCA9IGZhbHNlO1xyXG4gICAgfSw1MDApO1xyXG4gIH07XHJcblxyXG4gIGFwcC5yZXNldHVzZXJuYW1lID0gZnVuY3Rpb24oKXtcclxuICAgIGhpZGVNb2RhbCgnbG9naW4nKTtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICRzdGF0ZS5nbygncmVzZXR1c2VybmFtZScpO1xyXG4gICAgfSw1MDApO1xyXG4gIH07XHJcblxyXG4gIGFwcC5yZXNldHBhc3N3b3JkID0gZnVuY3Rpb24oKXtcclxuICAgIGhpZGVNb2RhbCgnbG9naW4nKTtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICRzdGF0ZS5nbygncmVzZXRwYXNzd29yZCcpO1xyXG4gICAgfSw1MDApO1xyXG5cclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdvcmRlckNvbnRyb2xsZXJzJyxbJ29yZGVyU2VydmljZXMnXSlcclxuLmNvbnRyb2xsZXIoJ3JlYWRPcmRlckN0cmwnLCBmdW5jdGlvbiAoJHN0YXRlUGFyYW1zLCAkc3RhdGUsICR3aW5kb3csIE9yZGVyLCAkc2NvcGUpIHtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICB2YXIgdXNlcl9pZCA9ICRzY29wZS5tYWluLnVzZXIudXNlcl9pZDtcclxuXHJcbiAgYXBwLmdldEl0ZW1GYWlsID0gZmFsc2U7XHJcblxyXG4gIGFwcC5jYXNoUmVjZWlwdCA9IHRydWU7XHJcbiAgaWYoYXBwLmNhc2hSZWNlaXB0KXtcclxuICAgIGFwcC5nZXRDYXNoUmVjZWlwdCA9IHRydWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIGFwcC5nZXRDYXNoUmVjZWlwdCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcblxyXG4gIHRoaXMucmVhZEFkZHJlc3MgPSBmdW5jdGlvbigpe1xyXG4gICAgLy9sb2Fk7ZWo7IiY66W8IOydtOyaqe2VmOyXrCBjb3Jl7Iqk7YGs66a97Yq47J2YIOuhnOuUqeydtCDsmYTro4zrkJwg7ZuELCDsmrDtjrjrsojtmLgg7ISc67mE7Iqk66W8IOyLpO2Wie2VqeuLiOuLpC5cclxuICAgIGRhdW0ucG9zdGNvZGUubG9hZChmdW5jdGlvbigpe1xyXG4gICAgICBhcHAuYWRkcmVzc0RldGFpbCA9ICcnO1xyXG4gICAgICAgIG5ldyBkYXVtLlBvc3Rjb2RlKHtcclxuICAgICAgICAgICAgb25jb21wbGV0ZTogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgIGFwcC5kZWxpRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHNpZ3VuZ3VfY29kZTogZGF0YS5zaWd1bmd1Q29kZSxcclxuICAgICAgICAgICAgICAgIGppYnVuX2FkZHJlc3M6IGRhdGEuamlidW5BZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgcm9hZF9hZGRyZXNzOiBkYXRhLnJvYWRBZGRyZXNzXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLm9wZW4oKTtcclxuICAgIH0pO1xyXG5cclxuICB9O1xyXG5cclxuICBPcmRlci5yZWFkT3JkZXJBbmREZWxpKCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4vLyDrk7HroZ3rkJwg67Cw7Iah7KeAIOygleuztOqwgCDsl4bsnYQg65WMXHJcbiAgICAgIGlmKGRhdGEuZGF0YS5yZXN1bHQubGVuZ3RoPT09MCl7XHJcbiAgICAgICAgYXBwLmRlbGl2ZXJ5ID0gZmFsc2U7XHJcbiAgICAgICAgT3JkZXIucmVhZE9yZGVyKHVzZXJfaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICB2YXIgaXRlbVByaWNlID0gW107XHJcbiAgICAgICAgICBhcHAuYWxsSXRlbVByaWNlID0gMDtcclxuICAgICAgICAgIGFwcC5vcmRlckRhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgZm9yKGk9MDsgaTxhcHAub3JkZXJEYXRhLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgaXRlbVByaWNlW2ldID0gYXBwLm9yZGVyRGF0YVtpXS5wcmljZSAqIGFwcC5vcmRlckRhdGFbaV0uYW1vdW50O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yKGk9MDtpPGl0ZW1QcmljZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgYXBwLmFsbEl0ZW1QcmljZSA9IGFwcC5hbGxJdGVtUHJpY2UgKyBpdGVtUHJpY2VbaV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuLy8g65Ox66Gd65CcIOuwsOyGoeyngCDsoJXrs7TqsIAg7J6I7J2EIOuVjFxyXG4gICAgICBlbHNlIHtcclxuICAgICAgdmFyIGl0ZW1QcmljZSA9IFtdO1xyXG4gICAgICBhcHAuZGVsaXZlcnkgPSB0cnVlO1xyXG4gICAgICBhcHAuYWxsSXRlbVByaWNlID0gMDtcclxuICAgICAgYXBwLm9yZGVyRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgIGZvcihpPTA7IGk8YXBwLm9yZGVyRGF0YS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgaXRlbVByaWNlW2ldID0gYXBwLm9yZGVyRGF0YVtpXS5wcmljZSAqIGFwcC5vcmRlckRhdGFbaV0uYW1vdW50O1xyXG4gICAgICB9XHJcbiAgICAgIGZvcihpPTA7aTxpdGVtUHJpY2UubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgYXBwLmFsbEl0ZW1QcmljZSA9IGFwcC5hbGxJdGVtUHJpY2UgKyBpdGVtUHJpY2VbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdGhpcy5jb25maXJtT3JkZXIgPSBmdW5jdGlvbihkYXRhKXtcclxuLy8g65Ox66Gd65CcIOuwsOyGoeyngOqwgCDsnojsnYQg65WMIHB1dFxyXG4gICAgdmFyIGRlbGlEYXRhID0gJyc7XHJcbiAgICB2YXIgcmVjZWlwdERhdGEgPSAnJztcclxuICAgIGlmKGFwcC5kZWxpdmVyeSl7XHJcbi8vICAgIOuzgOqyveyCrO2VrSDsl4bsnYxcclxuICAgICAgaWYoZGF0YS5kYWxpRGF0YSA9PT0gdW5kZWZpbmVkKXtcclxuICAgICAgICBjb25zb2xlLmxvZygn67OA6rK97IKs7ZWtIOyXhuydjCcpO1xyXG4gICAgICB9XHJcbi8vIOuzgOqyveyCrO2VrSDsnojsnYxcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZGVsaURhdGEgPSBkYXRhLmRhbGlEYXRhO1xyXG4gICAgICAgIC8vIGRlbGlEYXRhLnVzZXJfaWQgPSB1c2VyX2lkO1xyXG4gICAgICAgIE9yZGVyLnVwZGF0ZURlbGl2ZXJ5KGRlbGlEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuLy8g65Ox66Gd65CcIOuwsOyGoeyngOqwgCDsl4bsnYQg65WMIHBvc3RcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRlbGlEYXRhID0gZGF0YS5kYWxpRGF0YTtcclxuICAgICAgcmVjZWlwdERhdGEgPSBkYXRhLnJlY2VpcHREYXRhO1xyXG4gICAgICBPcmRlci5jcmVhdGVEZWxpdmVyeShkZWxpRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgdmFyIGl0ZW1faWQgPSBkYXRhLml0ZW1faWQ7XHJcbiAgICBPcmRlci5kZWxldGVPcmRlcihpdGVtX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgIH1lbHNlIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuICB9KVxyXG5cclxuLmNvbnRyb2xsZXIoJ2Jhc2tldEN0cmwnLCBmdW5jdGlvbiAoT3JkZXIsICR3aW5kb3csICRzdGF0ZSkge1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIGFwcC5hbW91bnQgPSAxO1xyXG4gIGFwcC5kYXRhID0ge1xyXG4gICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgXSxcclxuICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgfTtcclxuXHJcbiAgIHRoaXMuZGVsZXRlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgdmFyIGJhc2tldF9pZCA9IGRhdGEuYmFza2V0X2lkO1xyXG4gICAgIE9yZGVyLmRlbGV0ZUJhc2tldChiYXNrZXRfaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuXHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfTtcclxuXHJcbiAgdGhpcy5tYWtlQmFza2V0ID0gZnVuY3Rpb24oKXtcclxuICB9O1xyXG5cclxuICBPcmRlci5yZWFkQmFza2V0KCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBhcHAuYmFza2V0RGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgIHZhciBpO1xyXG4gICAgICB2YXIga2luZCA9IFtdO1xyXG4gICAgICB2YXIgdGVtcCA9IFtdO1xyXG4gICAgICB2YXIgc2VsZWN0RGF0YTtcclxuICAgICAgZm9yKGk9MDsgaSA8IGFwcC5iYXNrZXREYXRhLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgIGtpbmRbaV0gPSBhcHAuYmFza2V0RGF0YVtpXS5raW5kLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICB0ZW1wW2ldID0gYXBwLmJhc2tldERhdGFbaV0ucHJpY2Uuc3BsaXQoJywnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yKGk9MDsgaTxraW5kLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBhcHAuZGF0YVtpXSA9IHtcclxuICAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAgIHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgICAgIF0sXHJcbiAgICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGZvcihqPTA7ajxraW5kW2ldLmxlbmd0aDtqKyspe1xyXG4gICAgICAgICAgYXBwLmRhdGFbaV0uYXZhaWxhYmxlT3B0aW9uc1tqKzFdID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBraW5kW2ldW2pdLFxyXG4gICAgICAgICAgICBpZDogTnVtYmVyKHRlbXBbaV1bal0pXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnZW1haWxDb250cm9sbGVycycsWyd1c2VyU2VydmljZXMnXSlcclxuLmNvbnRyb2xsZXIoJ2VtYWlsQ3RybCcsIGZ1bmN0aW9uKCRzdGF0ZVBhcmFtcywgVXNlciwgJHRpbWVvdXQsICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgVXNlci5hY3RpdmVBY2NvdW50KCRzdGF0ZVBhcmFtcy50b2tlbikudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5zdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZSArICcuLi7rqZTsnbgg7Y6Y7J207KeA66GcIOydtOuPme2VqeuLiOuLpC4nO1xyXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgIH0sMjAwMCk7XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtjpjsnbTsp4DroZwg7J2064+Z7ZWp64uI64ukLic7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgfSwyMDAwKTtcclxuICAgIH1cclxuICB9KTtcclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdyZXNlbmRDdHJsJywgZnVuY3Rpb24oVXNlciwgJHRpbWVvdXQsICRzdGF0ZSl7XHJcbiAgYXBwID0gdGhpcztcclxuICB0aGlzLmNoZWNrQ3JlZGVudGlhbHMgPSBmdW5jdGlvbihsb2dpbkRhdGEpe1xyXG4gICAgYXBwLnN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICBVc2VyLmNoZWNrQ3JlZGVudGlhbHModGhpcy5sb2dpbkRhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBVc2VyLnJlc2VuZExpbmsoYXBwLmxvZ2luRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZSArICcuLi7rqZTsnbgg7Y6Y7J207KeA66GcIOydtOuPme2VqeuLiOuLpC4nO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgICAgICAgIH0sMjAwMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1lbHNlIHtcclxuICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxufSlcclxuXHJcbi5jb250cm9sbGVyKCd1c2VybmFtZUN0cmwnLCBmdW5jdGlvbihVc2VyLCAkdGltZW91dCwgJHN0YXRlKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICB0aGlzLnNlbmRVc2VybmFtZSA9IGZ1bmN0aW9uKHVzZXJEYXRhLCB2YWxpZCl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICBpZih2YWxpZCl7XHJcbiAgICAgIFVzZXIuc2VuZFVzZXJuYW1lKGFwcC51c2VyRGF0YS5lbWFpbCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtjpjsnbTsp4DroZwg7J2064+Z7ZWp64uI64ukLic7XHJcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7J2066mU7J28IOyjvOyGjOqwgCDslYTri5nri4jri6QuJztcclxuICAgIH1cclxuICB9O1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3Bhc3N3b3JkQ3RybCcsIGZ1bmN0aW9uKFVzZXIsICR0aW1lb3V0LCAkc3RhdGUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIGFwcC5zZW5kUGFzc3dvcmQgPSBmdW5jdGlvbihyZXNldERhdGEsIHZhbGlkKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGlmKHZhbGlkKXtcclxuICAgICAgVXNlci5zZW5kUGFzc3dvcmQoYXBwLnJlc2V0RGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtjpjsnbTsp4DroZwg7J2064+Z7ZWp64uI64ukLic7XHJcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7JWE7J2065SU6rCAIOyVhOuLmeuLiOuLpC4nO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pXHJcblxyXG4uY29udHJvbGxlcigncmVzZXRDdHJsJywgZnVuY3Rpb24oJHN0YXRlUGFyYW1zLCAkc2NvcGUsIFVzZXIsICR0aW1lb3V0LCAkc3RhdGUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG5cclxuICAgIGFwcC5oaWRlID0gdHJ1ZTsgLy8gSGlkZSBmb3JtIHVudGlsIHRva2VuIGNhbiBiZSB2ZXJpZmllZCB0byBiZSB2YWxpZFxyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRva2VuIGlzIHZhbGlkIGFuZCBnZXQgdGhlIHVzZXIncyBpbmZvIGZyb20gZGF0YWJhc2UgKHJ1bnMgb24gcGFnZSBsb2FkKVxyXG4gICAgVXNlci5yZXNldFBhc3N3b3JkKCRzdGF0ZVBhcmFtcy50b2tlbikudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciB3YXMgcmV0cmlldmVkXHJcbiAgICAgICAgaWYgKGRhdGEuZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgIGFwcC5oaWRlID0gZmFsc2U7IC8vIFNob3cgZm9ybVxyXG4gICAgICAgICAgICAkc2NvcGUuYWxlcnQgPSAnYWxlcnQgYWxlcnQtc3VjY2Vzcyc7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSAn7IOI66Gc7Jq0IOu5hOuwgOuyiO2YuOulvCDsnoXroKXtlbTso7zshLjsmpQuJzsgLy8gTGV0IHVzZXIga25vdyB0aGV5IGNhbiBlbnRlciBuZXcgcGFzc3dvcmRcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJuYW1lID0gZGF0YS5kYXRhLnVzZXJbMF0udXNlcm5hbWU7IC8vIFNhdmUgdXNlcm5hbWUgaW4gc2NvcGUgZm9yIHVzZSBpbiBzYXZlUGFzc3dvcmQoKSBmdW5jdGlvblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS5hbGVydCA9ICdhbGVydCBhbGVydC1kYW5nZXInOyAvLyBTZXQgc3VjY2VzcyBtZXNzYWdlIGNsYXNzXHJcbiAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlOyAvLyBHcmFiIGVycm9yIG1lc3NhZ2UgZnJvbSBKU09OIG9iamVjdFxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIHNhdmUgdXNlcidzIG5ldyBwYXNzd29yZCB0byBkYXRhYmFzZVxyXG4gICAgYXBwLnNhdmVQYXNzd29yZCA9IGZ1bmN0aW9uKHJlZ0RhdGEsIHZhbGlkLCBjb25maXJtZWQpIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTsgLy8gQ2xlYXIgZXJyb3JNc2cgd2hlbiB1c2VyIHN1Ym1pdHNcclxuICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7IC8vIERpc2FibGUgZm9ybSB3aGlsZSBwcm9jZXNzaW5nXHJcbiAgICAgICAgYXBwLmxvYWRpbmcgPSB0cnVlOyAvLyBFbmFibGUgbG9hZGluZyBpY29uXHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIGZvcm0gaXMgdmFsaWQgYW5kIHBhc3N3b3JkcyBtYXRjaFxyXG4gICAgICAgIGlmICh2YWxpZCAmJiBjb25maXJtZWQpIHtcclxuICAgICAgICAgICAgYXBwLnJlZ0RhdGEudXNlcm5hbWUgPSAkc2NvcGUudXNlcm5hbWU7IC8vIEdyYWIgdXNlcm5hbWUgZnJvbSAkc2NvcGVcclxuXHJcbiAgICAgICAgICAgIC8vIFJ1biBmdW5jdGlvbiB0byBzYXZlIHVzZXIncyBuZXcgcGFzc3dvcmQgdG8gZGF0YWJhc2VcclxuICAgICAgICAgICAgVXNlci5zYXZlUGFzc3dvcmQoYXBwLnJlZ0RhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgYXBwLmxvYWRpbmcgPSBmYWxzZTsgLy8gU3RvcCBsb2FkaW5nIGljb25cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHBhc3N3b3JkIHdhcyBzYXZlZCB0byBkYXRhYmFzZVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ2FsZXJ0IGFsZXJ0LXN1Y2Nlc3MnOyAvLyBTZXQgc3VjY2VzcyBtZXNzYWdlIGNsYXNzXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZSArICcuLi7rqZTsnbgg7ZmU66m07Jy866GcIOydtOuPme2VqeuLiOuLpC4nOyAvLyBHcmFiIHN1Y2Nlc3MgbWVzc2FnZSBmcm9tIEpTT04gb2JqZWN0IGFuZCByZWRpcmVjdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlZGlyZWN0IHRvIGxvZ2luIHBhZ2UgYWZ0ZXIgMjAwMCBtaWxsaXNlY29uZHMgKDIgc2Vjb25kcylcclxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGVydCA9ICdhbGVydCBhbGVydC1kYW5nZXInOyAvLyBTZXQgc3VjY2VzcyBtZXNzYWdlIGNsYXNzXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7IC8vIEVuYWJsZSBmb3JtIHRvIGFsbG93IHVzZXIgdG8gcmVzdWJtaXRcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTsgLy8gR3JhYiBlcnJvciBtZXNzYWdlIGZyb20gSlNPTiBvYmplY3RcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ2FsZXJ0IGFsZXJ0LWRhbmdlcic7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgYXBwLmxvYWRpbmcgPSBmYWxzZTsgLy8gU3RvcCBsb2FkaW5nIGljb25cclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7IC8vIEVuYWJsZSBmb3JtIHRvIGFsbG93IHVzZXIgdG8gcmVzdWJtaXRcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gJ+yYrOuwlOuluCDsoJXrs7Trpbwg7J6F66Cl7ZW07KO87IS47JqULic7IC8vIExldCB1c2VyIGtub3cgZm9ybSBpcyBub3QgdmFsaWRcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ3VzZXJDb250cm9sbGVycycsWyd1c2VyU2VydmljZXMnXSlcclxuLmNvbnRyb2xsZXIoJ3JlZ0N0cmwnLCBmdW5jdGlvbiAoICRodHRwLCAkbG9jYXRpb24sICR0aW1lb3V0LCBVc2VyLCBBdXRoLCAkc3RhdGUpIHtcclxuICAgIHZhciBhcHAgPSB0aGlzO1xyXG5cclxuICAgICAgdGhpcy5yZWdTdGVwMSA9IGZ1bmN0aW9uKHJlZ0RhdGEpe1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgIGlmKCFyZWdEYXRhKXtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9ICfslb3qtIDsl5Ag64+Z7J2Y7ZW07JW866eMIO2ajOybkOqwgOyeheydhCDsp4TtlontlaAg7IiYIOyeiOyKteuLiOuLpC4nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZigocmVnRGF0YS50ZXJtcykgJiYgKHJlZ0RhdGEucHJpdmFjeSkpIHtcclxuICAgICAgICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gJ+yVveq0gOyXkCDshLHqs7XsoIHsnLzroZwg64+Z7J2Y7ZWY7IWo7Iq164uI64ukLic7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAucmVnaXN0ZXJTdGVwMicpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9ICfslb3qtIDsl5Ag64+Z7J2Y7ZW07JW866eMIO2ajOybkOqwgOyeheydhCDsp4TtlontlaAg7IiYIOyeiOyKteuLiOuLpC4nO1xyXG4gICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfTtcclxuXHJcbiAgICAvLyDtmozsm5DqsIDsnoVcclxuICAgICAgdGhpcy5yZWdTdGVwMiA9IGZ1bmN0aW9uKHJlZ0RhdGEsIHZhbGlkLCBjb25maXJtZWQpe1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgJHN0YXRlLmdvKCdhcHAucmVnaXN0ZXJTdGVwMycpO1xyXG4gICAgICAgIC8vIGlmKHZhbGlkICYmIGNvbmZpcm1lZCl7XHJcbiAgICAgICAgLy8gICBVc2VyLmNyZWF0ZShhcHAucmVnRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAvLyAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIC8vICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAvLyAgICAgICBBdXRoLmxvZ2luKGFwcC5yZWdEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIC8vICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIC8vICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xyXG4gICAgICAgIC8vICAgICAgICAgICB9LDEwMDApO1xyXG4gICAgICAgIC8vICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgICAgICBpZihkYXRhLmRhdGEuZXhwaXJlZCl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYXBwLmV4cGlyZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgLy8gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgLy8gICAgICAgICAgIH1cclxuICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAvLyAgICAgICB9KTtcclxuICAgICAgICAvLyAgICAgfWVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIC8vICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICB9KTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTsgLy8gSWYgZXJyb3Igb2NjdXJzLCByZW1vdmUgZGlzYWJsZSBsb2NrIGZyb20gZm9ybVxyXG4gICAgICAgIC8vICAgICAgYXBwLmxvYWRpbmcgPSBmYWxzZTsgLy8gU3RvcCBib290c3RyYXAgbG9hZGluZyBpY29uXHJcbiAgICAgICAgLy8gICAgICBhcHAuZXJyb3JNc2cgPSAn7Jis67CU66W4IOygleuztOulvCDsnoXroKXtlbTso7zshLjsmpQuJzsgLy8gRGlzcGxheSBlcnJvciBpZiB2YWxpZCByZXR1cm5zIGZhbHNlXHJcbiAgICAgICAgLy8gfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8g7ZqM7JuQ6rCA7J6FXHJcbiAgICAgICAgdGhpcy5yZWdTdGVwMyA9IGZ1bmN0aW9uKHJlZ0RhdGEsIHZhbGlkLCBjb25maXJtZWQpe1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgaWYodmFsaWQgJiYgY29uZmlybWVkKXtcclxuICAgICAgICAgICAgVXNlci5jcmVhdGUoYXBwLnJlZ0RhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBBdXRoLmxvZ2luKGFwcC5yZWdEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9LDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLmV4cGlyZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmV4cGlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlOyAvLyBJZiBlcnJvciBvY2N1cnMsIHJlbW92ZSBkaXNhYmxlIGxvY2sgZnJvbSBmb3JtXHJcbiAgICAgICAgICAgICAgIGFwcC5sb2FkaW5nID0gZmFsc2U7IC8vIFN0b3AgYm9vdHN0cmFwIGxvYWRpbmcgaWNvblxyXG4gICAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSAn7Jis67CU66W4IOygleuztOulvCDsnoXroKXtlbTso7zshLjsmpQuJzsgLy8gRGlzcGxheSBlcnJvciBpZiB2YWxpZCByZXR1cm5zIGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgnYWRtaW5IZWFkZXInLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL2FkbWluL2FkbWluSGVhZGVyLnRwbC5odG1sJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHBDdHJsID0gY3RybHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgnYWRtaW5MYWJvcmF0b3J5JywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9hZG1pbi9hZG1pbkxhYm9yYXRvcnkudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5kaXJlY3RpdmUoJ2ZpbGVNb2RlbCcsZnVuY3Rpb24oJHBhcnNlKXtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycyl7XHJcbiAgICAgIHZhciBwYXJzZWRGaWxlID0gJHBhcnNlKGF0dHJzLmZpbGVNb2RlbCk7XHJcbiAgICAgIHZhciBwYXJzZWRmaWxlU2V0dGVyID0gcGFyc2VkRmlsZS5hc3NpZ247XHJcblxyXG4gICAgICBlbGVtZW50LmJpbmQoJ2NoYW5nZScsZnVuY3Rpb24oKXtcclxuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcclxuICAgICAgICAgIHBhcnNlZGZpbGVTZXR0ZXIoc2NvcGUsIGVsZW1lbnRbMF0uZmlsZXNbMF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5kaXJlY3RpdmUoJ21hdGNoJyxmdW5jdGlvbigpe1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgY29udHJvbGxlcjpmdW5jdGlvbigkc2NvcGUpe1xyXG4gICAgICAkc2NvcGUuZG9Db25maXJtID0gZnVuY3Rpb24odmFsdWVzKXtcclxuXHJcbiAgICAgICAgJHNjb3BlLmNvbmZpcm1lZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGVsZSl7XHJcbiAgICAgICAgICBpZigkc2NvcGUuY29uZmlybSA9PSBlbGUpe1xyXG4gICAgICAgICAgICAkc2NvcGUuY29uZmlybWVkID0gdHJ1ZTtcclxuICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNvbmZpcm1lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBsaW5rOmZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycyl7XHJcbiAgICAgIGF0dHJzLiRvYnNlcnZlKCdtYXRjaCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgc2NvcGUubWF0Y2hlcyA9IEpTT04ucGFyc2UoYXR0cnMubWF0Y2gpO1xyXG4gICAgICAgIHNjb3BlLmRvQ29uZmlybShzY29wZS5tYXRjaGVzKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goJ2NvbmZpcm0nLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIHNjb3BlLm1hdGNoZXMgPSBKU09OLnBhcnNlKGF0dHJzLm1hdGNoKTtcclxuICAgICAgICBzY29wZS5kb0NvbmZpcm0oc2NvcGUubWF0Y2hlcyk7XHJcblxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdjb21wYW55SW50cm9kdWNlJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9tYWluL2NvbXBhbnlJbnRyb2R1Y2UudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdjb21wYW55UHJpdmFjeUluZm9ybWF0aW9uJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIE5hbWVDdHJsID0gdGhpcztcclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvY29tcGFueUluZm9ybWF0aW9uL2NvbXBhbnlQcml2YWN5SW5mb3JtYXRpb24udHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdwcml2YWN5JywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9tYWluL3ByaXZhY3kudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCd0ZXJtcycsIFtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogWyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwID0gdGhpcztcclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2RpcmVjdGl2ZXMvbWFpbi90ZXJtcy50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwQ3RybCA9IGN0cmxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ3VzZXJRdWlja01lbnUnLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgTmFtZUN0cmwgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9jb21wYW55SW5mb3JtYXRpb24vdXNlclF1aWNrTWVudS50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2NvbnRlbnQnLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9tYWluL2NvbnRlbnQudHBsLmh0bWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEN0cmwgPSBjdHJscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdmb290ZXInLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9kaXJlY3RpdmVzL21haW4vZm9vdGVyLnRwbC5odG1sJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHBDdHJsID0gY3RybHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgnaGVhZGVyJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvZGlyZWN0aXZlcy9tYWluL2hlYWRlci50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwQ3RybCA9IGN0cmxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYmFubmVyQ29udHJvbGxlcicsIFtdKVxyXG4uY29udHJvbGxlcigndXBsb2FkQmFubmVyQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwkdGltZW91dCwkaHR0cCwgJHdpbmRvdywgJHN0YXRlKXtcclxudmFyIGFwcCA9IHRoaXM7XHJcbnRoaXMuZmlsZSA9IHt9O1xyXG5cclxuLy8g7J6R7ZKIIOyEpOuqhSDsnbTrr7jsp4Ag7JeF66Gc65OcIOuQmOyXiOuKlOyngCDrs7Tsl6zso7zquLBcclxudGhpcy5yZWFkSW1hZ2UgPSBmdW5jdGlvbihmaWxlcykge1xyXG4kc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0ubmFtZS5tYXRjaCgvXFwuKHBuZ3xqcGVnfGpwZykkLykpIHtcclxuICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XHJcbiAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwuZGF0YVVybCA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4vLyDsnpHtkogg7ISk66qFICDsnbTrr7jsp4Ag7JeF66Gc65Oc7ZW07IScIOqyveuhnCDsoIDsnqVcclxudGhpcy51cGxvYWRCYW5uZXIgPSBmdW5jdGlvbigpe1xyXG4vLyDsnpHtkogg7ISk66qFICDsl4XroZzrk5wg7Jes67aAXHJcbiAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgYXBwLmV4cGxhaW5QaG90byA9IGZhbHNlO1xyXG4gIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgZmQuYXBwZW5kKCdteWZpbGUnLCBhcHAuZmlsZS51cGxvYWQpO1xyXG4gICAgJGh0dHAucG9zdCgnL2FwaS9iYW5uZXIvJywgZmQse1xyXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcclxuICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkfVxyXG4gIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgIGFwcC5leHBsYWluUGhvdG8gPSB0cnVlO1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ2dldEJhbm5lckN0cmwnLCBmdW5jdGlvbigkaHR0cCl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG4gICRodHRwLmdldCgnL2FwaS9iYW5uZXInKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XHJcbiAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBhcHAuYmFubmVyRGF0YSA9IHJlc3VsdC5kYXRhLmJhbm5lckRhdGE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIuu2iOufrOyYpOyngCDrqrvtlZjsmIDsirXri4jri6QuXCIpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2JvYXJkQ29udHJvbGxlcicsIFtdKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2NyZWF0ZUJvYXJkQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkaHR0cCkge1xyXG4gICAgICAgIHZhciBjcmVhdGVCb2FyZEN0cmwgPSB0aGlzO1xyXG4gICAgICAgIGNyZWF0ZUJvYXJkQ3RybC5kb1dyaXRlID0gZnVuY3Rpb24gKGJvYXJkRGF0YSkge1xyXG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL2JvYXJkJywgYm9hcmREYXRhKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2dhbGxlcnlDb250cm9sbGVyJywgW10pXHJcbi5jb250cm9sbGVyKCd1cGxvYWRnYWxsZXJ5Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwkdGltZW91dCwkaHR0cCwgJHdpbmRvdywgJHN0YXRlKXtcclxudmFyIGFwcCA9IHRoaXM7XHJcbnRoaXMuZmlsZSA9IHt9O1xyXG5cclxuLy8g7J6R7ZKIIOyEpOuqhSDsnbTrr7jsp4Ag7JeF66Gc65OcIOuQmOyXiOuKlOyngCDrs7Tsl6zso7zquLBcclxudGhpcy5yZWFkSW1hZ2UgPSBmdW5jdGlvbihmaWxlcykge1xyXG4kc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0ubmFtZS5tYXRjaCgvXFwuKHBuZ3xqcGVnfGpwZykkLykpIHtcclxuICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XHJcbiAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwuZGF0YVVybCA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4vLyDsnpHtkogg7ISk66qFICDsnbTrr7jsp4Ag7JeF66Gc65Oc7ZW07IScIOqyveuhnCDsoIDsnqVcclxudGhpcy51cGxvYWRJbWFnZSA9IGZ1bmN0aW9uKGl0ZW1UaXRsZSl7XHJcbi8vIOyeke2SiCDshKTrqoUgIOyXheuhnOuTnCDsl6zrtoBcclxuICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICBhcHAuZXhwbGFpblBob3RvID0gZmFsc2U7XHJcbiAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICBmZC50aXRsZSA9IGl0ZW1UaXRsZTtcclxuICBmZC5hcHBlbmQoJ215ZmlsZScsIGFwcC5maWxlLnVwbG9hZCk7XHJcbiAgICAkaHR0cC5wYXRjaCgnL2FwaS9nYWxsZXJ5LycsIGZkLCB7XHJcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG4gICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWR9XHJcbiAgfSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgYXBwLmltYWdlUGF0aCA9IGRhdGEuZGF0YS5pbWFnZV9wYXRoO1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgYXBwLmV4cGxhaW5QaG90byA9IHRydWU7XHJcbiAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy51cGxvYWRHYWxsZXJ5ID0gZnVuY3Rpb24odGl0bGUpe1xyXG4gICAgZ2FsbGVyeURhdGEgPSB7XHJcbiAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgaW1hZ2VQYXRoIDogYXBwLmltYWdlUGF0aFxyXG4gICAgfTtcclxuICAgICRodHRwLnBvc3QoJy9hcGkvZ2FsbGVyeScsIGdhbGxlcnlEYXRhKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XHJcbiAgICB9KTtcclxuICB9O1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ2dldEdhbGxlcnlDdHJsJywgZnVuY3Rpb24oJGh0dHApe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG5cclxuICAkaHR0cC5nZXQoJy9hcGkvZ2FsbGVyeScpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcclxuICAgIGlmKHJlc3VsdC5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIGFwcC5nYWxsZXJ5RGF0YSA9IHJlc3VsdC5kYXRhLmdhbGxlcnlEYXRhO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGFwcC5nYWxsZXJ5RGF0YSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIuu2iOufrOyYpOyngCDrqrvtlZjsmIDsirXri4jri6QuXCIpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuIiwiICBhbmd1bGFyLm1vZHVsZSgnaXRlbUNvbnRyb2xsZXJzJyxbJ29yZGVyU2VydmljZXMnXSlcclxuICAuZmlsdGVyKCdzdW1CeUtleScsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgcHJvcGVydHkpIHtcclxuICAgIHZhciBpID0gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSA/IGlucHV0Lmxlbmd0aCA6IDA7XHJcbi8vIGlmIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLCByZXR1cm5zIGxlbmd0aCBvZiBhcnJheVxyXG4vLyBpZiBhcnJheSBoYXMgemVybyBsZW5ndGggb3IgaWYgaXQgaXMgbm90IGFuIGFycmF5LCByZXR1cm4gemVyb1xyXG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3VuZGVmaW5lZCcgfHwgaSA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBpO1xyXG4vLyB0ZXN0IGlmIHByb3BlcnR5IGlzIG51bWJlciBzbyBpdCBjYW4gYmUgY291bnRlZFxyXG4gICAgfVxyXG4gICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGktLSlcclxuICAgICAgICAgICAgdG90YWwgKz0gKGlucHV0W2ldW3Byb3BlcnR5WzBdXSAqIGlucHV0W2ldW3Byb3BlcnR5WzFdXSk7XHJcbiAgICAgICAgcmV0dXJuIHRvdGFsO1xyXG4gICAgfVxyXG59O1xyXG59KVxyXG4uY29udHJvbGxlcignZ2V0VHlwZUl0ZW1zQ3RybCcsIGZ1bmN0aW9uICgkc3RhdGVQYXJhbXMsICRodHRwKSB7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG4gIHZhciBjYXRlZ29yeV9pZCA9ICRzdGF0ZVBhcmFtcy5jYXRlZ29yeV9pZDtcclxuICBpZighJHN0YXRlUGFyYW1zLnR5cGVfY29kZSl7XHJcbiAgICAkaHR0cC5nZXQoJy9hcGkvaXRlbV90eXBlLycrY2F0ZWdvcnlfaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBpZihkYXRhLmRhdGEucmVzdWx0Lmxlbmd0aCA9PT0gMCApe1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gJ+uTseuhneuQnCDsg4HtkojsnbQg7JeG7Iq164uI64ukLic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5pdGVtc0RhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciB0eXBlX2NvZGUgPSAgJHN0YXRlUGFyYW1zLnR5cGVfY29kZTtcclxuICAgICRodHRwLmdldCgnL2FwaS9pdGVtX3R5cGUvJytjYXRlZ29yeV9pZCxcclxuICAgIHsgIHBhcmFtczoge3R5cGVfY29kZSA6IHR5cGVfY29kZSB9fVxyXG4gICkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5yZXN1bHQubGVuZ3RoID09PSAwICl7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSAn65Ox66Gd65CcIOyDge2SiOydtCDsl4bsirXri4jri6QuJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLml0ZW1zRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ2dldFR5cGVJdGVtQ3RybCcsIGZ1bmN0aW9uKEFkbWluLCAkc3RhdGVQYXJhbXMsICR3aW5kb3csICRzdGF0ZSwgT3JkZXIpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHZhciBpdGVtX2lkID0gJHN0YXRlUGFyYW1zLml0ZW1faWQ7XHJcbiAgYXBwLm9wdGlvbkl0ZW0gPSBmYWxzZTtcclxuXHJcbiAgYXBwLmRhdGEgPSB7XHJcbiAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICBdLFxyXG4gICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICB9O1xyXG5cclxuICAgYXBwLmFtb3VudCA9IDE7XHJcblxyXG4gICBhcHAub3B0aW9uTGlzdCA9IFtdO1xyXG4gICB0aGlzLmFkZEl0ZW0gPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICBpZihkYXRhLmlkID09PSAwKXtcclxuICAgICAgICAkd2luZG93LmFsZXJ0KCfsmLXshZjsnYQg7ISg7YOd7ZW07KO87IS47JqULicpO1xyXG4gICAgIH0gZWxzZSB7XHJcbiAgICAgICBhcHAub3B0aW9uSXRlbSA9IHRydWU7XHJcbiAgICAgICBhcHAub3B0aW9uTGlzdC5wdXNoKFxyXG4gICAgICAgICAgIHtcclxuICAgICAgICAgICAgIGtpbmQ6IGRhdGEubmFtZSxcclxuICAgICAgICAgICAgIHByaWNlOiBkYXRhLmlkLFxyXG4gICAgICAgICAgICAgYW1vdW50OiAxXHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICApO1xyXG5cclxuICAgICB9XHJcbiAgIH07XHJcblxyXG4gIHRoaXMuY3JlYXRlQmFza2V0ID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICB2YXIgYmFza2V0RGF0YSA9IHtcclxuICAgICAgaXRlbV9pZDogZGF0YS5pdGVtX2lkLFxyXG4gICAgfTtcclxuICAgIE9yZGVyLmNyZWF0ZUJhc2tldChiYXNrZXREYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuY3JlYXRlT3JkZXIgPSBmdW5jdGlvbihkYXRhKXtcclxuXHJcbiAgICB2YXIgb3JkZXJEYXRhID0ge1xyXG4gICAgICBpdGVtX2lkOiBkYXRhLml0ZW1faWQsXHJcbiAgICAgIGFtb3VudDogZGF0YS5hbW91bnQsXHJcbiAgICAgIGtpbmRfb2Y6IGRhdGEua2luZF9vZixcclxuICAgICAgcHJpY2U6IGRhdGEucHJpY2VcclxuICAgIH07XHJcblxyXG4gICAgT3JkZXIuY3JlYXRlT3JkZXIob3JkZXJEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5tYWtlT3JkZXInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gIH07XHJcblxyXG4gIEFkbWluLnJlYWRJdGVtKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIHZhciBraW5kID0gZGF0YS5kYXRhLnJlc3VsdC5raW5kLnNwbGl0KCcsJyk7XHJcbiAgICAgIHZhciB0ZW1wID0gZGF0YS5kYXRhLnJlc3VsdC5wcmljZS5zcGxpdCgnLCcpO1xyXG4gICAgICB2YXIgcHJpY2UgPSBbXTtcclxuICAgICAgZm9yKGk9MDtpPHRlbXAubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgcHJpY2VbaV0gPSBOdW1iZXIodGVtcFtpXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFwcC5pdGVtRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcblxyXG4gICAgICBmb3IoaT0wOyBpPHByaWNlLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICBuYW1lOiBraW5kW2ldLFxyXG4gICAgICAgICAgaWQ6IHByaWNlW2ldXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ21hbmFnZW1lbnRDb250cm9sbGVycycsIFsnYWRtaW5TZXJ2aWNlcycsICdtZW51U2VydmljZXMnLCAnb3JkZXJTZXJ2aWNlcyddKVxyXG5cclxuLmNvbnRyb2xsZXIoJ3JlYWRJdGVtc0N0cmwnLCBmdW5jdGlvbihBZG1pbiwgJHN0YXRlKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICBBZG1pbi5yZWFkSXRlbXMoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIGFwcC5pdGVtc0RhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHRoaXMuZGVsZXRlSXRlbSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICB2YXIgaXRlbV9pZCA9IGRhdGEuaXRlbV9pZDtcclxuICAgIEFkbWluLmRlbGV0ZUl0ZW0oaXRlbV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3JlYWRJdGVtQ3RybCcsIGZ1bmN0aW9uKEFkbWluLCAkc3RhdGVQYXJhbXMsICRzY29wZSwgT3JkZXIsICR3aW5kb3cpe1xyXG5cclxuICAgIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgdmFyIGl0ZW1faWQgPSAkc3RhdGVQYXJhbXMuaXRlbV9pZDtcclxuICAgIGFwcC5kYXRhID0ge1xyXG4gICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgIHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgXSxcclxuICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgIH07XHJcblxyXG4gICAgIGFwcC5hbW91bnQgPSAxO1xyXG5cclxuICAgIEFkbWluLnJlYWRJdGVtKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICB2YXIga2luZCA9IGRhdGEuZGF0YS5yZXN1bHQua2luZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgIHZhciB0ZW1wID0gZGF0YS5kYXRhLnJlc3VsdC5wcmljZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgIHZhciBwcmljZSA9IFtdO1xyXG4gICAgICAgIGZvcihpPTA7aTx0ZW1wLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgcHJpY2VbaV0gPSBOdW1iZXIodGVtcFtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFwcC5pdGVtRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgYXBwLmRhdGEuc2VsZWN0ZWRPcHRpb24gPSB7XHJcbiAgICAgICAgICBpZCA6IHByaWNlWzBdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm9yKGk9MDsgaTxwcmljZS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGtpbmRbaV0sXHJcbiAgICAgICAgICAgIGlkOiBwcmljZVtpXVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG59KVxyXG5cclxuXHJcblxyXG5cclxuLmNvbnRyb2xsZXIoJ3VwZGF0ZUl0ZW1DdHJsJywgZnVuY3Rpb24oQWRtaW4sICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaHR0cCwgJHRpbWVvdXQsICAkc3RhdGUsICR3aW5kb3csIE1lbnUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHZhciBpdGVtX2lkID0gJHN0YXRlUGFyYW1zLml0ZW1faWQ7XHJcblxyXG4gICAgICAgICBhcHAuZGF0YSA9IHtcclxuICAgICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBhcHAuZGF0YTIgPSB7XHJcbiAgICAgICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgIGFwcC5kYXRhLmF2YWlsYWJsZU9wdGlvbnNbaSsxXSA9IHtcclxuICAgICAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICBpZDogdHlwZVtpXS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHRoaXMucmVhZE1lbnUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFwcC5yZWFkTWVudVN0YXR1cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZihkYXRhLmlkID09PSAwKXtcclxuICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KCfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHZhciBjYXRlZ29yeV9pZCA9IGRhdGEuaWQ7XHJcbiAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL21lbnUvJytjYXRlZ29yeV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgIC8vIOy0iOq4sO2ZlCDsi5ztgrRcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnJlc3VsdC5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5kYXRhMiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgn65Ox66Gd65CcIOyDge2SiOydtCDsl4bsirXri4jri6QuJyk7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLnJlYWRNZW51U3RhdHVzID0gdHJ1ZTtcclxuICAgIC8vIOy0iOq4sO2ZlCDsi5zsvJzslbztlZjripTrjbAg7Ja065a76rKMIO2VoOq5jOyalFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5kYXRhMiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5kYXRhMi5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0udHlwZV9kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHR5cGVbaV0uaXRlbV90eXBlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgQWRtaW4ucmVhZEl0ZW0oaXRlbV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBhcHAuaXRlbURhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICBhcHAuZGF0YS5zZWxlY3RlZE9wdGlvbiA9IHtcclxuICAgICAgICBpZCA6IGFwcC5pdGVtRGF0YS5jYXRlZ29yeV9pZFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB0aGlzLnVwZGF0ZUl0ZW0gPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgaWYoYXBwLnJlYWRNZW51U3RhdHVzKXtcclxuICAgICAgaWYoZGF0YS5pdGVtX3R5cGUgPT09IDAgfHwgZGF0YS5pdGVtX3R5cGUgPT09ICcwJyl7XHJcbiAgICAgICAgJHdpbmRvdy5hbGVydCgn7IOB7ZKIIOu2hOulmOulvCDshKDtg53tlbTso7zshLjsmpQuIScpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciB1cGRhdGVEYXRhID0ge1xyXG4gICAgICAgICAgdHlwZTogZGF0YS5pdGVtX3R5cGUsXHJcbiAgICAgICAgICBpdGVtX25hbWU6IGRhdGEuaXRlbV9uYW1lLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJGh0dHAucHV0KCcvYXBpL2l0ZW0vJytpdGVtX2lkLCB1cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB1cGRhdGVEYXRhMiA9IHtcclxuICAgICAgICAgIHR5cGU6IGFwcC5pdGVtRGF0YS5pdGVtX3R5cGVfaWQsXHJcbiAgICAgICAgICBpdGVtX25hbWU6IGRhdGEuaXRlbV9uYW1lLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJGh0dHAucHV0KCcvYXBpL2l0ZW0vJytpdGVtX2lkLCB1cGRhdGVEYXRhMikudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcblxyXG59O1xyXG5cclxuXHJcbiAgLy8g7YyM7J287J2YIOqyveuhnOunjCDsoIDsnqXtlZjquLAg66mU7J24IOydtOuvuOyngCDrp4zrk6TquLBcclxuICAgICAgdGhpcy5maWxlID0ge307XHJcbiAgLy8g66mU7J24IOyeke2SiOydtOuvuOyngCDsl4XroZzrk5wg65CY7JeI64qU7KeAIOuztOyXrOyjvOq4sFxyXG4gICAgICB0aGlzLm1haW5QaG90b0NoYW5nZWQgPSBmdW5jdGlvbihmaWxlcykge1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0ubmFtZS5tYXRjaCgvXFwuKHBuZ3xqcGVnfGpwZykkLykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm1haW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm1haW5UaHVtYm5haWwuZGF0YVVybCA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgYXBwLm1haW5UaHVtYm5haWwgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gIC8vIOuplOyduCDsnpHtkogg7J2066+47KeAIOyXheuhnOuTnO2VtOyEnCDqsr3roZwg7KCA7J6lXHJcbiAgICAgIHRoaXMucmVhZFBob3RvID0gZnVuY3Rpb24oKXtcclxuICAvLyDrqZTsnbgg7J2066+47KeAIOyXheuhnOuTnCDsl6zrtoBcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICBhcHAubWFpblBob3RvID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICBmZC5hcHBlbmQoJ215ZmlsZScsIGFwcC5maWxlLnVwbG9hZCk7XHJcbiAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL2NyZWF0ZVBob3RvSW1hZ2UvJywgZmQse1xyXG4gICAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcclxuICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkfVxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBhcHAubWFpblBob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciB1cGRhdGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgIGltYWdlOiBkYXRhLmRhdGEuaXRlbV9wYXRoXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRodHRwLnB1dCgnL2FwaS9pdGVtLycraXRlbV9pZCwgdXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXBwLmZpbGUgPSB7fTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gIC8vIOyeke2SiCDshKTrqoUg7J2066+47KeAIOyXheuhnOuTnCDrkJjsl4jripTsp4Ag67O07Jes7KO86riwXHJcbiAgICAgIHRoaXMuZXhwbGFpblBob3RvQ2hhbmdlZCA9IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCAmJiBmaWxlc1swXS5uYW1lLm1hdGNoKC9cXC4ocG5nfGpwZWd8anBnKSQvKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1swXTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbC5kYXRhVXJsID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgLy8g7J6R7ZKIIOyEpOuqhSAg7J2066+47KeAIOyXheuhnOuTnO2VtOyEnCDqsr3roZwg7KCA7J6lXHJcbiAgICAgIHRoaXMucmVhZFBob3RvRXhwbGFpbiA9IGZ1bmN0aW9uKCl7XHJcbiAgLy8g7J6R7ZKIIOyEpOuqhSAg7JeF66Gc65OcIOyXrOu2gFxyXG4gICAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgIGFwcC5leHBsYWluUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIGZkLmFwcGVuZCgnbXlmaWxlJywgYXBwLmZpbGUudXBsb2FkKTtcclxuICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvY3JlYXRlUGhvdG9FeHBsYWluLycsIGZkLHtcclxuICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXHJcbiAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgYXBwLmV4cGxhaW5QaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgdXBkYXRlRGF0YSA9IHtcclxuICAgICAgICAgICAgICBleHBsYWluOiBkYXRhLmRhdGEuaXRlbV9wYXRoXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRodHRwLnB1dCgnL2FwaS9pdGVtLycraXRlbV9pZCwgdXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgLy8g7I2464Sk7J28IOydtOuvuOyngCDrp4zrk6TquLBcclxuICAgICAgICBhcHAubXlJbWFnZT0nJztcclxuICAgICAgICBhcHAubXlDcm9wcGVkSW1hZ2U9Jyc7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVGaWxlU2VsZWN0PWZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICB2YXIgZmlsZT1ldnQuY3VycmVudFRhcmdldC5maWxlc1swXTtcclxuICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigkc2NvcGUpe1xyXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgYXBwLm15SW1hZ2U9ZXZ0LnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZpbGVJbnB1dCcpKS5vbignY2hhbmdlJyxoYW5kbGVGaWxlU2VsZWN0KTtcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiBkZWNvZGVCYXNlNjRJbWFnZShkYXRhU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gZGF0YVN0cmluZy5tYXRjaCgvXmRhdGE6KFtBLVphLXotK1xcL10rKTtiYXNlNjQsKC4rKSQvKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCAhPT0gMykge1xyXG4gICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgc3RyaW5nJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIGZpbGUgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlIDogbWF0Y2hlc1sxXSxcclxuICAgICAgICAgICAgICAgIGRhdGEgOiBtYXRjaGVzWzJdXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAvLyDsjbjrhKTsnbwg7J2066+47KeAIOuhnOy7rOuUlOyKpO2BrOyXkCDsoIDsnqUg7ZuEIOyggOyepSDsnITsuZgg6rCA7KC47Jik6riwXHJcbiAgICAgICAgICB0aGlzLnJlYWRDcm9wSW1hZ2UgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdMT0FEJyk7XHJcbiAgICAgICAgICAgIGFwcC50aHVtYm5haWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYoZGF0YS5iYXNlNjRVcmwgPT09ICcnIHx8IGRhdGEuYmFzZTY0VXJsID09PSBudWxsIHx8IGRhdGEuYmFzZTY0VXJsID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICB2YXIgYmxvYiA9IGRlY29kZUJhc2U2NEltYWdlKCRzY29wZS5teUNyb3BwZWRJbWFnZSk7XHJcbiAgICAgICAgICAgICAgICAgIEFkbWluLnJlYWRBcmlzdENyb3AoYmxvYikudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAudGh1bWJuYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogZGF0YS5kYXRhLmZpbGVQYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgJGh0dHAucHV0KCcvYXBpL2l0ZW0vJytpdGVtX2lkLCB1cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG5cclxuXHJcbn0pXHJcblxyXG5cclxuXHJcbi5jb250cm9sbGVyKCdjcmVhdGVJdGVtQ3RybCcsIGZ1bmN0aW9uICgkaHR0cCwgJHRpbWVvdXQsICRzY29wZSwgQWRtaW4sICRzdGF0ZSwgJHdpbmRvdywgTWVudSkge1xyXG4gICAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG5cclxuICAgICAgYXBwLmtpbmRMaXN0ID0gW107XHJcbiAgICAgIGFwcC50eXBlX3RpbnkgPSBbXTtcclxuICAgICAgYXBwLnR5cGVfcHJpY2UgPSBbXTtcclxuXHJcbiAgICAgIHRoaXMuYWRkTGluZSA9IGZ1bmN0aW9uKGtpbmREYXRhKXtcclxuICAgICAgICBpZigha2luZERhdGEpe1xyXG4gICAgICAgICAgJHdpbmRvdy5hbGVydCgn7KCV7ZmV7ZWcIOqwkuydhCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmKGtpbmREYXRhLmtpbmRWYWx1ZSA9PT0gbnVsbCB8fCBraW5kRGF0YS5raW5kVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBraW5kRGF0YS5raW5kVmFsdWUgPT09ICcnKVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAkd2luZG93LmFsZXJ0KCfsmLXshZjrqoXsnYQg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmKGtpbmREYXRhLmtpbmRQcmljZSA9PT0gbnVsbCB8fCBraW5kRGF0YS5raW5kUHJpY2UgPT09IHVuZGVmaW5lZCB8fCBraW5kRGF0YS5raW5kUHJpY2UgPT09ICcnKXtcclxuICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgn7Ji17IWYIOqwgOqyqeydhCDsnoXroKXtlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcHAua2luZExpc3QucHVzaChcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBraW5kOiBraW5kRGF0YS5raW5kVmFsdWUsXHJcbiAgICAgICAgICAgICAgICBwcmljZToga2luZERhdGEua2luZFByaWNlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBhcHAudHlwZV90aW55LnB1c2goa2luZERhdGEua2luZFZhbHVlKTtcclxuICAgICAgICAgICAgYXBwLnR5cGVfcHJpY2UucHVzaChraW5kRGF0YS5raW5kUHJpY2UpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH07XHJcblxyXG4gICAgIGFwcC5kYXRhID0ge1xyXG4gICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICBdLFxyXG4gICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBhcHAuZGF0YTIgPSB7XHJcbiAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgTWVudS5yZWFkTWFpbk1lbnUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0ubmFtZSxcclxuICAgICAgICAgICAgICBpZDogdHlwZVtpXS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5yZWFkTWVudSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuaWQgPT09IDApe1xyXG4gICAgICAgICAgJHdpbmRvdy5hbGVydCgn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFyIGNhdGVnb3J5X2lkID0gZGF0YS5pZDtcclxuICAgICAgICAgICRodHRwLmdldCgnL2FwaS9tZW51LycrY2F0ZWdvcnlfaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuLy8g7LSI6riw7ZmUIOyLnO2CtFxyXG4gICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5yZXN1bHQubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgICAgIGFwcC5kYXRhMiA9IHtcclxuICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+uTseuhneuQnCDsg4HtkojsnbQg7JeG7Iq164uI64ukLicpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbi8vIOy0iOq4sO2ZlCDsi5zsvJzslbztlZjripTrjbAg7Ja065a76rKMIO2VoOq5jOyalFxyXG4gICAgICAgICAgICAgICAgYXBwLmRhdGEyID0ge1xyXG4gICAgICAgICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICAgICBhcHAuZGF0YTIuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0udHlwZV9kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBpZDogdHlwZVtpXS5pdGVtX3R5cGVfaWRcclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuXHJcbi8vIO2MjOydvOydmCDqsr3roZzrp4wg7KCA7J6l7ZWY6riwIOuplOyduCDsnbTrr7jsp4Ag66eM65Ok6riwXHJcbiAgICB0aGlzLmZpbGUgPSB7fTtcclxuLy8g66mU7J24IOyeke2SiOydtOuvuOyngCDsl4XroZzrk5wg65CY7JeI64qU7KeAIOuztOyXrOyjvOq4sFxyXG4gICAgdGhpcy5tYWluUGhvdG9DaGFuZ2VkID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0ubmFtZS5tYXRjaCgvXFwuKHBuZ3xqcGVnfGpwZykkLykpIHtcclxuICAgICAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5tYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAubWFpblRodW1ibmFpbC5kYXRhVXJsID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgIGFwcC5tYWluVGh1bWJuYWlsID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG5cclxuLy8g66mU7J24IOyeke2SiCDsnbTrr7jsp4Ag7JeF66Gc65Oc7ZW07IScIOqyveuhnCDsoIDsnqVcclxuICAgIHRoaXMucmVhZFBob3RvID0gZnVuY3Rpb24oKXtcclxuLy8g66mU7J24IOydtOuvuOyngCDsl4XroZzrk5wg7Jes67aAXHJcbiAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICBhcHAubWFpblBob3RvID0gZmFsc2U7XHJcbiAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICBmZC5hcHBlbmQoJ215ZmlsZScsIGFwcC5maWxlLnVwbG9hZCk7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9jcmVhdGVQaG90b0ltYWdlLycsIGZkLHtcclxuICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG4gICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkfVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIGFwcC5tYWluUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAubWFpbkltYWdlUGF0aCA9IGRhdGEuZGF0YS5pdGVtX3BhdGg7XHJcbiAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuLy8g7J6R7ZKIIOyEpOuqhSDsnbTrr7jsp4Ag7JeF66Gc65OcIOuQmOyXiOuKlOyngCDrs7Tsl6zso7zquLBcclxuICAgIHRoaXMuZXhwbGFpblBob3RvQ2hhbmdlZCA9IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwICYmIGZpbGVzWzBdLm5hbWUubWF0Y2goL1xcLihwbmd8anBlZ3xqcGcpJC8pKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1swXTtcclxuICAgICAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmV4cGxhaW5UaHVtYm5haWwuZGF0YVVybCA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICBhcHAuZXhwbGFpblRodW1ibmFpbCA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuXHJcbi8vIOyeke2SiCDshKTrqoUgIOydtOuvuOyngCDsl4XroZzrk5ztlbTshJwg6rK966GcIOyggOyepVxyXG4gICAgdGhpcy5yZWFkUGhvdG9FeHBsYWluID0gZnVuY3Rpb24oKXtcclxuLy8g7J6R7ZKIIOyEpOuqhSAg7JeF66Gc65OcIOyXrOu2gFxyXG4gICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgYXBwLmV4cGxhaW5QaG90byA9IGZhbHNlO1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgZmQuYXBwZW5kKCdteWZpbGUnLCBhcHAuZmlsZS51cGxvYWQpO1xyXG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvY3JlYXRlUGhvdG9FeHBsYWluLycsIGZkLHtcclxuICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG4gICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkfVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAkd2luZG93LmFsZXJ0KGRhdGEuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIGFwcC5leHBsYWluUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBhcHAuZXhwbGFpbkltYWdlUGF0aCA9IGRhdGEuZGF0YS5pdGVtX3BhdGg7XHJcbiAgICAgICAgICBhcHAuZmlsZSA9IHt9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5maWxlID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuXHJcbi8vIOyNuOuEpOydvCDsnbTrr7jsp4Ag66eM65Ok6riwXHJcbiAgICAgIGFwcC5teUltYWdlPScnO1xyXG4gICAgICBhcHAubXlDcm9wcGVkSW1hZ2U9Jyc7XHJcblxyXG4gICAgICB2YXIgaGFuZGxlRmlsZVNlbGVjdD1mdW5jdGlvbihldnQpIHtcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ0xPQUQnKTtcclxuICAgICAgICB2YXIgZmlsZT1ldnQuY3VycmVudFRhcmdldC5maWxlc1swXTtcclxuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigkc2NvcGUpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICBhcHAubXlJbWFnZT1ldnQudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgIH07XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWxlSW5wdXQnKSkub24oJ2NoYW5nZScsaGFuZGxlRmlsZVNlbGVjdCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlY29kZUJhc2U2NEltYWdlKGRhdGFTdHJpbmcpIHtcclxuICAgICAgICAgIHZhciBtYXRjaGVzID0gZGF0YVN0cmluZy5tYXRjaCgvXmRhdGE6KFtBLVphLXotK1xcL10rKTtiYXNlNjQsKC4rKSQvKTtcclxuXHJcbiAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggIT09IDMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCBzdHJpbmcnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxlID0ge1xyXG4gICAgICAgICAgICAgIHR5cGUgOiBtYXRjaGVzWzFdLFxyXG4gICAgICAgICAgICAgIGRhdGEgOiBtYXRjaGVzWzJdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbi8vIOyNuOuEpOydvCDsnbTrr7jsp4Ag66Gc7Lus65SU7Iqk7YGs7JeQIOyggOyepSDtm4Qg7KCA7J6lIOychOy5mCDqsIDsoLjsmKTquLBcclxuICAgICAgICB0aGlzLnJlYWRDcm9wSW1hZ2UgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgICAgYXBwLnRodW1ibmFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgIGlmKGRhdGEuYmFzZTY0VXJsID09PSAnJyB8fCBkYXRhLmJhc2U2NFVybCA9PT0gbnVsbCB8fCBkYXRhLmJhc2U2NFVybCA9PT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgIHZhciBibG9iID0gZGVjb2RlQmFzZTY0SW1hZ2UoJHNjb3BlLm15Q3JvcHBlZEltYWdlKTtcclxuICAgICAgICAgICAgICAgIEFkbWluLnJlYWRBcmlzdENyb3AoYmxvYikudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLnRodW1ibmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLnRodW1ibmFpbFBhdGggPSBkYXRhLmRhdGEuZmlsZVBhdGg7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG5cclxuLy8g7J6R6rCAIOyeke2SiCDsl4XroZzrk5xcclxuICAgICAgdGhpcy5jcmVhdGVQaG90byA9IGZ1bmN0aW9uKHVwbG9hZERhdGEpe1xyXG4gICAgICAgICRzY29wZS4kZW1pdCgnTE9BRCcpO1xyXG4gICAgICAgIGlmKHVwbG9hZERhdGEgPT09IHVuZGVmaW5lZCB8fCB1cGxvYWREYXRhID09PSBudWxsIHx8IHVwbG9hZERhdGEgPT09ICcnKXtcclxuICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+u5iOy5uOydhCDrqqjrkZAg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmKGFwcC5kYXRhMi5zZWxlY3RlZE9wdGlvbi5pZCA9PT0gJzAnKXtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+yDge2SiCDrtoTrpZjsnYQg7ISg7YOd7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmKHVwbG9hZERhdGEudGl0bGUgPT09IHVuZGVmaW5lZCB8fCB1cGxvYWREYXRhLnRpdGxlID09PSAgbnVsbCB8fCB1cGxvYWREYXRhLnRpdGxlPT09ICcnKXtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoJ+yDge2SiCDsoJzrqqnrpbwg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gICBlbHNlIGlmKGFwcC5tYWluSW1hZ2VQYXRoID09PSB1bmRlZmluZWQgfHwgYXBwLm1haW5JbWFnZVBhdGggPT09ICBudWxsIHx8IGFwcC5tYWluSW1hZ2VQYXRoID09PSAnJyl7XHJcbiAgICAgICAgICAvLyAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAvLyAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgLy8gICAkd2luZG93LmFsZXJ0KCfsg4Htkogg7J2066+47KeA66W8IOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIC8vIH1cclxuICAgICAgICAgIC8vIGVsc2UgaWYoYXBwLmV4cGxhaW5JbWFnZVBhdGggPT09IHVuZGVmaW5lZCB8fCBhcHAuZXhwbGFpbkltYWdlUGF0aCA9PT0gbnVsbCB8fCBhcHAuZXhwbGFpbkltYWdlUGF0aCA9PT0gJycpIHtcclxuICAgICAgICAgIC8vICAgJHNjb3BlLiRlbWl0KCdVTkxPQUQnKTtcclxuICAgICAgICAgIC8vICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAvLyAgICR3aW5kb3cuYWxlcnQoJ+yDge2SiCDshKTrqoUg7J2066+47KeA66W8IOyXheuhnOuTnO2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgICAgIC8vIH0gZWxzZSBpZihhcHAudGh1bWJuYWlsUGF0aCA9PT0gdW5kZWZpbmVkIHx8IGFwcC50aHVtYm5haWxQYXRoID09PSBudWxsIHx8IGFwcC50aHVtYm5haWxQYXRoID09PSAnJykge1xyXG4gICAgICAgICAgLy8gICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgLy8gICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIC8vICAgJHdpbmRvdy5hbGVydCgn7I2464Sk7J28IOydtOuvuOyngOulvCDsl4XroZzrk5ztlbTso7zshLjsmpQuJyk7XHJcbiAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBhcHAudXBsb2FkRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB1cGxvYWREYXRhLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogYXBwLmRhdGEyLnNlbGVjdGVkT3B0aW9uLmlkLFxyXG4gICAgICAgICAgICAgICAgLy8gdGh1bWJuYWlsOiBhcHAudGh1bWJuYWlsUGF0aCxcclxuICAgICAgICAgICAgICAgIC8vIGV4cGxhaW46IGFwcC5leHBsYWluSW1hZ2VQYXRoLFxyXG4gICAgICAgICAgICAgICAgLy8gaW1hZ2U6IGFwcC5tYWluSW1hZ2VQYXRoLFxyXG4gICAgICAgICAgICAgICAga2luZDogYXBwLnR5cGVfdGlueS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgcHJpY2U6IGFwcC50eXBlX3ByaWNlLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIEFkbWluLmNyZWF0ZUl0ZW0oYXBwLnVwbG9hZERhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnVU5MT0FEJyk7XHJcbiAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZGF0YS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ1VOTE9BRCcpO1xyXG4gICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChkYXRhLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnbWVudUNvbnRyb2xsZXJzJyxbJ21lbnVTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcignbWFpbk1lbnVDdHJsJywgZnVuY3Rpb24gKE1lbnUsICRzdGF0ZSkge1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG5cclxuICB0aGlzLmNyZWF0ZU1lbnUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgaWYoZGF0YSA9PT0gdW5kZWZpbmVkKXtcclxuICAgICAgYXBwLmVycm9yTXNnID0gJ+yYrOuwlOuluCDsoJXrs7Trpbwg7J6F66Cl7ZW07KO87IS47JqULic7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgbWVudURhdGEgPSB7XHJcbiAgICAgICAgICBuYW1lOiBkYXRhLm5hbWVcclxuICAgICAgfTtcclxuICAgICAgTWVudS5jcmVhdGVNZW51KG1lbnVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgdmFyIHVwZGF0ZURhdGEgPSB7XHJcbiAgICAgIGNhdGVnb3J5X2lkOiBkYXRhLmNhdGVnb3J5X2lkLFxyXG4gICAgICBuYW1lOiBkYXRhLm5hbWVcclxuICAgIH07XHJcbiAgICAgIE1lbnUudXBkYXRlTWVudSh1cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgdmFyIGRlbGV0ZURhdGEgPSBkYXRhLmNhdGVnb3J5X2lkO1xyXG4gICAgTWVudS5kZWxldGVNZW51KGRlbGV0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pXHJcblxyXG4uY29udHJvbGxlcignc3ViTWVudUN0cmwnLCBmdW5jdGlvbiAoTWVudSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRodHRwKSB7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgdmFyIGNhdGVnb3J5X2lkID0gJHN0YXRlUGFyYW1zLmNhdGVnb3J5X2lkO1xyXG5cclxuICAkaHR0cC5nZXQoJy9hcGkvY2F0ZWdvcnkvJytjYXRlZ29yeV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgYXBwLnN1Yk1lbnVEYXRhcyA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCd0eXBlQ29udHJvbGxlcnMnLCBbJ2FkbWluU2VydmljZXMnLCAnbWVudVNlcnZpY2VzJywgJ29yZGVyU2VydmljZXMnXSlcclxuLmNvbnRyb2xsZXIoJ3VwZGF0ZUl0ZW1UeXBlQ3RybCcsIGZ1bmN0aW9uKCRzdGF0ZVBhcmFtcywgTWVudSwgQWRtaW4sICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgdmFyIGl0ZW1faWQgPSAkc3RhdGVQYXJhbXMuaXRlbV9pZDtcclxuICBhcHAuZGF0YSA9IHtcclxuICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgXSxcclxuICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICB9O1xyXG5cclxuXHJcblxyXG4gICBBZG1pbi5yZWFkVXBkYXRlSXRlbVR5cGUoaXRlbV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgTWVudS5yZWFkTWFpbk1lbnUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0ubmFtZSxcclxuICAgICAgICAgICAgICAgICBpZDogdHlwZVtpXS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICBhcHAudXBkYXRhRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgYXBwLmRhdGEuc2VsZWN0ZWRPcHRpb24gPSB7XHJcbiAgICAgICAgICAgICBpZCA6IGFwcC51cGRhdGFEYXRhLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgdmFyIHNwbGl0T3B0aW9uRGF0YXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICBraW5kOiBhcHAudXBkYXRhRGF0YS5raW5kLnNwbGl0KCcsJyksXHJcbiAgICAgICAgICAgICAgICAgICBwcmljZTogYXBwLnVwZGF0YURhdGEucHJpY2Uuc3BsaXQoJywnKVxyXG4gICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICBhcHAub3B0aW9uRGF0YXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgZm9yKGk9MDsgaSA8IHNwbGl0T3B0aW9uRGF0YXMua2luZC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICBhcHAub3B0aW9uRGF0YXNbaV0gPSB7XHJcbiAgICAgICAgICAgICAgIGtpbmQ6IHNwbGl0T3B0aW9uRGF0YXMua2luZFtpXSxcclxuICAgICAgICAgICAgICAgcHJpY2U6ICBzcGxpdE9wdGlvbkRhdGFzLnByaWNlW2ldLFxyXG4gICAgICAgICAgICAgfTtcclxuICAgICAgICAgICB9XHJcblxyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgfVxyXG4gICB9KTtcclxuXHJcbiAgIHRoaXMudXBkYXRlVHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGFwcC51cGRhdGVEYXRhID0gZGF0YTtcclxuICAgICBhcHAudXBkYXRlRGF0YS5jYXRlZ29yeV9pZCA9IGFwcC5kYXRhLnNlbGVjdGVkT3B0aW9uLmlkO1xyXG4gICAgIEFkbWluLnVwZGF0ZVVwZGF0ZVR5cGUoYXBwLnVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4gICB0aGlzLnVwZGF0ZWl0ZW1UeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgdmFyIGtpbmRBcnJheSA9IFtdO1xyXG4gICAgIHZhciBwcmljZUFycmF5ID0gW107XHJcbiAgICAgZm9yKGk9MDtpPGFwcC5vcHRpb25EYXRhcy5sZW5ndGg7aSsrKXtcclxuICAgICAgIGtpbmRBcnJheS5wdXNoKGFwcC5vcHRpb25EYXRhc1tpXS5raW5kKTtcclxuICAgICAgIHByaWNlQXJyYXkucHVzaChhcHAub3B0aW9uRGF0YXNbaV0ucHJpY2UpO1xyXG4gICAgIH1cclxuICAgICB2YXIgdXBkYXRlRGF0YSA9IHtcclxuICAgICAgIGl0ZW1faWQ6IGRhdGEuaXRlbV9pZCxcclxuICAgICAgIGl0ZW1fbmFtZTogZGF0YS5pdGVtX25hbWUsXHJcbiAgICAgICBwcmljZTogcHJpY2VBcnJheS50b1N0cmluZygpLFxyXG4gICAgICAga2luZDoga2luZEFycmF5LnRvU3RyaW5nKClcclxuICAgICB9O1xyXG5cclxuICAgICBBZG1pbi51cGRhdGVJdGVtVHlwZSh1cGRhdGVEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfTtcclxuXHJcblxyXG5cclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdyZWFkSXRlbVR5cGVDdHJsJywgZnVuY3Rpb24oQWRtaW4sICRzdGF0ZSwgJHdpbmRvdywgTWVudSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgICBhcHAuZGF0YSA9IHtcclxuICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICB7aWQ6ICcwJywgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30sXHJcbiAgICAgXSxcclxuICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXHJcbiAgICAgfTtcclxuXHJcblxyXG4gICAgIHRoaXMuY29weUl0ZW1UeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcblxyXG4gICAgICAgdmFyIGl0ZW1EYXRhID0ge1xyXG4gICAgICAgICB0eXBlOiBkYXRhLml0ZW1fdHlwZV9pZCxcclxuICAgICAgICAgdGl0bGU6IGRhdGEuaXRlbV9uYW1lLFxyXG4gICAgICAgICBraW5kOiBkYXRhLmtpbmQudG9TdHJpbmcoKSxcclxuICAgICAgICAgcHJpY2U6IGRhdGEucHJpY2UudG9TdHJpbmcoKVxyXG5cclxuICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgQWRtaW4uY3JlYXRlSXRlbShpdGVtRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfTtcclxuXHJcbiAgIHRoaXMuZGVsZXRlVHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgIHZhciBpdGVtX2lkID0gZGF0YS5pdGVtX2lkO1xyXG4gICAgIEFkbWluLmRlbGV0ZUl0ZW0oaXRlbV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4vLyDsg4Htkogg67aE66WY7ZGcXHJcbiAgQWRtaW4ucmVhZEl0ZW1UeXBlKCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgTWVudS5yZWFkTWFpbk1lbnUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgICAgIG5hbWU6IHR5cGVbaV0ubmFtZSxcclxuICAgICAgICAgICAgICBpZDogdHlwZVtpXS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBhcHAudHlwZURhdGFzID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgdmFyIGtpbmREYXRhcyA9IFtdO1xyXG5cclxuICAgICAgZm9yKHZhciBpPTA7IGk8ZGF0YS5kYXRhLnJlc3VsdC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICBraW5kRGF0YXNbaV0gPSB7XHJcbiAgICAgICAgICAgICAga2luZDogYXBwLnR5cGVEYXRhc1tpXS5raW5kLnNwbGl0KCcsJyksXHJcbiAgICAgICAgICAgICAgcHJpY2U6IGFwcC50eXBlRGF0YXNbaV0ucHJpY2Uuc3BsaXQoJywnKVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGFwcC50eXBlRGF0YXNbaV0ua2luZCA9IGtpbmREYXRhc1tpXS5raW5kO1xyXG4gICAgICAgICAgYXBwLnR5cGVEYXRhc1tpXS5wcmljZSA9IGtpbmREYXRhc1tpXS5wcmljZTtcclxuICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KVxyXG5cclxuXHJcbi8vIOyDge2SiCDrtoTrpZjtkZxcclxuLmNvbnRyb2xsZXIoJ3VwZGF0ZVR5cGVDdHJsJywgZnVuY3Rpb24oJHN0YXRlUGFyYW1zLCBNZW51LCBBZG1pbiwgJHN0YXRlKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICB2YXIgaXRlbV90eXBlID0gJHN0YXRlUGFyYW1zLml0ZW1fdHlwZTtcclxuICBhcHAuZGF0YSA9IHtcclxuICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgXSxcclxuICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICB9O1xyXG5cclxuICAgQWRtaW4ucmVhZFVwZGF0ZVR5cGUoaXRlbV90eXBlKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgIGlkOiB0eXBlW2ldLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgYXBwLnVwZGF0YURhdGEgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgIGFwcC5kYXRhLnNlbGVjdGVkT3B0aW9uID0ge1xyXG4gICAgICAgICAgICAgaWQgOiBhcHAudXBkYXRhRGF0YS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICAgIH07XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuXHJcbiAgICAgICB9XHJcbiAgIH0pO1xyXG5cclxuICAgdGhpcy51cGRhdGVUeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgYXBwLnVwZGF0ZURhdGEgPSBkYXRhO1xyXG4gICAgIGFwcC51cGRhdGVEYXRhLmNhdGVnb3J5X2lkID0gYXBwLmRhdGEuc2VsZWN0ZWRPcHRpb24uaWQ7XHJcbiAgICAgQWRtaW4udXBkYXRlVXBkYXRlVHlwZShhcHAudXBkYXRlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfTtcclxufSlcclxuXHJcbi8vIOyDge2SiCDrtoTrpZjtkZxcclxuLmNvbnRyb2xsZXIoJ3JlYWRUeXBlQ3RybCcsIGZ1bmN0aW9uKEFkbWluLCAkc3RhdGUsICR3aW5kb3csIE1lbnUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gICAgYXBwLmRhdGEgPSB7XHJcbiAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgICAge2lkOiAnMCcsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICAgIF0sXHJcbiAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICAgIH07XHJcblxyXG4gICAgdGhpcy5jb3B5VHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICB2YXIgdHlwZURhdGEgPSB7XHJcbiAgICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnlfaWQsXHJcbiAgICAgICAgdHlwZV9kZXNjcmlwdGlvbjogZGF0YS50eXBlX2Rlc2NyaXB0aW9uLFxyXG4gICAgICAgIHR5cGVfY29kZTogZGF0YS50eXBlX2NvZGVcclxuICAgICAgfTtcclxuICAgICAgQWRtaW4uY3JlYXRlVHlwZSh0eXBlRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgIHRoaXMuZGVsZXRlVHlwZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgIHZhciBpdGVtX3R5cGVfaWQgPSBkYXRhLml0ZW1fdHlwZTtcclxuICAgICBBZG1pbi5kZWxldGVUeXBlKGl0ZW1fdHlwZV9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4vLyDsg4Htkogg67aE66WY7ZGcXHJcbiAgQWRtaW4ucmVhZFR5cGUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBNZW51LnJlYWRNYWluTWVudSgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG4gICAgICAgICAgZm9yKGk9MDsgaTx0eXBlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBhcHAuZGF0YS5hdmFpbGFibGVPcHRpb25zW2krMV0gPSB7XHJcbiAgICAgICAgICAgICAgbmFtZTogdHlwZVtpXS5uYW1lLFxyXG4gICAgICAgICAgICAgIGlkOiB0eXBlW2ldLmNhdGVnb3J5X2lkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGFwcC50eXBlRGF0YXMgPSBkYXRhLmRhdGEucmVzdWx0O1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KVxyXG5cclxuLy8g7IOB7ZKIIOu2hOulmO2RnFxyXG4uY29udHJvbGxlcignY3JlYXRlVHlwZUN0cmwnLCBmdW5jdGlvbihBZG1pbiwgJHN0YXRlLCBNZW51LCAkd2luZG93KXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICBhcHAuZGF0YSA9IHtcclxuICAgYXZhaWxhYmxlT3B0aW9uczogW1xyXG4gICAgIHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgXSxcclxuICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzAnLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICB9O1xyXG5cclxuICAgTWVudS5yZWFkTWFpbk1lbnUoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgIHZhciB0eXBlID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgIGZvcihpPTA7IGk8dHlwZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgYXBwLmRhdGEuYXZhaWxhYmxlT3B0aW9uc1tpKzFdID0ge1xyXG4gICAgICAgICAgIG5hbWU6IHR5cGVbaV0ubmFtZSxcclxuICAgICAgICAgICBpZDogdHlwZVtpXS5jYXRlZ29yeV9pZFxyXG4gICAgICAgICB9O1xyXG4gICAgICAgfVxyXG4gICAgIH0gZWxzZSB7XHJcbiAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICB9XHJcbiAgIH0pO1xyXG5cclxuXHJcbiAgdGhpcy5jcmVhdGVUeXBlID0gZnVuY3Rpb24oZGF0YSl7XHJcbiAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgIGFwcC50eXBlRGF0YSA9IHtcclxuICAgICAgY2F0ZWdvcnk6IGFwcC5kYXRhLnNlbGVjdGVkT3B0aW9uLmlkLFxyXG4gICAgICB0eXBlX2Rlc2NyaXB0aW9uOiBkYXRhLnR5cGVfZGVzY3JpcHRpb24sXHJcbiAgICAgIHR5cGVfY29kZTogZGF0YS50eXBlX2NvZGVcclxuICAgIH07XHJcblxyXG4gICAgQWRtaW4uY3JlYXRlVHlwZShhcHAudHlwZURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBhcHAuc3VjY2VzcyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGFwcC5raW5kTGlzdCA9IFtdO1xyXG4gIGFwcC50eXBlX3RpbnkgPSBbXTtcclxuICBhcHAudHlwZV9wcmljZSA9IFtdO1xyXG5cclxuICB0aGlzLmFkZExpbmUgPSBmdW5jdGlvbihraW5kRGF0YSl7XHJcbiAgICBpZigha2luZERhdGEpe1xyXG4gICAgICAkd2luZG93LmFsZXJ0KCfsoJXtmZXtlZwg6rCS7J2EIOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmKGtpbmREYXRhLmtpbmRWYWx1ZSA9PT0gbnVsbCB8fCBraW5kRGF0YS5raW5kVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBraW5kRGF0YS5raW5kVmFsdWUgPT09ICcnKVxyXG4gICAgICB7XHJcbiAgICAgICAgJHdpbmRvdy5hbGVydCgn7Ji17IWY66qF7J2EIOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgfSBlbHNlIGlmKGtpbmREYXRhLmtpbmRQcmljZSA9PT0gbnVsbCB8fCBraW5kRGF0YS5raW5kUHJpY2UgPT09IHVuZGVmaW5lZCB8fCBraW5kRGF0YS5raW5kUHJpY2UgPT09ICcnKXtcclxuICAgICAgICAkd2luZG93LmFsZXJ0KCfsmLXshZgg6rCA6rKp7J2EIOyeheugpe2VtOyjvOyEuOyalC4nKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAua2luZExpc3QucHVzaChcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAga2luZDoga2luZERhdGEua2luZFZhbHVlLFxyXG4gICAgICAgICAgICBwcmljZToga2luZERhdGEua2luZFByaWNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBhcHAudHlwZV90aW55LnB1c2goa2luZERhdGEua2luZFZhbHVlKTtcclxuICAgICAgICBhcHAudHlwZV9wcmljZS5wdXNoKGtpbmREYXRhLmtpbmRQcmljZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgfTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdtYWluQ29udHJvbGxlcnMnLCBbJ2F1dGhTZXJ2aWNlcycsICd1c2VyU2VydmljZXMnXSlcclxuICAgIC5jb250cm9sbGVyKCdtYWluQ3RybCcsIGZ1bmN0aW9uIChBdXRoLCAkdGltZW91dCwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICRzY29wZSwgJHdpbmRvdywgJGludGVydmFsLCBVc2VyLCBBdXRoVG9rZW4pIHtcclxuICAgICAgICB2YXIgYXBwID0gdGhpcztcclxuXHJcblxyXG4gICAgICAgIC8vIEludGVybmV0IEV4cGxvcmVyIOuyhOyghCDssrTtgaxcclxuICAgICAgICB2YXIgSUVWZXJzaW9uQ2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgd29yZDtcclxuICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBcIk4vQVwiO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IG5hdmlnYXRvci5hcHBOYW1lO1xyXG5cclxuICAgICAgICAgICAgLy8gSUUgb2xkIHZlcnNpb24gKCBJRSAxMCBvciBMb3dlciApXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09IFwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCIpIHdvcmQgPSBcIm1zaWUgXCI7XHJcblxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIElFIDExXHJcbiAgICAgICAgICAgICAgICBpZiAoYWdlbnQuc2VhcmNoKFwidHJpZGVudFwiKSA+IC0xKSB3b3JkID0gXCJ0cmlkZW50Ly4qcnY6XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSUUgMTIgICggTWljcm9zb2Z0IEVkZ2UgKVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWdlbnQuc2VhcmNoKFwiZWRnZS9cIikgPiAtMSkgd29yZCA9IFwiZWRnZS9cIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAod29yZCArIFwiKFswLTldezEsfSkoXFxcXC57MCx9WzAtOV17MCwxfSlcIik7XHJcbiAgICAgICAgICAgIGlmIChyZWcuZXhlYyhhZ2VudCkgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSBSZWdFeHAuJDEgKyBSZWdFeHAuJDI7XHJcbiAgICAgICAgICAgIC8vcmV0dXJuIHZlcnNpb247XHJcblxyXG4gICAgICAgICAgICBpZiAodmVyc2lvbiA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybShcIuyduO2EsOuEtyDsnbXsiqTtlIzroZzrn6wgOSDrsoTsoIQg7J207IOBIOuYkOuKlCDtgazroawg67iM65287Jqw7KCA7JeQIOy1nOygge2ZlOuQmOyWtCDsnojsirXri4jri6QuIFxcbuuLpOyatOuhnOuTnO2bhCDsgqzsmqntlZjsi5zqsqDsirXri4jquYw/XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvLmtyL2Nocm9tZS9icm93c2VyL2Rlc2t0b3AvaW5kZXguaHRtbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBJRVZlcnNpb25DaGVjaygpO1xyXG5cclxuICAgICAgICBhcHAubG9hZG1lID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLiRvbignTE9BRCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKCdVTkxPQUQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjaGVja1Nlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrU2Vzc2lvbigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKEF1dGguaXNMb2dnZWRJbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmlzTG9nZ2VkSW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIEF1dGguZ2V0VXNlcigpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnVzZXIgPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVc2VyLmdldFBlcm1pc3Npb24oKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLnBlcm1pc3Npb24gPT09ICdhZG1pbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmF1dGhvcml6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAubG9hZG1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZGF0YS5wZXJtaXNzaW9uID09PSAnYXJ0aXN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAucGVybWlzc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5wZXJtaXNzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5hdXRob3JpemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnBlcm1pc3Npb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAuYXV0aG9yaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLnVzZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuaXNMb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5sb2FkbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBjaGVja1Nlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChBdXRoLmlzTG9nZ2VkSW4oKSkge1xyXG4gICAgICAgICAgICAgICAgYXBwLmNoZWNrU2Vzc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGFyc2VKd3QgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYXNlNjRVcmwgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKCctJywgJysnKS5yZXBsYWNlKCdfJywgJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKCR3aW5kb3cuYXRvYihiYXNlNjQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGlyZVRpbWUgPSBzZWxmLnBhcnNlSnd0KHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVTdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZUNoZWNrID0gZXhwaXJlVGltZS5leHAgLSB0aW1lU3RhbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZUNoZWNrIDw9IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dNb2RhbCgnZXhwaXJlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNoZWNrU2Vzc2lvbigpO1xyXG5cclxuXHJcbiAgICAgICAgYXBwLnJlbmV3U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXBwLmNob2ljZU1hZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBVc2VyLnJlbmV3U2Vzc2lvbihhcHAudXNlci51c2VybmFtZSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQXV0aFRva2VuLnNldFRva2VuKGRhdGEuZGF0YS50b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tTZXNzaW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZU1vZGFsKCdleHBpcmVkJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5Nb2RhbEJvZHkgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICBoaWRlTW9kYWwoJ2V4cGlyZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYXBwLmVuZFNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGFwcC5jaG9pY2VNYWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaGlkZU1vZGFsKCdleHBpcmVkJyk7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNob3dNb2RhbCgnbG9nb3V0Jyk7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZhciBzaG93TW9kYWwgPSBmdW5jdGlvbiAob3B0aW9uKSB7XHJcbiAgICAgICAgICAgIGFwcC5jaG9pY2VNYWRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFwcC5tb2RhbEhlYWRlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgYXBwLm1vZGFsQm9keSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgYXBwLmhpZGVCdXR0b24gPSBmYWxzZTtcclxuLy8gY2hlY2sgdG9rZW4gZXhwaXJlZFxyXG4gICAgICAgICAgICBpZiAob3B0aW9uID09PSAnZXhwaXJlZCcpIHtcclxuICAgICAgICAgICAgICAgIGFwcC5tb2RhbEhlYWRlciA9ICdUaW1lb3V0IFdhcm5pbmcnO1xyXG4gICAgICAgICAgICAgICAgYXBwLm1vZGFsQm9keSA9ICdZb3VyIHNlc3Npb24gd2lsbCBleHBpcmVkIGluIDUgbWludXRlcy4gV291bGQgeW91IGxpa2UgdG8gcmVuZXcgeW91ciBzZXNzaW9uPyc7XHJcbiAgICAgICAgICAgICAgICAkKFwiI215TW9kYWxcIikubW9kYWwoe2JhY2tkcm9wOiBcInN0YXRpY1wifSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9uID09PSAnbG9nb3V0Jykge1xyXG4vLyBsb2dvdXRcclxuICAgICAgICAgICAgICAgIGFwcC5oaWRlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGFwcC5tb2RhbEhlYWRlciA9ICfroZzqt7jslYTsm4MnO1xyXG4gICAgICAgICAgICAgICAgJChcIiNteU1vZGFsXCIpLm1vZGFsKHtiYWNrZHJvcDogXCJzdGF0aWNcIn0pO1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEF1dGgubG9nb3V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmlzTG9nZ2VkSW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuYXV0aG9yaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5wZXJtaXNzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZU1vZGFsKCdsb2dvdXQnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb24gPT09ICdsb2dpbicpIHtcclxuLy8gTG9naW5cclxuICAgICAgICAgICAgICAgICQoXCIjbG9naW5cIikubW9kYWwoe2JhY2tkcm9wOiBcInN0YXRpY1wifSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhcHAuY2hvaWNlTWFkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpZGVNb2RhbCgnbG9nb3V0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDIwMDApO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaGlkZU1vZGFsID0gZnVuY3Rpb24gKG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbiA9PT0gJ2V4cGlyZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI215TW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb24gPT09ICdsb2dvdXQnKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI215TW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb24gPT09ICdsb2dpbicpIHtcclxuICAgICAgICAgICAgICAgICQoXCIjbG9naW5cIikubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuLy8g66Gc6re47J24XHJcbiAgICAgICAgdGhpcy5kb0xvZ2luID0gZnVuY3Rpb24gKGxvZ2luRGF0YSwgdmFsaWQpIHtcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFwcC5leHBpcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIEF1dGgubG9naW4oYXBwLmxvZ2luRGF0YSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAubG9naW5EYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5pc0xvZ2dlZEluID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrU2Vzc2lvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YS5leHBpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwaXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTsgLy8gSWYgZXJyb3Igb2NjdXJzLCByZW1vdmUgZGlzYWJsZSBsb2NrIGZyb20gZm9ybVxyXG4gICAgICAgICAgICAgICAgYXBwLmxvYWRpbmcgPSBmYWxzZTsgLy8gU3RvcCBib290c3RyYXAgbG9hZGluZyBpY29uXHJcbiAgICAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSAn7Jis67CU66W4IOygleuztOulvCDsnoXroKXtlbTso7zshLjsmpQuJzsgLy8gRGlzcGxheSBlcnJvciBpZiB2YWxpZCByZXR1cm5zIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGFwcC5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNob3dNb2RhbCgnbG9nb3V0Jyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYXBwLnJlc2VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaGlkZU1vZGFsKCdsb2dpbicpO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3Jlc2VuZCcpO1xyXG4gICAgICAgICAgICAgICAgYXBwLmV4cGlyZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhcHAucmVzZXR1c2VybmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaGlkZU1vZGFsKCdsb2dpbicpO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3Jlc2V0dXNlcm5hbWUnKTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhcHAucmVzZXRwYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaGlkZU1vZGFsKCdsb2dpbicpO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3Jlc2V0cGFzc3dvcmQnKTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ29yZGVyQ29udHJvbGxlcnMnLFsnb3JkZXJTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcigncmVhZE9yZGVyQ3RybCcsIGZ1bmN0aW9uICgkc3RhdGVQYXJhbXMsICRzdGF0ZSwgJHdpbmRvdywgT3JkZXIsICRzY29wZSkge1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHZhciB1c2VyX2lkID0gJHNjb3BlLm1haW4udXNlci51c2VyX2lkO1xyXG5cclxuICBhcHAuZ2V0SXRlbUZhaWwgPSBmYWxzZTtcclxuXHJcbiAgYXBwLmNhc2hSZWNlaXB0ID0gdHJ1ZTtcclxuICBpZihhcHAuY2FzaFJlY2VpcHQpe1xyXG4gICAgYXBwLmdldENhc2hSZWNlaXB0ID0gdHJ1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXBwLmdldENhc2hSZWNlaXB0ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuXHJcbiAgdGhpcy5yZWFkQWRkcmVzcyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAvL2xvYWTtlajsiJjrpbwg7J207Jqp7ZWY7JesIGNvcmXsiqTtgazrpr3tirjsnZgg66Gc65Sp7J20IOyZhOujjOuQnCDtm4QsIOyasO2OuOuyiO2YuCDshJzruYTsiqTrpbwg7Iuk7ZaJ7ZWp64uI64ukLlxyXG4gICAgZGF1bS5wb3N0Y29kZS5sb2FkKGZ1bmN0aW9uKCl7XHJcbiAgICAgIGFwcC5hZGRyZXNzRGV0YWlsID0gJyc7XHJcbiAgICAgICAgbmV3IGRhdW0uUG9zdGNvZGUoe1xyXG4gICAgICAgICAgICBvbmNvbXBsZXRlOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgYXBwLmRlbGlEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgc2lndW5ndV9jb2RlOiBkYXRhLnNpZ3VuZ3VDb2RlLFxyXG4gICAgICAgICAgICAgICAgamlidW5fYWRkcmVzczogZGF0YS5qaWJ1bkFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICByb2FkX2FkZHJlc3M6IGRhdGEucm9hZEFkZHJlc3NcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkub3BlbigpO1xyXG4gICAgfSk7XHJcblxyXG4gIH07XHJcblxyXG4gIE9yZGVyLnJlYWRPcmRlckFuZERlbGkoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbi8vIOuTseuhneuQnCDrsLDshqHsp4Ag7KCV67O06rCAIOyXhuydhCDrlYxcclxuICAgICAgaWYoZGF0YS5kYXRhLnJlc3VsdC5sZW5ndGg9PT0wKXtcclxuICAgICAgICBhcHAuZGVsaXZlcnkgPSBmYWxzZTtcclxuICAgICAgICBPcmRlci5yZWFkT3JkZXIodXNlcl9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIHZhciBpdGVtUHJpY2UgPSBbXTtcclxuICAgICAgICAgIGFwcC5hbGxJdGVtUHJpY2UgPSAwO1xyXG4gICAgICAgICAgYXBwLm9yZGVyRGF0YSA9IGRhdGEuZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICBmb3IoaT0wOyBpPGFwcC5vcmRlckRhdGEubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBpdGVtUHJpY2VbaV0gPSBhcHAub3JkZXJEYXRhW2ldLnByaWNlICogYXBwLm9yZGVyRGF0YVtpXS5hbW91bnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBmb3IoaT0wO2k8aXRlbVByaWNlLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBhcHAuYWxsSXRlbVByaWNlID0gYXBwLmFsbEl0ZW1QcmljZSArIGl0ZW1QcmljZVtpXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4vLyDrk7HroZ3rkJwg67Cw7Iah7KeAIOygleuztOqwgCDsnojsnYQg65WMXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICB2YXIgaXRlbVByaWNlID0gW107XHJcbiAgICAgIGFwcC5kZWxpdmVyeSA9IHRydWU7XHJcbiAgICAgIGFwcC5hbGxJdGVtUHJpY2UgPSAwO1xyXG4gICAgICBhcHAub3JkZXJEYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgZm9yKGk9MDsgaTxhcHAub3JkZXJEYXRhLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBpdGVtUHJpY2VbaV0gPSBhcHAub3JkZXJEYXRhW2ldLnByaWNlICogYXBwLm9yZGVyRGF0YVtpXS5hbW91bnQ7XHJcbiAgICAgIH1cclxuICAgICAgZm9yKGk9MDtpPGl0ZW1QcmljZS5sZW5ndGg7aSsrKXtcclxuICAgICAgICBhcHAuYWxsSXRlbVByaWNlID0gYXBwLmFsbEl0ZW1QcmljZSArIGl0ZW1QcmljZVtpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB0aGlzLmNvbmZpcm1PcmRlciA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4vLyDrk7HroZ3rkJwg67Cw7Iah7KeA6rCAIOyeiOydhCDrlYwgcHV0XHJcbiAgICB2YXIgZGVsaURhdGEgPSAnJztcclxuICAgIHZhciByZWNlaXB0RGF0YSA9ICcnO1xyXG4gICAgaWYoYXBwLmRlbGl2ZXJ5KXtcclxuLy8gICAg67OA6rK97IKs7ZWtIOyXhuydjFxyXG4gICAgICBpZihkYXRhLmRhbGlEYXRhID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfrs4Dqsr3sgqztla0g7JeG7J2MJyk7XHJcbiAgICAgIH1cclxuLy8g67OA6rK97IKs7ZWtIOyeiOydjFxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBkZWxpRGF0YSA9IGRhdGEuZGFsaURhdGE7XHJcbiAgICAgICAgLy8gZGVsaURhdGEudXNlcl9pZCA9IHVzZXJfaWQ7XHJcbiAgICAgICAgT3JkZXIudXBkYXRlRGVsaXZlcnkoZGVsaURhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4vLyDrk7HroZ3rkJwg67Cw7Iah7KeA6rCAIOyXhuydhCDrlYwgcG9zdFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGVsaURhdGEgPSBkYXRhLmRhbGlEYXRhO1xyXG4gICAgICByZWNlaXB0RGF0YSA9IGRhdGEucmVjZWlwdERhdGE7XHJcbiAgICAgIE9yZGVyLmNyZWF0ZURlbGl2ZXJ5KGRlbGlEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmRlbGV0ZSA9IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICB2YXIgaXRlbV9pZCA9IGRhdGEuaXRlbV9pZDtcclxuICAgIE9yZGVyLmRlbGV0ZU9yZGVyKGl0ZW1faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICRzdGF0ZS5yZWxvYWQoKTtcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIH0pXHJcblxyXG4uY29udHJvbGxlcignYmFza2V0Q3RybCcsIGZ1bmN0aW9uIChPcmRlciwgJHdpbmRvdywgJHN0YXRlKSB7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgYXBwLmFtb3VudCA9IDE7XHJcbiAgYXBwLmRhdGEgPSB7XHJcbiAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcclxuICAgICB7aWQ6IDAsIG5hbWU6ICfsubTthYzqs6Drpqzrpbwg7ISg7YOd7ZW07KO87IS47JqULid9LFxyXG4gICBdLFxyXG4gICBzZWxlY3RlZE9wdGlvbjoge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxyXG4gICB9O1xyXG5cclxuICAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbihkYXRhKXtcclxuICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICB2YXIgYmFza2V0X2lkID0gZGF0YS5iYXNrZXRfaWQ7XHJcbiAgICAgT3JkZXIuZGVsZXRlQmFza2V0KGJhc2tldF9pZCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG5cclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgfVxyXG4gICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICB0aGlzLm1ha2VCYXNrZXQgPSBmdW5jdGlvbigpe1xyXG4gIH07XHJcblxyXG4gIE9yZGVyLnJlYWRCYXNrZXQoKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgIGFwcC5iYXNrZXREYXRhID0gZGF0YS5kYXRhLnJlc3VsdDtcclxuICAgICAgdmFyIGk7XHJcbiAgICAgIHZhciBraW5kID0gW107XHJcbiAgICAgIHZhciB0ZW1wID0gW107XHJcbiAgICAgIHZhciBzZWxlY3REYXRhO1xyXG4gICAgICBmb3IoaT0wOyBpIDwgYXBwLmJhc2tldERhdGEubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAga2luZFtpXSA9IGFwcC5iYXNrZXREYXRhW2ldLmtpbmQuc3BsaXQoJywnKTtcclxuICAgICAgICAgIHRlbXBbaV0gPSBhcHAuYmFza2V0RGF0YVtpXS5wcmljZS5zcGxpdCgnLCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IoaT0wOyBpPGtpbmQubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGFwcC5kYXRhW2ldID0ge1xyXG4gICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXHJcbiAgICAgICAgICAge2lkOiAwLCBuYW1lOiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtOyjvOyEuOyalC4nfSxcclxuICAgICAgICAgXSxcclxuICAgICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogMCwgbmFtZTogJ+y5tO2FjOqzoOumrOulvCDshKDtg53tlbTso7zshLjsmpQuJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcclxuICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm9yKGo9MDtqPGtpbmRbaV0ubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICBhcHAuZGF0YVtpXS5hdmFpbGFibGVPcHRpb25zW2orMV0gPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGtpbmRbaV1bal0sXHJcbiAgICAgICAgICAgIGlkOiBOdW1iZXIodGVtcFtpXVtqXSlcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdlbWFpbENvbnRyb2xsZXJzJyxbJ3VzZXJTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcignZW1haWxDdHJsJywgZnVuY3Rpb24oJHN0YXRlUGFyYW1zLCBVc2VyLCAkdGltZW91dCwgJHN0YXRlKXtcclxuICB2YXIgYXBwID0gdGhpcztcclxuICBVc2VyLmFjdGl2ZUFjY291bnQoJHN0YXRlUGFyYW1zLnRva2VuKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgYXBwLnN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtjpjsnbTsp4DroZwg7J2064+Z7ZWp64uI64ukLic7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgfSwyMDAwKTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2UgKyAnLi4u66mU7J24IO2OmOydtOyngOuhnCDsnbTrj5ntlanri4jri6QuJztcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xyXG4gICAgICB9LDIwMDApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3Jlc2VuZEN0cmwnLCBmdW5jdGlvbihVc2VyLCAkdGltZW91dCwgJHN0YXRlKXtcclxuICBhcHAgPSB0aGlzO1xyXG4gIHRoaXMuY2hlY2tDcmVkZW50aWFscyA9IGZ1bmN0aW9uKGxvZ2luRGF0YSl7XHJcbiAgICBhcHAuc3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIFVzZXIuY2hlY2tDcmVkZW50aWFscyh0aGlzLmxvZ2luRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgIFVzZXIucmVzZW5kTGluayhhcHAubG9naW5EYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgaWYoZGF0YS5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtjpjsnbTsp4DroZwg7J2064+Z7ZWp64uI64ukLic7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgICAgfSwyMDAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ3VzZXJuYW1lQ3RybCcsIGZ1bmN0aW9uKFVzZXIsICR0aW1lb3V0LCAkc3RhdGUpe1xyXG4gIHZhciBhcHAgPSB0aGlzO1xyXG4gIHRoaXMuc2VuZFVzZXJuYW1lID0gZnVuY3Rpb24odXNlckRhdGEsIHZhbGlkKXtcclxuICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlO1xyXG4gICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGlmKHZhbGlkKXtcclxuICAgICAgVXNlci5zZW5kVXNlcm5hbWUoYXBwLnVzZXJEYXRhLmVtYWlsKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2UgKyAnLi4u66mU7J24IO2OmOydtOyngOuhnCDsnbTrj5ntlanri4jri6QuJztcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYXBwLmVycm9yTXNnID0gJ+yYrOuwlOuluCDsnbTrqZTsnbwg7KO87IaM6rCAIOyVhOuLmeuLiOuLpC4nO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pXHJcblxyXG4uY29udHJvbGxlcigncGFzc3dvcmRDdHJsJywgZnVuY3Rpb24oVXNlciwgJHRpbWVvdXQsICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcbiAgYXBwLnNlbmRQYXNzd29yZCA9IGZ1bmN0aW9uKHJlc2V0RGF0YSwgdmFsaWQpe1xyXG4gICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgaWYodmFsaWQpe1xyXG4gICAgICBVc2VyLnNlbmRQYXNzd29yZChhcHAucmVzZXREYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2UgKyAnLi4u66mU7J24IO2OmOydtOyngOuhnCDsnbTrj5ntlanri4jri6QuJztcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYXBwLmVycm9yTXNnID0gJ+yYrOuwlOuluCDslYTsnbTrlJTqsIAg7JWE64uZ64uI64ukLic7XHJcbiAgICB9XHJcbiAgfTtcclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdyZXNldEN0cmwnLCBmdW5jdGlvbigkc3RhdGVQYXJhbXMsICRzY29wZSwgVXNlciwgJHRpbWVvdXQsICRzdGF0ZSl7XHJcbiAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG4gICAgYXBwLmhpZGUgPSB0cnVlOyAvLyBIaWRlIGZvcm0gdW50aWwgdG9rZW4gY2FuIGJlIHZlcmlmaWVkIHRvIGJlIHZhbGlkXHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gY2hlY2sgaWYgdG9rZW4gaXMgdmFsaWQgYW5kIGdldCB0aGUgdXNlcidzIGluZm8gZnJvbSBkYXRhYmFzZSAocnVucyBvbiBwYWdlIGxvYWQpXHJcbiAgICBVc2VyLnJlc2V0UGFzc3dvcmQoJHN0YXRlUGFyYW1zLnRva2VuKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB1c2VyIHdhcyByZXRyaWV2ZWRcclxuICAgICAgICBpZiAoZGF0YS5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgYXBwLmhpZGUgPSBmYWxzZTsgLy8gU2hvdyBmb3JtXHJcbiAgICAgICAgICAgICRzY29wZS5hbGVydCA9ICdhbGVydCBhbGVydC1zdWNjZXNzJzsgLy8gU2V0IHN1Y2Nlc3MgbWVzc2FnZSBjbGFzc1xyXG4gICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9ICfsg4jroZzsmrQg67mE67CA67KI7Zi466W8IOyeheugpe2VtOyjvOyEuOyalC4nOyAvLyBMZXQgdXNlciBrbm93IHRoZXkgY2FuIGVudGVyIG5ldyBwYXNzd29yZFxyXG4gICAgICAgICAgICAkc2NvcGUudXNlcm5hbWUgPSBkYXRhLmRhdGEudXNlclswXS51c2VybmFtZTsgLy8gU2F2ZSB1c2VybmFtZSBpbiBzY29wZSBmb3IgdXNlIGluIHNhdmVQYXNzd29yZCgpIGZ1bmN0aW9uXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ2FsZXJ0IGFsZXJ0LWRhbmdlcic7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7IC8vIEdyYWIgZXJyb3IgbWVzc2FnZSBmcm9tIEpTT04gb2JqZWN0XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gc2F2ZSB1c2VyJ3MgbmV3IHBhc3N3b3JkIHRvIGRhdGFiYXNlXHJcbiAgICBhcHAuc2F2ZVBhc3N3b3JkID0gZnVuY3Rpb24ocmVnRGF0YSwgdmFsaWQsIGNvbmZpcm1lZCkge1xyXG4gICAgICAgIGFwcC5lcnJvck1zZyA9IGZhbHNlOyAvLyBDbGVhciBlcnJvck1zZyB3aGVuIHVzZXIgc3VibWl0c1xyXG4gICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTsgLy8gRGlzYWJsZSBmb3JtIHdoaWxlIHByb2Nlc3NpbmdcclxuICAgICAgICBhcHAubG9hZGluZyA9IHRydWU7IC8vIEVuYWJsZSBsb2FkaW5nIGljb25cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgZm9ybSBpcyB2YWxpZCBhbmQgcGFzc3dvcmRzIG1hdGNoXHJcbiAgICAgICAgaWYgKHZhbGlkICYmIGNvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICBhcHAucmVnRGF0YS51c2VybmFtZSA9ICRzY29wZS51c2VybmFtZTsgLy8gR3JhYiB1c2VybmFtZSBmcm9tICRzY29wZVxyXG5cclxuICAgICAgICAgICAgLy8gUnVuIGZ1bmN0aW9uIHRvIHNhdmUgdXNlcidzIG5ldyBwYXNzd29yZCB0byBkYXRhYmFzZVxyXG4gICAgICAgICAgICBVc2VyLnNhdmVQYXNzd29yZChhcHAucmVnRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBhcHAubG9hZGluZyA9IGZhbHNlOyAvLyBTdG9wIGxvYWRpbmcgaWNvblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcGFzc3dvcmQgd2FzIHNhdmVkIHRvIGRhdGFiYXNlXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxlcnQgPSAnYWxlcnQgYWxlcnQtc3VjY2Vzcyc7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgICAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlICsgJy4uLuuplOyduCDtmZTrqbTsnLzroZwg7J2064+Z7ZWp64uI64ukLic7IC8vIEdyYWIgc3VjY2VzcyBtZXNzYWdlIGZyb20gSlNPTiBvYmplY3QgYW5kIHJlZGlyZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVkaXJlY3QgdG8gbG9naW4gcGFnZSBhZnRlciAyMDAwIG1pbGxpc2Vjb25kcyAoMiBzZWNvbmRzKVxyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ2FsZXJ0IGFsZXJ0LWRhbmdlcic7IC8vIFNldCBzdWNjZXNzIG1lc3NhZ2UgY2xhc3NcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTsgLy8gRW5hYmxlIGZvcm0gdG8gYWxsb3cgdXNlciB0byByZXN1Ym1pdFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlOyAvLyBHcmFiIGVycm9yIG1lc3NhZ2UgZnJvbSBKU09OIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuYWxlcnQgPSAnYWxlcnQgYWxlcnQtZGFuZ2VyJzsgLy8gU2V0IHN1Y2Nlc3MgbWVzc2FnZSBjbGFzc1xyXG4gICAgICAgICAgICBhcHAubG9hZGluZyA9IGZhbHNlOyAvLyBTdG9wIGxvYWRpbmcgaWNvblxyXG4gICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTsgLy8gRW5hYmxlIGZvcm0gdG8gYWxsb3cgdXNlciB0byByZXN1Ym1pdFxyXG4gICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSAn7Jis67CU66W4IOygleuztOulvCDsnoXroKXtlbTso7zshLjsmpQuJzsgLy8gTGV0IHVzZXIga25vdyBmb3JtIGlzIG5vdCB2YWxpZFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgndXNlckNvbnRyb2xsZXJzJyxbJ3VzZXJTZXJ2aWNlcyddKVxyXG4uY29udHJvbGxlcigncmVnQ3RybCcsIGZ1bmN0aW9uICggJGh0dHAsICRsb2NhdGlvbiwgJHRpbWVvdXQsIFVzZXIsIEF1dGgsICRzdGF0ZSkge1xyXG4gICAgdmFyIGFwcCA9IHRoaXM7XHJcblxyXG4gICAgICB0aGlzLnJlZ1N0ZXAxID0gZnVuY3Rpb24ocmVnRGF0YSl7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgaWYoIXJlZ0RhdGEpe1xyXG4gICAgICAgICAgYXBwLmVycm9yTXNnID0gJ+yVveq0gOyXkCDrj5nsnZjtlbTslbzrp4wg7ZqM7JuQ6rCA7J6F7J2EIOynhO2Wie2VoCDsiJgg7J6I7Iq164uI64ukLic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmKChyZWdEYXRhLnRlcm1zKSAmJiAocmVnRGF0YS5wcml2YWN5KSkge1xyXG4gICAgICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSAn7JW96rSA7JeQIOyEseqzteyggeycvOuhnCDrj5nsnZjtlZjshajsirXri4jri6QuJztcclxuICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5yZWdpc3RlclN0ZXAyJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gJ+yVveq0gOyXkCDrj5nsnZjtlbTslbzrp4wg7ZqM7JuQ6rCA7J6F7J2EIOynhO2Wie2VoCDsiJgg7J6I7Iq164uI64ukLic7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9O1xyXG5cclxuICAgIC8vIO2ajOybkOqwgOyehVxyXG4gICAgICB0aGlzLnJlZ1N0ZXAyID0gZnVuY3Rpb24ocmVnRGF0YSwgdmFsaWQsIGNvbmZpcm1lZCl7XHJcbiAgICAgICAgYXBwLmVycm9yTXNnID0gZmFsc2U7XHJcbiAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAkc3RhdGUuZ28oJ2FwcC5yZWdpc3RlclN0ZXAzJyk7XHJcbiAgICAgICAgLy8gaWYodmFsaWQgJiYgY29uZmlybWVkKXtcclxuICAgICAgICAvLyAgIFVzZXIuY3JlYXRlKGFwcC5yZWdEYXRhKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIC8vICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgLy8gICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICBhcHAuc3VjY2Vzc01zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgIC8vICAgICAgIEF1dGgubG9naW4oYXBwLnJlZ0RhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgLy8gICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgLy8gICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgLy8gICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XHJcbiAgICAgICAgLy8gICAgICAgICAgIH0sMTAwMCk7XHJcbiAgICAgICAgLy8gICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgIGlmKGRhdGEuZGF0YS5leHBpcmVkKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZXhwaXJlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAvLyAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAvLyAgICAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAvLyAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgIH0pO1xyXG4gICAgICAgIC8vICAgICB9ZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgIH0pO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlOyAvLyBJZiBlcnJvciBvY2N1cnMsIHJlbW92ZSBkaXNhYmxlIGxvY2sgZnJvbSBmb3JtXHJcbiAgICAgICAgLy8gICAgICBhcHAubG9hZGluZyA9IGZhbHNlOyAvLyBTdG9wIGJvb3RzdHJhcCBsb2FkaW5nIGljb25cclxuICAgICAgICAvLyAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7KCV67O066W8IOyeheugpe2VtOyjvOyEuOyalC4nOyAvLyBEaXNwbGF5IGVycm9yIGlmIHZhbGlkIHJldHVybnMgZmFsc2VcclxuICAgICAgICAvLyB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyDtmozsm5DqsIDsnoVcclxuICAgICAgICB0aGlzLnJlZ1N0ZXAzID0gZnVuY3Rpb24ocmVnRGF0YSwgdmFsaWQsIGNvbmZpcm1lZCl7XHJcbiAgICAgICAgICBhcHAuZXJyb3JNc2cgPSBmYWxzZTtcclxuICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICBpZih2YWxpZCAmJiBjb25maXJtZWQpe1xyXG4gICAgICAgICAgICBVc2VyLmNyZWF0ZShhcHAucmVnRGF0YSkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYXBwLnN1Y2Nlc3NNc2cgPSBkYXRhLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIEF1dGgubG9naW4oYXBwLnJlZ0RhdGEpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5zdWNjZXNzTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmRhdGEuZXhwaXJlZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZXhwaXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwcC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXBwLmVycm9yTXNnID0gZGF0YS5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhcHAuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9IGRhdGEuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgYXBwLmRpc2FibGVkID0gZmFsc2U7IC8vIElmIGVycm9yIG9jY3VycywgcmVtb3ZlIGRpc2FibGUgbG9jayBmcm9tIGZvcm1cclxuICAgICAgICAgICAgICAgYXBwLmxvYWRpbmcgPSBmYWxzZTsgLy8gU3RvcCBib290c3RyYXAgbG9hZGluZyBpY29uXHJcbiAgICAgICAgICAgICAgIGFwcC5lcnJvck1zZyA9ICfsmKzrsJTrpbgg7KCV67O066W8IOyeheugpe2VtOyjvOyEuOyalC4nOyAvLyBEaXNwbGF5IGVycm9yIGlmIHZhbGlkIHJldHVybnMgZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG59KTtcclxuIl19
