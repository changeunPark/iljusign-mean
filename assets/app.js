angular.module("app",["ui.router","ui.bootstrap","userControllers","mainControllers","emailControllers","managementControllers","uiCropper"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptors")}]);var app=angular.module("app");app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,a){t.otherwise("/"),a.hashPrefix(""),a.html5Mode(!0),e.state("app",{url:"/",views:{header:{templateUrl:"/menues/header.html"},content:{templateUrl:"/main/form.html"},"menu@app":{templateUrl:"/menues/mainMenu.html"},"account@app":{templateUrl:"/main/account.html"},"contents@app":{templateUrl:"/main/home.html"},footer:{templateUrl:"/company/footer.html"}}}).state("app.category",{url:"category",views:{"subMenu@app":{templateUrl:"/menues/subMenu.html"},"contents@app":{templateUrl:"/categoryes/items/form.html"}}}).state("app.board",{url:"board",views:{"contents@app":{templateUrl:"/categoryes/board/form.html"}}}).state("app.management",{url:"management",views:{"content@":{templateUrl:"/management/form.html"},"menu@app.management":{templateUrl:"/management/menu.html"}}}).state("app.management.bannerUpload",{url:"/bannerUpload",views:{"contents@app.management":{templateUrl:"/management/partial/bannerUpload.html"}}}).state("app.management.itemUpload",{url:"/itemUpload",views:{"contents@app.management":{templateUrl:"/management/partial/itemUpload.html",controller:"itemUploadCtrl",controllerAs:"item"}}}).state("app.management.orderStatus",{url:"/orderStatus",views:{"contents@app.management":{templateUrl:"/management/partial/orderStatus.html"}}}).state("app.management.members",{url:"/members",views:{"contents@app.management":{templateUrl:"/management/partial/members.html"}}}).state("registerStep1",{url:"/register/step1",controller:"regCtrl",controllerAs:"register",templateUrl:"/users/register/registerStep1.html",authenticated:!1}).state("registerStep2",{url:"/register/step2",controller:"regCtrl",controllerAs:"register",templateUrl:"/users/register/registerStep2.html",authenticated:!1}).state("resetusername",{url:"/resetusername",templateUrl:"/users/reset/username.html",controller:"usernameCtrl",controllerAs:"username"}).state("resetpassword",{url:"/resetpassword",templateUrl:"/users/reset/password.html",controller:"passwordCtrl",controllerAs:"password"}).state("reset",{url:"/reset/:token",templateUrl:"/users/reset/newpassword.html",controller:"resetCtrl",controllerAs:"reset"}).state("activate",{url:"/activate/:token",templateUrl:"/users/activation/activate.html",controller:"emailCtrl",controllerAs:"email"}).state("resend",{url:"/resend",templateUrl:"/users/activation/resend.html",controller:"resendCtrl",controllerAs:"resend"}).state("app.intro",{url:"intro",views:{"content@":{templateUrl:"/company/intro.html",authenticated:!1}}}).state("app.terms",{url:"terms",views:{"content@":{templateUrl:"/company/terms.html",authenticated:!1}}}).state("app.privacy",{url:"privacy",views:{"content@":{templateUrl:"/company/privacy.html",authenticated:!1}}})}]),app.run(["$rootScope","User","$state",function(e,t,a){e.$on("$stateChangeStart",function(e,t,a,r,n,s){}),e.$on("$stateChangeError",function(e,t,r,n,s,o){a.go("app")})}]),angular.module("app").directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,a,r){var n=e(r.fileModel),s=n.assign;a.bind("change",function(){t.$apply(function(){s(t,a[0].files[0])})})}}}]),angular.module("app").directive("match",function(){return{restrict:"A",controller:["$scope",function(e){e.doConfirm=function(t){e.confirmed=!1,t.forEach(function(t){e.confirm==t?e.confirmed=!0:e.confirmed=!1})}}],link:function(e,t,a){a.$observe("match",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)}),e.$watch("confirm",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)})}}}),angular.module("adminServices",[]).factory("Admin",["$http",function(e){return adminFactory={},adminFactory.readAristCrop=function(t){return e.post("/api/createCropImage",t)},adminFactory.createAristPhoto=function(t){return e.post("/api/artistProfiles",t)},adminFactory.createItem=function(t){return e.post("/api/item",t)},adminFactory}]),angular.module("authServices",[]).factory("Auth",["$http","AuthToken",function(e,t){var a={};return a.getUser=function(){if(t.getToken())return e.post("/api/me");$q.reject({message:"User has no token"})},a.login=function(a){return e.post("/api/authenticate",a).then(function(e){return console.log(e),t.setToken(e.data.token),e})},a.isLoggedIn=function(){return!!t.getToken()},a.logout=function(){t.setToken()},a}]).factory("AuthToken",["$window",function(e){var t={};return t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token",t)},t.getToken=function(){return e.localStorage.getItem("token")},t}]).factory("AuthInterceptors",["AuthToken",function(e){var t={};return t.request=function(t){var a=e.getToken();return a&&(t.headers["x-access-token"]=a),t},t}]),angular.module("userServices",[]).factory("User",["$http",function(e){return userFactory={},userFactory.getPermission=function(){return e.get("/api/permission")},userFactory.create=function(t){return e.post("/api/users",t)},userFactory.activeAccount=function(t){return e.put("/api/activate/"+t)},userFactory.checkCredentials=function(t){return e.post("/api/resend",t)},userFactory.resendLink=function(t){return e.put("/api/resend",t)},userFactory.sendUsername=function(t){return e.get("/api/resetusername/"+t)},userFactory.sendPassword=function(t){return e.put("/api/resetpassword",t)},userFactory.resetPassword=function(t){return e.get("/api/resetpassword/"+t)},userFactory.savePassword=function(t){return e.put("/api/savepassword",t)},userFactory.renewSession=function(t){return e.get("/api/renewToken/"+t)},userFactory}]),angular.module("mainControllers",["authServices","userServices"]).controller("mainCtrl",["Auth","$timeout","$location","$state","$rootScope","$scope","$window","$interval","User","AuthToken",function(e,t,a,r,n,s,o,i,l,d){var u=this;u.loadme=!1,s.$on("LOAD",function(){s.loading=!0}),s.$on("UNLOAD",function(){s.loading=!1}),n.$on("$stateChangeStart",function(){c?e.isLoggedIn()?(u.isLoggedIn=!0,u.loadme=!0,e.getUser().then(function(e){u.user=e.data,u.loadme=!0,l.getPermission().then(function(e){e.data.success?"admin"===e.data.permission?(u.authorized=!0,u.loadme=!0):"artist"===e.data.permission?(u.permission=!0,u.loadme=!0):(u.permission=!1,u.authorized=!1,u.loadme=!0):(u.permission=!1,u.authorized=!1,u.loadme=!0)})})):(u.user=!1,u.isLoggedIn=!1,u.loadme=!0):c()});var c=function(){if(e.isLoggedIn()){u.checkSession=!0;var t=i(function(){var e=o.localStorage.getItem("token");if(null===e)i.cancel(t);else{self.parseJwt=function(e){var t=e.split(".")[1],a=t.replace("-","+").replace("_","/");return JSON.parse(o.atob(a))};var a=self.parseJwt(e),r=Math.floor(Date.now()/1e3);a.exp-r<=5&&(m("expired"),i.cancel(t))}},2e3)}};c(),u.renewSession=function(){u.choiceMade=!0,l.renewSession(u.user.username).then(function(e){e.data.success?(d.setToken(e.data.token),c(),p("expired")):(u.ModalBody=e.data.message,p("expired"))})},u.endSession=function(){u.choiceMade=!0,p("expired"),t(function(){m("logout")},500)};var m=function(a){u.choiceMade=!1,u.modalHeader=void 0,u.modalBody=void 0,u.hideButton=!1,"expired"===a?(u.modalHeader="Timeout Warning",u.modalBody="Your session will expired in 5 minutes. Would you like to renew your session?",$("#myModal").modal({backdrop:"static"})):"logout"===a?(u.hideButton=!0,u.modalHeader="로그아웃",$("#myModal").modal({backdrop:"static"}),t(function(){e.logout(),u.isLoggedIn=!1,p("logout"),r.reload()},1e3)):"login"===a&&$("#login").modal({backdrop:"static"}),t(function(){u.choiceMade||p("logout")},2e3)},p=function(e){"expired"===e?$("#myModal").modal("hide"):"logout"===e?$("#myModal").modal("hide"):"login"===e&&$("#login").modal("hide")};this.doLogin=function(a,n){u.errorMsg=!1,u.expired=!1,u.disabled=!0,n?e.login(u.loginData).then(function(e){e.data.success?(u.disabled=!0,u.successMsg=e.data.message,t(function(){p("login"),u.loginData=null,u.isLoggedIn=!0,c(),r.reload()},1e3)):e.data.expired?(u.expired=!0,u.disabled=!0,u.errorMsg=e.data.message):(u.disabled=!1,u.errorMsg=e.data.message)}):(u.disabled=!1,u.loading=!1,u.errorMsg="올바른 정보를 입력해주세요.")},u.login=function(){u.successMsg=!1,u.errorMsg=!1,u.disabled=!1,m("login")},u.logout=function(){m("logout")},u.resend=function(){p("login"),t(function(){r.go("resend"),u.expired=!1},500)},u.resetusername=function(){p("login"),t(function(){r.go("resetusername")},500)},u.resetpassword=function(){p("login"),t(function(){r.go("resetpassword")},500)}}]),angular.module("managementControllers",["adminServices"]).controller("itemUploadCtrl",["$http","$timeout","$scope","Admin","$state","$window",function(e,t,a,r,n,s){function o(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var i=this;i.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."},{id:"1",name:"시트소재"},{id:"2",name:"실사소재"},{id:"3",name:"부자재"}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},i.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."},{id:"1",name:"기타소재"},{id:"2",name:"기타소재"},{id:"3",name:"기타소재"}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),i.mainThumbnail={},i.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),i.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),i.mainPhoto=!1,i.disabled=!0;var t=new FormData;t.append("myfile",i.file.upload),e.post("/api/createPhotoImage/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),i.mainPhoto=!0,i.disabled=!1,i.mainImagePath=e.data.item_path,i.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),i.disabled=!1,i.file={})})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),i.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var t=new FormData;t.append("myfile",i.file.upload),e.post("/api/createPhotoExplain/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),i.explainPhoto=!0,i.disabled=!1,i.explainImagePath=e.data.item_path,i.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),i.disabled=!1,i.file={})})},i.myImage="",i.myCroppedImage="";var l=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),i.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",l),this.readCropImage=function(e){if(a.$emit("LOAD"),i.thumbnail=!1,i.disabled=!0,""===e.base64Url||null===e.base64Url||void 0===e.base64Url)i.disabled=!1;else{a.$emit("UNLOAD");var t=o(a.myCroppedImage);r.readAristCrop(t).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),i.thumbnail=!0,i.disabled=!1,i.thumbnailPath=e.data.filePath):(a.$emit("UNLOAD"),i.disabled=!1)})}},this.createPhoto=function(e){a.$emit("LOAD"),void 0===e||null===e||""===e?(s.alert("빈칸을 모두 입력해주세요."),i.disabled=!1,a.$emit("UNLOAD")):"0"===i.data.selectedOption.id?(a.$emit("UNLOAD"),i.disabled=!1,s.alert("상품 타입을 선택해주세요.")):void 0===i.mainImagePath||null===i.mainImagePath||""===i.mainImagePath?(a.$emit("UNLOAD"),i.disabled=!1,s.alert("상품 이미지를 입력해주세요.")):void 0===e.title||null===e.title||""===e.title?(a.$emit("UNLOAD"),i.disabled=!1,s.alert("상품 제목를 입력해주세요.")):void 0===i.explainImagePath||null===i.explainImagePath||""===i.explainImagePath?(a.$emit("UNLOAD"),i.disabled=!1,s.alert("상품 설명 이미지를 업로드해주세요.")):void 0===i.thumbnailPath||null===i.thumbnailPath||""===i.thumbnailPath?(a.$emit("UNLOAD"),i.disabled=!1,s.alert("썸네일 이미지를 업로드해주세요.")):(i.uploadData={title:e.title,price:e.price,type:i.data.selectedOption.id,thumbnail:i.thumbnailPath,explain:i.explainImagePath,image:i.mainImagePath},r.createItem(i.uploadData).then(function(e){e.data.success?(a.$emit("UNLOAD"),i.disabled=!0,s.alert(e.data.message),n.reload()):(a.$emit("UNLOAD"),i.disabled=!1,s.alert(e.data.message))}))}}]),angular.module("app").controller("mainMenuController",["$http","$scope",function(e,t){e.get("/api/header").then(function(e){t.headers=e.data})}]),angular.module("emailControllers",["userServices"]).controller("emailCtrl",["$stateParams","User","$timeout","$state",function(e,t,a,r){var n=this;t.activeAccount(e.token).then(function(e){n.successMsg=!1,n.errorMsg=!1,e.data.success?(n.disabled=!0,n.successMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3)):(n.errorMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3))})}]).controller("resendCtrl",["User","$timeout","$state",function(e,t,a){app=this,this.checkCredentials=function(r){app.successMsg=!1,app.errorMsg=!1,app.disabled=!0,e.checkCredentials(this.loginData).then(function(r){r.data.success?e.resendLink(app.loginData).then(function(e){e.data.success&&(app.disabled=!0,app.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3))}):(app.disabled=!1,app.errorMsg=r.data.message)})}}]).controller("usernameCtrl",["User","$timeout","$state",function(e,t,a){var r=this;this.sendUsername=function(n,s){r.errorMsg=!1,r.disabled=!0,s?e.sendUsername(r.userData.email).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 이메일 주소가 아닙니다.")}}]).controller("passwordCtrl",["User","$timeout","$state",function(e,t,a){var r=this;r.sendPassword=function(n,s){r.errorMsg=!1,r.disabled=!0,s?e.sendPassword(r.resetData).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 아이디가 아닙니다.")}}]).controller("resetCtrl",["$stateParams","$scope","User","$timeout","$state",function(e,t,a,r,n){var s=this;s.hide=!0,a.resetPassword(e.token).then(function(e){e.data.success?(s.hide=!1,t.alert="alert alert-success",s.successMsg="새로운 비밀번호를 입력해주세요.",t.username=e.data.user[0].username):(t.alert="alert alert-danger",s.errorMsg=e.data.message)}),s.savePassword=function(e,o,i){s.errorMsg=!1,s.successMsg=!1,s.disabled=!0,s.loading=!0,o&&i?(s.regData.username=t.username,a.savePassword(s.regData).then(function(e){s.loading=!1,e.data.success?(t.alert="alert alert-success",s.successMsg=e.data.message+"...메인 화면으로 이동합니다.",r(function(){n.go("app")},2e3)):(t.alert="alert alert-danger",s.disabled=!1,s.errorMsg=e.data.message)})):(t.alert="alert alert-danger",s.loading=!1,s.disabled=!1,s.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("userControllers",["userServices"]).controller("regCtrl",["$http","$location","$timeout","User","Auth","$state",function(e,t,a,r,n,s){var o=this;this.regStep1=function(e){o.errorMsg=!1,e?e.terms&&e.privacy?(o.successMsg="약관에 성공적으로 동의하셨습니다.",o.disabled=!0,s.go("registerStep2")):(o.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다.",o.disabled=!1):o.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다."},this.regStep2=function(e,t,i){o.errorMsg=!1,o.disabled=!0,t&&i?r.create(o.regData).then(function(e){e.data.success?(o.disabled=!0,o.successMsg=e.data.message,n.login(o.regData).then(function(e){e.data.success?(o.disabled=!0,o.successMsg=e.data.message,a(function(){s.go("app")},1e3)):e.data.expired?(o.expired=!0,o.disabled=!0,o.errorMsg=e.data.message):(o.disabled=!1,o.errorMsg=e.data.message)})):(o.disabled=!1,o.errorMsg=e.data.message)}):(o.disabled=!1,o.loading=!1,o.errorMsg="올바른 정보를 입력해주세요.")}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
