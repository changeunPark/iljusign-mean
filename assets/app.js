angular.module("app",["ui.router","ui.bootstrap","menuControllers","userControllers","mainControllers","emailControllers","managementControllers","itemControllers","typeControllers","orderControllers","uiCropper","bannerController","galleryController"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptors")}]);var app=angular.module("app");app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,a){t.otherwise("/"),a.hashPrefix(""),a.html5Mode(!0),e.state("app",{url:"/",views:{"bodyContent@":{templateUrl:"/main/home.html"}}}).state("app.registerStep1",{url:"register/step1",views:{"bodyContent@":{templateUrl:"/users/register/registerStep1.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.registerStep2",{url:"register/step2",views:{"bodyContent@":{templateUrl:"/users/register/registerStep2.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.registerStep3",{url:"register/step3",views:{"bodyContent@app":{templateUrl:"/users/register/registerStep3.html",controller:"regCtrl",controllerAs:"register"}}}).state("app.login",{url:"login",views:{"bodyContent@":{templateUrl:"/users/login/login.html"}}}).state("app.board",{url:"board",views:{"bodyContent@":{templateUrl:"/categoryes/board/form.html"}}}).state("app.gallery",{url:"gallery",views:{"bodyContent@":{templateUrl:"/categoryes/gallery/home.html"}}}).state("app.user",{url:"user",views:{"bodyContent@":{templateUrl:"/users/partial/user.html"}}}).state("app.commerceDetail",{url:"commerce-detail",views:{"bodyContent@":{templateUrl:"/users/partial/commerceDetail.html"}}}).state("app.basket",{url:"basket",views:{"bodyContent@":{templateUrl:"/users/partial/basket.html",controller:"basketCtrl",controllerAs:"basket"}}}).state("app.category",{url:"category=:category_id",views:{"subMenu@app":{templateUrl:"/menues/subMenu.html",controller:"subMenuCtrl",controllerAs:"subMenu"},"bodyContent@":{templateUrl:"/categoryes/items/form.html",controller:"getTypeItemsCtrl",controllerAs:"getTypeItems"}}}).state("app.category.item_type",{url:"/item_type=:type_code",views:{"bodyContent@":{templateUrl:"/categoryes/items/form.html",controller:"getTypeItemsCtrl",controllerAs:"getTypeItems"}}}).state("app.category.item_type.show",{url:"/item:item_id",views:{"bodyContent@":{templateUrl:"/categoryes/items/item.html",controller:"getTypeItemCtrl",controllerAs:"getTypeItem"}}}).state("app.category.show",{url:"/item:item_id",views:{"bodyContent@":{templateUrl:"/categoryes/items/item.html",controller:"getTypeItemCtrl",controllerAs:"getTypeItem"}}}).state("app.makeOrder",{url:"makeOrder",views:{"bodyContent@":{templateUrl:"/order/makeOrder.html",controller:"readOrderCtrl",controllerAs:"readOrder"}}}).state("app.confirmOrder",{url:"confirmOrder",views:{"bodyContent@":{templateUrl:"/order/confirmOrder.html",controller:"readOrderCtrl",controllerAs:"readOrderCtrl"}}}).state("app.adminOrderStatus",{url:"adminOrderStatus",views:{"adminContent@":{templateUrl:"/management/partial/orderStatus.html"}}}).state("app.adminMembers",{url:"members",views:{"adminContent@":{templateUrl:"/management/partial/members.html"}}}).state("app.adminCategory",{url:"category",views:{"adminContent@":{templateUrl:"/management/partial/category.html",controller:"mainMenuCtrl",controllerAs:"mainMenu"}}}).state("app.adminTypeAndItems",{url:"typeAndItems",views:{"adminContent@":{templateUrl:"/management/partial/typeAndItems.html"}}}).state("app.adminGallery",{url:"gallery",views:{"adminContent@":{templateUrl:"/management/partial/gallery.html",controller:"uploadgalleryCtrl",controllerAs:"uploadGallery"}}}).state("app.management",{url:"management",views:{"adminContent@app":{templateUrl:"/management/form.html"},"menu@app.management":{templateUrl:"/management/menu.html"}}}).state("app.management.typeAndItems.update",{url:"/updateType:item_type",views:{"contents@app.management":{templateUrl:"/management/partial/update/type.html",controller:"updateTypeCtrl",controllerAs:"updateType"}}}).state("app.management.typeAndItems.updateItemType",{url:"/updateItem:item_id",views:{"contents@app.management":{templateUrl:"/management/partial/update/itemType.html",controller:"updateItemTypeCtrl",controllerAs:"updateItemType"}}}).state("app.management.typeAndItems.updateItem",{url:"/update/item:item_id",views:{"contents@app.management":{templateUrl:"/management/partial/update/item.html",controller:"updateItemCtrl",controllerAs:"updateItem"}}}).state("app.management.typeAndItems.readItem",{url:":item_id",views:{"contents@app.management":{templateUrl:"/management/partial/read/item.html",controller:"readItemCtrl",controllerAs:"readItem"}}}).state("resetusername",{url:"/resetusername",templateUrl:"/users/reset/username.html",controller:"usernameCtrl",controllerAs:"username"}).state("resetpassword",{url:"/resetpassword",templateUrl:"/users/reset/password.html",controller:"passwordCtrl",controllerAs:"password"}).state("reset",{url:"/reset/:token",templateUrl:"/users/reset/newpassword.html",controller:"resetCtrl",controllerAs:"reset"}).state("activate",{url:"/activate/:token",templateUrl:"/users/activation/activate.html",controller:"emailCtrl",controllerAs:"email"}).state("resend",{url:"/resend",templateUrl:"/users/activation/resend.html",controller:"resendCtrl",controllerAs:"resend"}).state("app.intro",{url:"intro",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/companyIntroduce.tpl.html",authenticated:!1}}}).state("app.terms",{url:"terms",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/terms.tpl.html",authenticated:!1}}}).state("app.privacy",{url:"privacy",views:{"bodyContent@":{templateUrl:"/directives/companyInformation/privacy.tpl.html",authenticated:!1}}})}]),app.run(["$rootScope","User","$state",function(e,t,a){e.$on("$stateChangeStart",function(e,t,a,r,n,i){}),e.$on("$stateChangeError",function(e,t,r,n,i,s){a.go("app")})}]),angular.module("app").directive("adminUsers",[function(){return{restrict:"E",controller:[function(){}],controllerAs:"NameCtrl",templateUrl:"/directives/adminUsers.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("banner",["$http",function(e){return{restrict:"E",controller:[function(){}],controllerAs:"bannerCtrl",templateUrl:"/directives/banner.tpl.html",link:function(t,a,r,n){var i=n;e.get("/api/banner").then(function(e){e.data.success?i.bannerData=e.data.bannerData:console.log("불러오지 못하였습니다.")})}}}]).controller("CarouselCtrl",["$scope",function(e){function t(e){for(var t=0,a=n.length;t<a;t++)n[t].id=e.pop()}function a(){for(var e=[],t=0;t<i;++t)e[t]=t;return r(e)}function r(e){var t,a,r=e.length;if(r)for(;--r;)a=Math.floor(Math.random()*(r+1)),t=e[a],e[a]=e[r],e[r]=t;return e}e.myInterval=2500,e.noWrapSlides=!1,e.active=0;var n=e.slides=[],i=0;e.addSlide=function(){n.length;n.push({image:["/images/items/banner/1.jpg","/images/items/banner/2.jpg","/images/items/banner/3.jpg"][n.length%3],id:i++})},e.randomize=function(){t(a())};for(var s=0;s<3;s++)e.addSlide()}]),angular.module("app").directive("menuItem",["Menu",function(e){return{restrict:"E",controller:[function(){}],controllerAs:"menuItemCtrl",templateUrl:"/directives/menuItem.tpl.html",link:function(t,a,r,n){var i=n;e.readMainMenu().then(function(e){e.data.success?i.mainMenues=e.data.result:i.errorMsg=e.data.message})}}}]),angular.module("adminServices",[]).factory("Admin",["$http",function(e){return adminFactory={},adminFactory.deleteItem=function(t){return e.delete("/api/item/"+t)},adminFactory.readAristCrop=function(t){return e.post("/api/createCropImage",t)},adminFactory.createAristPhoto=function(t){return e.post("/api/artistProfiles",t)},adminFactory.createItem=function(t){return e.post("/api/item",t)},adminFactory.readItems=function(){return e.get("/api/item")},adminFactory.readItem=function(t){return e.get("/api/item/"+t)},adminFactory.updateItemType=function(t){return e.put("/api/itemType",t)},adminFactory.readUpdateItemType=function(t){return e.get("/api/itemType/"+t)},adminFactory.readItemType=function(){return e.get("/api/itemType")},adminFactory.deleteType=function(t){return e.delete("/api/type/"+t)},adminFactory.readUpdateType=function(t){return e.get("/api/type/"+t)},adminFactory.updateUpdateType=function(t){return e.put("/api/type",t)},adminFactory.createType=function(t){return e.post("/api/type",t)},adminFactory.readType=function(){return e.get("/api/type")},adminFactory}]),angular.module("authServices",[]).factory("Auth",["$http","AuthToken",function(e,t){var a={};return a.getUser=function(){if(t.getToken())return e.post("/api/me");$q.reject({message:"User has no token"})},a.login=function(a){return e.post("/api/authenticate",a).then(function(e){return t.setToken(e.data.token),e})},a.isLoggedIn=function(){return!!t.getToken()},a.logout=function(){t.setToken()},a}]).factory("AuthToken",["$window",function(e){var t={};return t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token",t)},t.getToken=function(){return e.localStorage.getItem("token")},t}]).factory("AuthInterceptors",["AuthToken",function(e){var t={};return t.request=function(t){var a=e.getToken();return a&&(t.headers["x-access-token"]=a),t},t}]),angular.module("menuServices",[]).factory("Menu",["$http",function(e){return menuFactory={},menuFactory.deleteMenu=function(t){return e.delete("/api/menu/"+t)},menuFactory.updateMenu=function(t){return e.put("/api/menu/",t)},menuFactory.createMenu=function(t){return e.post("/api/menu",t)},menuFactory.readMainMenu=function(){return e.get("/api/menu")},menuFactory.readSubMenu=function(t){return e.get("/api/menu/"+t)},menuFactory}]),angular.module("orderServices",[]).factory("Order",["$http",function(e){return orderFactory={},orderFactory.updateDelivery=function(t){return e.put("/api/delivery/"+t.user_id,t)},orderFactory.createDelivery=function(t){return e.post("/api/delivery",t)},orderFactory.deleteBasket=function(t){return e.delete("/api/basket/"+t)},orderFactory.readBasket=function(){return e.get("/api/basket")},orderFactory.createBasket=function(t){return e.post("/api/basket",t)},orderFactory.deleteOrder=function(t){return e.delete("/api/makeOrder/"+t)},orderFactory.readOrder=function(t){return e.get("/api/makeOrder/"+t)},orderFactory.readOrderAndDeli=function(){return e.get("/api/makeOrder")},orderFactory.createOrder=function(t){return e.post("/api/makeOrder",t)},orderFactory}]),angular.module("userServices",[]).factory("User",["$http",function(e){return userFactory={},userFactory.getPermission=function(){return e.get("/api/permission")},userFactory.create=function(t){return e.post("/api/users",t)},userFactory.activeAccount=function(t){return e.put("/api/activate/"+t)},userFactory.checkCredentials=function(t){return e.post("/api/resend",t)},userFactory.resendLink=function(t){return e.put("/api/resend",t)},userFactory.sendUsername=function(t){return e.get("/api/resetusername/"+t)},userFactory.sendPassword=function(t){return e.put("/api/resetpassword",t)},userFactory.resetPassword=function(t){return e.get("/api/resetpassword/"+t)},userFactory.savePassword=function(t){return e.put("/api/savepassword",t)},userFactory.renewSession=function(t){return e.get("/api/renewToken/"+t)},userFactory}]),angular.module("bannerController",[]).controller("uploadBannerCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadBanner=function(){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var t=new FormData;t.append("myfile",i.file.upload),a.post("/api/banner/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(e.$emit("UNLOAD"),r.alert(t.data.message),n.reload(),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})}}]).controller("getBannerCtrl",["$http",function(e){var t=this;e.get("/api/banner").then(function(e){e.data.success?t.bannerData=e.data.bannerData:console.log("불러오지 못하였습니다.")})}]),angular.module("galleryController",[]).controller("uploadgalleryCtrl",["$scope","$timeout","$http","$window","$state",function(e,t,a,r,n){var i=this;this.file={},this.readImage=function(a){if(e.$emit("LOAD"),a.length>0&&a[0].name.match(/\.(png|jpeg|jpg)$/)){var r=a[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(a){t(function(){e.$emit("UNLOAD"),i.explainThumbnail={},i.explainThumbnail.dataUrl=a.target.result})}}else e.$emit("UNLOAD"),i.explainThumbnail={}},this.uploadImage=function(t){e.$emit("LOAD"),i.explainPhoto=!1,i.disabled=!0;var n=new FormData;n.title=t,n.append("myfile",i.file.upload),a.patch("/api/gallery/",n,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(t){t.data.success?(i.imagePath=t.data.image_path,e.$emit("UNLOAD"),r.alert(t.data.message),i.explainPhoto=!0,i.disabled=!1):(e.$emit("UNLOAD"),r.alert(t.data.message),i.disabled=!1,i.file={})})},this.uploadGallery=function(e){galleryData={title:e,imagePath:i.imagePath},a.post("/api/gallery",galleryData).then(function(e){})}}]).controller("getGalleryCtrl",["$http",function(e){var t=this;e.get("/api/gallery").then(function(e){e.data.success?(t.galleryData=e.data.galleryData,console.log(t.galleryData)):console.log("불러오지 못하였습니다.")})}]),angular.module("itemControllers",["orderServices"]).filter("sumByKey",function(){return function(e,t){var a=e instanceof Array?e.length:0;if(void 0===t||0===a)return a;for(var r=0;a--;)r+=e[a][t[0]]*e[a][t[1]];return r}}).controller("getTypeItemsCtrl",["$stateParams","$http",function(e,t){var a=this,r=e.category_id;if(e.type_code){var n=e.type_code;t.get("/api/item_type/"+r,{params:{type_code:n}}).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}else t.get("/api/item_type/"+r).then(function(e){e.data.success?0===e.data.result.length?a.errorMsg="등록된 상품이 없습니다.":a.itemsData=e.data.result:a.errorMsg=e.data.message})}]).controller("getTypeItemCtrl",["Admin","$stateParams","$window","$state","Order",function(e,t,a,r,n){var s=this,o=t.item_id;s.optionItem=!1,s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,s.optionList=[],this.addItem=function(e){0===e.id?a.alert("옵션을 선택해주세요."):(s.optionItem=!0,s.optionList.push({kind:e.name,price:e.id,amount:1}))},this.createBasket=function(e){var t={item_id:e.item_id};n.createBasket(t).then(function(e){e.data.success,a.alert(e.data.message)})},this.createOrder=function(e){var t={item_id:e.item_id,amount:e.amount,kind_of:e.kind_of,price:e.price};n.createOrder(t).then(function(e){e.data.success?(s.successMsg=e.data.message,r.go("app.makeOrder")):s.errorMsg=e.data})},e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]),angular.module("managementControllers",["adminServices","menuServices","orderServices"]).controller("readItemsCtrl",["Admin","$state",function(e,t){var a=this;e.readItems().then(function(e){a.errorMsg=!1,e.data.success?a.itemsData=e.data.result:a.errorMsg=e.data.message}),this.deleteItem=function(r){a.errorMsg=!1;var n=r.item_id;e.deleteItem(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("readItemCtrl",["Admin","$stateParams","$scope","Order","$window",function(e,t,a,r,n){var s=this,o=t.item_id;s.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},s.amount=1,e.readItem(o).then(function(e){if(e.data.success){var t=e.data.result.kind.split(","),a=e.data.result.price.split(","),r=[];for(i=0;i<a.length;i++)r[i]=Number(a[i]);for(s.itemData=e.data.result,s.data.selectedOption={id:r[0]},i=0;i<r.length;i++)s.data.availableOptions[i+1]={name:t[i],id:r[i]}}else s.errorMsg=e.data.message})}]).controller("updateItemCtrl",["Admin","$stateParams","$scope","$http","$timeout","$state","$window","Menu",function(e,t,a,r,n,s,o,l){function d(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var c=this,u=t.item_id;c.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},l.readMainMenu().then(function(e){if(c.errorMsg=!1,e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)c.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else c.errorMsg=e.data.message}),this.readMenu=function(e){if(c.errorMsg=!1,c.readMenuStatus=!1,0===e.id)o.alert("카테고리를 선택해주세요.");else{var t=e.id;r.get("/api/menu/"+t).then(function(e){if(e.data.success)if(0===e.data.result.length)c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},o.alert("등록된 상품이 없습니다.");else{c.readMenuStatus=!0,c.data2={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)c.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}else c.errorMsg=e.data.message})}},e.readItem(u).then(function(e){console.log(e),e.data.success?(c.itemData=e.data.result,c.data.selectedOption={id:c.itemData.category_id}):c.errorMsg=e.data.message}),this.updateItem=function(e){if(c.errorMsg=!1,c.readMenuStatus)if(0===e.item_type||"0"===e.item_type)o.alert("상품 분류를 선택해주세요.!");else{var t={type:e.item_type,item_name:e.item_name};r.put("/api/item/"+u,t).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})}else updateData2={type:c.itemData.item_type_id,item_name:e.item_name},r.put("/api/item/"+u,updateData2).then(function(e){e.data.success?(c.successMsg=e.data.message,s.reload()):c.errorMsg=e.data.message})},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.mainThumbnail={},c.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),c.mainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoImage/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.mainPhoto=!0,c.disabled=!1;var t={image:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var t=e[0],r=new FileReader;r.readAsDataURL(t),r.onload=function(e){n(function(){a.$emit("UNLOAD"),c.explainThumbnail={},c.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),c.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),c.explainPhoto=!1,c.disabled=!0;var e=new FormData;e.append("myfile",c.file.upload),r.post("/api/createPhotoExplain/",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.explainPhoto=!0,c.disabled=!1;var t={explain:e.data.item_path};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)}),c.file={}}else a.$emit("UNLOAD"),o.alert(e.data.message),c.disabled=!1,c.file={}})},c.myImage="",c.myCroppedImage="";var m=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),c.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",m),this.readCropImage=function(t){if(a.$emit("LOAD"),c.thumbnail=!1,c.disabled=!0,""===t.base64Url||null===t.base64Url||void 0===t.base64Url)c.disabled=!1;else{a.$emit("UNLOAD");var n=d(a.myCroppedImage);e.readAristCrop(n).then(function(e){if(e.data.success){a.$emit("UNLOAD"),o.alert(e.data.message),c.thumbnail=!0,c.disabled=!1;var t={thumbnail:e.data.filePath};r.put("/api/item/"+u,t).then(function(e){e.data.success,console.log(e.data.message)})}else a.$emit("UNLOAD"),c.disabled=!1})}}}]).controller("createItemCtrl",["$http","$timeout","$scope","Admin","$state","$window","Menu",function(e,t,a,r,n,s,o){function l(e){var t=e.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);return 3!==t.length?new Error("Invalid input string"):{type:t[1],data:t[2]}}var d=this;d.kindList=[],d.type_tiny=[],d.type_price=[],this.addLine=function(e){e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?s.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?s.alert("옵션 가격을 입력해주세요."):(d.kindList.push({kind:e.kindValue,price:e.kindPrice}),d.type_tiny.push(e.kindValue),d.type_price.push(e.kindPrice)):s.alert("정확한 값을 입력해주세요.")},d.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},d.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},o.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)d.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else d.errorMsg=e.data.message}),this.readMenu=function(t){if(0===t.id)s.alert("카테고리를 선택해주세요.");else{var a=t.id;e.get("/api/menu/"+a).then(function(e){if(e.data.success)if(0===e.data.result.length)d.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},s.alert("등록된 상품이 없습니다.");else{d.data2={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}};var t=e.data.result;for(i=0;i<t.length;i++)d.data2.availableOptions[i+1]={name:t[i].type_description,id:t[i].item_type_id}}})}},this.file={},this.mainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),d.mainThumbnail={},d.mainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),d.mainThumbnail={}},this.readPhoto=function(){a.$emit("LOAD"),d.mainPhoto=!1,d.disabled=!0;var t=new FormData;t.append("myfile",d.file.upload),e.post("/api/createPhotoImage/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),d.mainPhoto=!0,d.disabled=!1,d.mainImagePath=e.data.item_path,d.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),d.disabled=!1,d.file={})})},this.explainPhotoChanged=function(e){if(a.$emit("LOAD"),e.length>0&&e[0].name.match(/\.(png|jpeg|jpg)$/)){var r=e[0],n=new FileReader;n.readAsDataURL(r),n.onload=function(e){t(function(){a.$emit("UNLOAD"),d.explainThumbnail={},d.explainThumbnail.dataUrl=e.target.result})}}else a.$emit("UNLOAD"),d.explainThumbnail={}},this.readPhotoExplain=function(){a.$emit("LOAD"),d.explainPhoto=!1,d.disabled=!0;var t=new FormData;t.append("myfile",d.file.upload),e.post("/api/createPhotoExplain/",t,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),d.explainPhoto=!0,d.disabled=!1,d.explainImagePath=e.data.item_path,d.file={}):(a.$emit("UNLOAD"),s.alert(e.data.message),d.disabled=!1,d.file={})})},d.myImage="",d.myCroppedImage="";var c=function(e){a.$emit("LOAD");var t=e.currentTarget.files[0],r=new FileReader;r.onload=function(e){a.$apply(function(t){t.$emit("UNLOAD"),d.myImage=e.target.result})},r.readAsDataURL(t)};angular.element(document.querySelector("#fileInput")).on("change",c),this.readCropImage=function(e){if(a.$emit("LOAD"),d.thumbnail=!1,d.disabled=!0,""===e.base64Url||null===e.base64Url||void 0===e.base64Url)d.disabled=!1;else{a.$emit("UNLOAD");var t=l(a.myCroppedImage);r.readAristCrop(t).then(function(e){e.data.success?(a.$emit("UNLOAD"),s.alert(e.data.message),d.thumbnail=!0,d.disabled=!1,d.thumbnailPath=e.data.filePath):(a.$emit("UNLOAD"),d.disabled=!1)})}},this.createPhoto=function(e){a.$emit("LOAD"),void 0===e||null===e||""===e?(s.alert("빈칸을 모두 입력해주세요."),d.disabled=!1,a.$emit("UNLOAD")):"0"===d.data2.selectedOption.id?(a.$emit("UNLOAD"),d.disabled=!1,s.alert("상품 분류을 선택해주세요.")):void 0===e.title||null===e.title||""===e.title?(a.$emit("UNLOAD"),d.disabled=!1,s.alert("상품 제목를 입력해주세요.")):(d.uploadData={title:e.title,type:d.data2.selectedOption.id,kind:d.type_tiny.toString(),price:d.type_price.toString()},r.createItem(d.uploadData).then(function(e){e.data.success?(a.$emit("UNLOAD"),d.disabled=!0,s.alert(e.data.message),n.reload()):(a.$emit("UNLOAD"),d.disabled=!1,s.alert(e.data.message))}))}}]),angular.module("menuControllers",["menuServices"]).controller("mainMenuCtrl",["Menu","$state",function(e,t){var a=this;this.createMenu=function(r){if(a.errorMsg=!1,void 0===r)a.errorMsg="올바른 정보를 입력해주세요.";else{var n={name:r.name};e.createMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}},this.update=function(r){a.errorMsg=!1;var n={category_id:r.category_id,name:r.name};e.updateMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})},this.delete=function(r){a.errorMsg=!1;var n=r.category_id;e.deleteMenu(n).then(function(e){e.data.success?(a.successMsg=e.data.message,t.reload()):a.errorMsg=e.data.message})}}]).controller("subMenuCtrl",["Menu","$state","$stateParams","$http",function(e,t,a,r){var n=this,i=a.category_id;r.get("/api/category/"+i).then(function(e){e.data.success&&(n.subMenuDatas=e.data.result)})}]),angular.module("typeControllers",["adminServices","menuServices","orderServices"]).controller("updateItemTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_id;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateItemType(s).then(function(e){if(n.errorMsg=!1,e.data.success){t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id};var a={kind:n.updataData.kind.split(","),price:n.updataData.price.split(",")};for(n.optionDatas=[],i=0;i<a.kind.length;i++)n.optionDatas[i]={kind:a.kind[i],price:a.price[i]}}else n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})},this.updateitemType=function(e){var t=[],s=[];for(i=0;i<n.optionDatas.length;i++)t.push(n.optionDatas[i].kind),s.push(n.optionDatas[i].price);var o={item_id:e.item_id,item_name:e.item_name,price:s.toString(),kind:t.toString()};a.updateItemType(o).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readItemTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyItemType=function(a){var r={type:a.item_type_id,title:a.item_name,kind:a.kind.toString(),price:a.price.toString()};e.createItem(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_id;e.deleteItem(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readItemType().then(function(e){if(e.data.success){r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(a=0;a<t.length;a++)n.data.availableOptions[a+1]={name:t[a].name,id:t[a].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result;for(var t=[],a=0;a<e.data.result.length;a++)t[a]={kind:n.typeDatas[a].kind.split(","),price:n.typeDatas[a].price.split(",")},n.typeDatas[a].kind=t[a].kind,n.typeDatas[a].price=t[a].price}else n.errorMsg=e.data.message})}]).controller("updateTypeCtrl",["$stateParams","Menu","Admin","$state",function(e,t,a,r){var n=this,s=e.item_type;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readUpdateType(s).then(function(e){n.errorMsg=!1,e.data.success?(t.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.updataData=e.data.result,n.data.selectedOption={id:n.updataData.category_id}):n.errorMsg=e.data.message}),this.updateType=function(e){n.updateData=e,n.updateData.category_id=n.data.selectedOption.id,a.updateUpdateType(n.updateData).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,r.reload()):n.errorMsg=e.data.message})}}]).controller("readTypeCtrl",["Admin","$state","$window","Menu",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},this.copyType=function(a){var r={category:a.category_id,type_description:a.type_description,type_code:a.type_code};e.createType(r).then(function(e){n.errorMsg=!1,e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},this.deleteType=function(a){n.errorMsg=!1;var r=a.item_type;e.deleteType(r).then(function(e){e.data.success?(n.successMsg=e.data.message,t.reload()):n.errorMsg=e.data.message})},e.readType().then(function(e){e.data.success?(r.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),n.typeDatas=e.data.result):n.errorMsg=e.data.message})}]).controller("createTypeCtrl",["Admin","$state","Menu","$window",function(e,t,a,r){var n=this;n.data={availableOptions:[{id:"0",name:"카테고리를 선택해주세요."}],selectedOption:{id:"0",name:"카테고리를 선택해주세요."}},a.readMainMenu().then(function(e){if(e.data.success){var t=e.data.result;for(i=0;i<t.length;i++)n.data.availableOptions[i+1]={name:t[i].name,id:t[i].category_id}}else n.errorMsg=e.data.message}),this.createType=function(a){n.errorMsg=!1,n.typeData={category:n.data.selectedOption.id,type_description:a.type_description,type_code:a.type_code},e.createType(n.typeData).then(function(e){e.data.success?(n.success=e.data.message,t.reload()):n.errorMsg=e.data.message})},n.kindList=[],n.type_tiny=[],n.type_price=[],this.addLine=function(e){e?null===e.kindValue||void 0===e.kindValue||""===e.kindValue?r.alert("옵션명을 입력해주세요."):null===e.kindPrice||void 0===e.kindPrice||""===e.kindPrice?r.alert("옵션 가격을 입력해주세요."):(n.kindList.push({kind:e.kindValue,price:e.kindPrice}),n.type_tiny.push(e.kindValue),n.type_price.push(e.kindPrice)):r.alert("정확한 값을 입력해주세요.")}}]),angular.module("mainControllers",["authServices","userServices"]).controller("mainCtrl",["Auth","$timeout","$location","$state","$rootScope","$scope","$window","$interval","User","AuthToken",function(e,t,a,r,n,i,s,o,l,d){var c=this;c.loadme=!1,i.$on("LOAD",function(){i.loading=!0}),i.$on("UNLOAD",function(){i.loading=!1}),n.$on("$stateChangeStart",function(){u?e.isLoggedIn()?(c.isLoggedIn=!0,c.loadme=!0,
e.getUser().then(function(e){c.user=e.data,c.loadme=!0,l.getPermission().then(function(e){e.data.success?"admin"===e.data.permission?(c.authorized=!0,c.permission=!0,c.loadme=!0):"artist"===e.data.permission?(c.permission=!0,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0):(c.permission=!1,c.authorized=!1,c.loadme=!0)})})):(c.user=!1,c.isLoggedIn=!1,c.loadme=!0):u()});var u=function(){if(e.isLoggedIn()){c.checkSession=!0;var t=o(function(){var e=s.localStorage.getItem("token");if(null===e)o.cancel(t);else{self.parseJwt=function(e){var t=e.split(".")[1],a=t.replace("-","+").replace("_","/");return JSON.parse(s.atob(a))};var a=self.parseJwt(e),r=Math.floor(Date.now()/1e3);a.exp-r<=5&&(m("expired"),o.cancel(t))}},2e3)}};u(),c.renewSession=function(){c.choiceMade=!0,l.renewSession(c.user.username).then(function(e){e.data.success?(d.setToken(e.data.token),u(),p("expired")):(c.ModalBody=e.data.message,p("expired"))})},c.endSession=function(){c.choiceMade=!0,p("expired"),t(function(){m("logout")},500)};var m=function(a){c.choiceMade=!1,c.modalHeader=void 0,c.modalBody=void 0,c.hideButton=!1,"expired"===a?(c.modalHeader="Timeout Warning",c.modalBody="Your session will expired in 5 minutes. Would you like to renew your session?",$("#myModal").modal({backdrop:"static"})):"logout"===a?(c.hideButton=!0,c.modalHeader="로그아웃",$("#myModal").modal({backdrop:"static"}),t(function(){e.logout(),c.isLoggedIn=!1,c.authorized=!1,c.permission=!1,c.disabled=!1,c.successMsg=!1,p("logout"),r.reload()},1e3)):"login"===a&&$("#login").modal({backdrop:"static"}),t(function(){c.choiceMade||p("logout")},2e3)},p=function(e){"expired"===e?$("#myModal").modal("hide"):"logout"===e?$("#myModal").modal("hide"):"login"===e&&$("#login").modal("hide")};this.doLogin=function(a,n){c.errorMsg=!1,c.expired=!1,c.disabled=!0,n?e.login(c.loginData).then(function(e){e.data.success?(c.successMsg=e.data.message,t(function(){c.loginData=null,c.isLoggedIn=!0,u(),r.go("app")},1e3)):e.data.expired?(c.expired=!0,c.disabled=!0,c.errorMsg=e.data.message):(c.disabled=!1,c.errorMsg=e.data.message)}):(c.disabled=!1,c.loading=!1,c.errorMsg="올바른 정보를 입력해주세요.")},c.logout=function(){m("logout")},c.resend=function(){p("login"),t(function(){r.go("resend"),c.expired=!1},500)},c.resetusername=function(){p("login"),t(function(){r.go("resetusername")},500)},c.resetpassword=function(){p("login"),t(function(){r.go("resetpassword")},500)}}]),angular.module("orderControllers",["orderServices"]).controller("readOrderCtrl",["$stateParams","$state","$window","Order","$scope",function(e,t,a,r,n){var s=this,o=n.main.user.user_id;s.getItemFail=!1,s.cashReceipt=!0,s.cashReceipt?s.getCashReceipt=!0:s.getCashReceipt=!1,this.readAddress=function(){daum.postcode.load(function(){s.addressDetail="",new daum.Postcode({oncomplete:function(e){s.deliData={sigungu_code:e.sigunguCode,jibun_address:e.jibunAddress,road_address:e.roadAddress}}}).open()})},r.readOrderAndDeli().then(function(e){if(s.errorMsg=!1,e.data.success)if(0===e.data.result.length)s.delivery=!1,r.readOrder(o).then(function(e){var t=[];for(s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]});else{var t=[];for(s.delivery=!0,s.allItemPrice=0,s.orderData=e.data.result,i=0;i<s.orderData.length;i++)t[i]=s.orderData[i].price*s.orderData[i].amount;for(i=0;i<t.length;i++)s.allItemPrice=s.allItemPrice+t[i]}else s.errorMsg=e.data.message}),this.confirmOrder=function(e){var t="";s.delivery?void 0===e.daliData?console.log("변경사항 없음"):(t=e.daliData,r.updateDelivery(t).then(function(e){})):(t=e.daliData,e.receiptData,r.createDelivery(t).then(function(e){}))},this.delete=function(e){s.errorMsg=!1;var a=e.item_id;r.deleteOrder(a).then(function(e){e.data.success?(s.successMsg=e.data.message,t.reload()):s.errorMsg=e.data.message})}}]).controller("basketCtrl",["Order","$window","$state",function(e,t,a){var r=this;r.amount=1,r.data={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},this.delete=function(t){r.errorMsg=!1;var n=t.basket_id;e.deleteBasket(n).then(function(e){e.data.success?(r.successMsg=e.data.message,a.reload()):r.errorMsg=e.data.message})},this.makeBasket=function(){},e.readBasket().then(function(e){if(r.errorMsg=!1,e.data.success){r.basketData=e.data.result;var t,a=[],n=[];for(t=0;t<r.basketData.length;t++)a[t]=r.basketData[t].kind.split(","),n[t]=r.basketData[t].price.split(",");for(t=0;t<a.length;t++)for(r.data[t]={availableOptions:[{id:0,name:"카테고리를 선택해주세요."}],selectedOption:{id:0,name:"카테고리를 선택해주세요."}},j=0;j<a[t].length;j++)r.data[t].availableOptions[j+1]={name:a[t][j],id:Number(n[t][j])}}else r.errorMsg=e.data.message})}]),angular.module("emailControllers",["userServices"]).controller("emailCtrl",["$stateParams","User","$timeout","$state",function(e,t,a,r){var n=this;t.activeAccount(e.token).then(function(e){n.successMsg=!1,n.errorMsg=!1,e.data.success?(n.disabled=!0,n.successMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3)):(n.errorMsg=e.data.message+"...메인 페이지로 이동합니다.",a(function(){r.go("app")},2e3))})}]).controller("resendCtrl",["User","$timeout","$state",function(e,t,a){app=this,this.checkCredentials=function(r){app.successMsg=!1,app.errorMsg=!1,app.disabled=!0,e.checkCredentials(this.loginData).then(function(r){r.data.success?e.resendLink(app.loginData).then(function(e){e.data.success&&(app.disabled=!0,app.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3))}):(app.disabled=!1,app.errorMsg=r.data.message)})}}]).controller("usernameCtrl",["User","$timeout","$state",function(e,t,a){var r=this;this.sendUsername=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendUsername(r.userData.email).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 이메일 주소가 아닙니다.")}}]).controller("passwordCtrl",["User","$timeout","$state",function(e,t,a){var r=this;r.sendPassword=function(n,i){r.errorMsg=!1,r.disabled=!0,i?e.sendPassword(r.resetData).then(function(e){e.data.success?(r.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){a.go("app")},2e3)):(r.disabled=!1,r.errorMsg=e.data.message)}):(r.disabled=!1,r.errorMsg="올바른 아이디가 아닙니다.")}}]).controller("resetCtrl",["$stateParams","$scope","User","$timeout","$state",function(e,t,a,r,n){var i=this;i.hide=!0,a.resetPassword(e.token).then(function(e){e.data.success?(i.hide=!1,t.alert="alert alert-success",i.successMsg="새로운 비밀번호를 입력해주세요.",t.username=e.data.user[0].username):(t.alert="alert alert-danger",i.errorMsg=e.data.message)}),i.savePassword=function(e,s,o){i.errorMsg=!1,i.successMsg=!1,i.disabled=!0,i.loading=!0,s&&o?(i.regData.username=t.username,a.savePassword(i.regData).then(function(e){i.loading=!1,e.data.success?(t.alert="alert alert-success",i.successMsg=e.data.message+"...메인 화면으로 이동합니다.",r(function(){n.go("app")},2e3)):(t.alert="alert alert-danger",i.disabled=!1,i.errorMsg=e.data.message)})):(t.alert="alert alert-danger",i.loading=!1,i.disabled=!1,i.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("userControllers",["userServices"]).controller("regCtrl",["$http","$location","$timeout","User","Auth","$state",function(e,t,a,r,n,i){var s=this;this.regStep1=function(e){s.errorMsg=!1,e?e.terms&&e.privacy?(s.successMsg="약관에 성공적으로 동의하셨습니다.",s.disabled=!0,i.go("app.registerStep2")):(s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다.",s.disabled=!1):s.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다."},this.regStep2=function(e,t,a){s.errorMsg=!1,s.disabled=!0,i.go("app.registerStep3")},this.regStep3=function(e,t,o){s.errorMsg=!1,s.disabled=!0,t&&o?r.create(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,n.login(s.regData).then(function(e){e.data.success?(s.disabled=!0,s.successMsg=e.data.message,a(function(){i.go("app")},1e3)):e.data.expired?(s.expired=!0,s.disabled=!0,s.errorMsg=e.data.message):(s.disabled=!1,s.errorMsg=e.data.message)})):(s.disabled=!1,s.errorMsg=e.data.message)}):(s.disabled=!1,s.loading=!1,s.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("app").directive("adminHeader",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/admin/adminHeader.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,a,r){var n=e(r.fileModel),i=n.assign;a.bind("change",function(){t.$apply(function(){i(t,a[0].files[0])})})}}}]),angular.module("app").directive("match",function(){return{restrict:"A",controller:["$scope",function(e){e.doConfirm=function(t){e.confirmed=!1,t.forEach(function(t){e.confirm==t?e.confirmed=!0:e.confirmed=!1})}}],link:function(e,t,a){a.$observe("match",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)}),e.$watch("confirm",function(){e.matches=JSON.parse(a.match),e.doConfirm(e.matches)})}}}),angular.module("app").directive("companyIntroduce",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/companyIntroduce.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("companyPrivacyInformation",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/companyInformation/companyPrivacyInformation.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("privacy",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/privacy.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("terms",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/terms.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("userQuickMenu",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/companyInformation/userQuickMenu.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("content",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/main/content.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("footer",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/footer.tpl.html",link:function(e,t,a,r){}}}]),angular.module("app").directive("header",[function(){return{restrict:"E",controller:[function(){}],templateUrl:"/directives/main/header.tpl.html",link:function(e,t,a,r){}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
